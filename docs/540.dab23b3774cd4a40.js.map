{"version":3,"file":"540.dab23b3774cd4a40.js","mappings":"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","names":["ReplaySubject","Subject","constructor","_bufferSize","Infinity","_windowTime","_timestampProvider","dateTimestampProvider","super","this","_buffer","_infiniteTimeWindow","Math","max","next","value","isStopped","push","now","_trimBuffer","_subscribe","subscriber","_throwIfClosed","subscription","_innerSubscribe","copy","slice","i","length","closed","_checkFinalizedStatuses","adjustedBufferSize","splice","last","AdminDashboardService","playerService","matchService","leagueService","messageService","noteService","essentialDataCache$","BehaviorSubject","secondaryDataCache","Map","lastEssentialUpdate","lastSecondaryUpdate","CACHE_DURATION","SECONDARY_CACHE_DURATION","getEssentialData","forceRefresh","Date","asObservable","pipe","filter","data","loadEssentialDataFromServer","tap","catchError","error","console","of","getEmptyDashboardData","shareReplay","configOrBufferSize","windowTime","scheduler","bufferSize","refCount","share","connector","resetOnError","resetOnComplete","resetOnRefCountZero","getSecondaryData","type","lastUpdate","get","hasValidCache","has","loadSecondaryDataFromServer","set","forkJoin","players","getAdminPlayers","matches","getAdminMatches","currentLeague","getAdminCurrentLeague","map","response","league","allLeagues","getAdminAllLeagues","notes","getAdminNotes","messages","getAdminMessages","messagesList","Array","isArray","stats","totalPlayers","totalMatches","totalMatchesLeft","m","isCompleted","totalMessagesLeft","isRead","isFromAdmin","invalidateCache","delete","clear","getCurrentEssentialData","updateMessageCount","count","current","i0","i1","i2","i3","i4","i5","factory","ɵfac","providedIn","player_r16","_r18","$implicit","ctx_r17","selectPlayer","$event","ctx_r19","confirmDelete","ctx_r15","selectedPlayer","playerId","fullName","PlayersComponent_ul_6_li_1_Template","ctx_r0","_r21","ctx_r20","openModal","match_r23","_r26","ctx_r25","updateMatch","matchId","player1Id","ctx_r27","player2Id","ctx_r28","ctx_r29","resetMatch","i_r24","player1Name","player2Name","score1","score2","_c0","ctx_r22","loadingMatches","PlayersComponent_div_9_tr_15_Template","ctx_r2","displayMatches","ctx_r3","_r31","ctx_r30","openStartLeagueModal","_r33","ctx_r32","showEndLeagueModal","_r35","ctx_r34","onTournamentStageButtonClick","ctx_r6","tournamentStageButtonText","PlayersComponent_div_23_p_9_Template","PlayersComponent_div_23_p_10_Template","PlayersComponent_div_23_p_11_Template","ctx_r7","leagueData","description","typeOfLeague","createdOn","name","league_r39","_r42","ctx_r41","openDeleteLeagueModal","leagueId","_c1","i_r40","leagueName","isFinished","leagueType","systemOfLeague","_r44","ctx_r43","closeDeleteLeagueModal","ctx_r45","deleteConfirmedLeague","ctx_r9","selectedLeagueToDelete","_r47","ctx_r46","showDeleteModal","ctx_r48","deleteConfirmedPlayer","ctx_r10","selectedPlayerToDelete","_r50","ctx_r49","newPlayerName","ctx_r51","closeModal","ctx_r52","addPlayer","ctx_r11","_r54","ctx_r53","newLeague","ctx_r55","ctx_r56","ctx_r57","ctx_r58","closeStartLeagueModal","ctx_r59","startLeague","ctx_r12","_r61","ctx_r60","ctx_r62","resetTournament","id","_r70","note_r64","ctx_r68","toggleHideNote","_r73","ctx_r71","_r76","ctx_r74","toggleDeleteNote","PlayersComponent_div_68_div_15_div_1_button_5_Template","PlayersComponent_div_68_div_15_div_1_button_6_Template","content","isHidden","PlayersComponent_div_68_div_15_div_1_Template","isDeleted","_r79","ctx_r78","newNote","ctx_r80","sendNote","PlayersComponent_div_68_div_15_Template","ctx_r81","closeNoteModal","ctx_r14","PlayersComponent","toastr","adminDashboardService","playerOrder","playerMatches","showModal","isSidebarOpen","showNoteModal","showDeleteLeagueModal","requestQueue","isProcessingQueue","showResetModal","showStartLeagueModal","totalMessages","leagues","currentMatches","showTournamentStageButton","tournamentStageButtonAction","ngOnInit","loadEssentialData","subscribeToUpdates","ngOnDestroy","loadCurrentLeagueFromServer","subscribe","updateTournamentStageButton","err","log","messagesUnread","toggleSidebar","player","loadMatches","sort","a","b","nameA","toLowerCase","nameB","localeCompare","match","forEach","addToQueue","request","processQueue","_this","_asyncToGenerator","shift","winnerId","Promise","resolve","reject","success","message","deletePlayer","event","stopPropagation","warning","trim","resetLeague","DeleteLeague","find","l","res","note","toggleMarHide","noteId","DeleteNote","openNoteModal","loadCurrentMatches","LeagueType","Groups","startGroupStage","groupMatches","stage","TournamentStage","GroupStage","tournamentStage","quarterMatches","QuarterFinals","semiMatches","SemiFinals","finalMatches","Final","allGroupMatchesCompleted","every","allQuarterMatchesCompleted","allSemiMatchesCompleted","startQuarterStage","startSemiFinalStage","startFinalStage","createGroupsAndMatches","startKnockoutStage","startSemiFinals","startFinal","i6","i7","selectors","decls","vars","consts","template","rf","ctx","PlayersComponent_ul_6_Template","PlayersComponent_button_7_Template","PlayersComponent_div_9_Template","PlayersComponent_div_17_Template","PlayersComponent_button_18_Template","PlayersComponent_button_19_Template","PlayersComponent_button_20_Template","PlayersComponent_div_23_Template","PlayersComponent_tr_62_Template","PlayersComponent_div_63_Template","PlayersComponent_div_64_Template","PlayersComponent_div_65_Template","PlayersComponent_div_66_Template","PlayersComponent_div_67_Template","PlayersComponent_div_68_Template","_c2","chat_r6","unreadCount","_r10","openChat","senderId","InboxComponent_div_6_div_1_span_6_Template","senderFullName","lastMessage","InboxComponent_div_6_div_1_Template","ctx_r1","playerChats","trackByPlayerId","message_r13","sentAt","_r15","closeChat","InboxComponent_div_8_div_12_Template","ctx_r16","sendReply","replyMessages","selectedChat","ctx_r18","navbarHeight","_c3","senderPhoneNumber","trackByMessageId","_c4","routes","path","component","InboxComponent","cdr","selectedPlayerId","loadAdminMessages","updateStatusSubscription","unsubscribe","refreshSubscription","loadFromServer","loadFromCache","groupedMessages","groupMessagesBySender","lastMessageDate","getTime","refreshMessages","ngAfterViewChecked","messagesContainer","scrollToBottom","loadMessages","getMessages","processMessages","detectChanges","chatMap","msg","Object","values","chat","lastMsg","toggleMarkMessage","replyContent","sendAdminReply","newMessage","random","toISOString","container","nativeElement","scrollTop","scrollHeight","index","viewQuery","InboxComponent_div_5_Template","InboxComponent_div_6_Template","InboxComponent_div_8_Template","InboxComponent_ng_template_9_Template","_c5","_c6","_r3","AdminRoutingModule","RouterModule","forChild","AdminModule","CommonModule","FormsModule","HttpClientModule","PlayerModule","SharedModule"],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/ReplaySubject.js","./src/app/core/services/admin-dashboard.service.ts","./node_modules/rxjs/dist/esm/internal/operators/shareReplay.js","./src/app/admin/players/players.component.html","./src/app/admin/players/players.component.ts","./src/app/admin/inbox/inbox.component.html","./src/app/admin/admin-routing.module.ts","./src/app/admin/inbox/inbox.component.ts","./src/app/admin/admin.module.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject, forkJoin, of } from 'rxjs';\r\nimport { map, tap, catchError, shareReplay, filter } from 'rxjs/operators';\r\nimport { PlayerService } from './player.service';\r\nimport { MatchService } from './match.service';\r\nimport { LeagueService } from './league.service';\r\nimport { MessageService } from './message.service';\r\nimport { NoteService } from './note.service';\r\nimport {\r\n  Player,\r\n  Match,\r\n  League,\r\n  AllLeagueRank,\r\n  Note,\r\n  Message,\r\n} from '../../models/interfaces';\r\n\r\nexport interface AdminDashboardData {\r\n  players: Player[];\r\n  matches: Match[];\r\n  currentLeague: League | null;\r\n  allLeagues: AllLeagueRank[];\r\n  notes: Note[];\r\n  messages: Message[];\r\n  stats: {\r\n    totalPlayers: number;\r\n    totalMatches: number;\r\n    totalMatchesLeft: number;\r\n    totalMessagesLeft: number;\r\n  };\r\n}\r\n\r\nexport interface AdminSecondaryData {\r\n  allLeagues: AllLeagueRank[];\r\n  notes: Note[];\r\n  messages: Message[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminDashboardService {\r\n  private essentialDataCache$ = new BehaviorSubject<AdminDashboardData | null>(\r\n    null\r\n  );\r\n  private secondaryDataCache = new Map<string, any>();\r\n  private lastEssentialUpdate = 0;\r\n  private lastSecondaryUpdate = new Map<string, number>();\r\n  private readonly CACHE_DURATION = 900000; // 15 minutes\r\n  private readonly SECONDARY_CACHE_DURATION = 900000; // 15 minutes (same as main cache)\r\n\r\n  constructor(\r\n    private playerService: PlayerService,\r\n    private matchService: MatchService,\r\n    private leagueService: LeagueService,\r\n    private messageService: MessageService,\r\n    private noteService: NoteService\r\n  ) {}\r\n\r\n  /**\r\n   * Get essential dashboard data with smart caching\r\n   */\r\n  getEssentialData(forceRefresh = false): Observable<AdminDashboardData> {\r\n    const now = Date.now();\r\n    const hasValidCache =\r\n      this.essentialDataCache$.value &&\r\n      now - this.lastEssentialUpdate < this.CACHE_DURATION;\r\n\r\n    if (!forceRefresh && hasValidCache) {\r\n      return this.essentialDataCache$\r\n        .asObservable()\r\n        .pipe(filter((data): data is AdminDashboardData => data !== null));\r\n    }\r\n\r\n    return this.loadEssentialDataFromServer().pipe(\r\n      tap((data) => {\r\n        this.essentialDataCache$.next(data);\r\n        this.lastEssentialUpdate = now;\r\n      }),\r\n      catchError((error) => {\r\n        console.error('❌ Error loading essential data:', error);\r\n        // Return cached data if available, otherwise empty state\r\n        return of(\r\n          this.essentialDataCache$.value || this.getEmptyDashboardData()\r\n        );\r\n      }),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get secondary data with smart caching\r\n   */\r\n  getSecondaryData(\r\n    type: 'leagues' | 'notes' | 'messages',\r\n    forceRefresh = false\r\n  ): Observable<any> {\r\n    const now = Date.now();\r\n    const lastUpdate = this.lastSecondaryUpdate.get(type) || 0;\r\n    const hasValidCache =\r\n      this.secondaryDataCache.has(type) &&\r\n      now - lastUpdate < this.SECONDARY_CACHE_DURATION;\r\n\r\n    if (!forceRefresh && hasValidCache) {\r\n      return of(this.secondaryDataCache.get(type));\r\n    }\r\n\r\n    return this.loadSecondaryDataFromServer(type).pipe(\r\n      tap((data) => {\r\n        this.secondaryDataCache.set(type, data);\r\n        this.lastSecondaryUpdate.set(type, now);\r\n      }),\r\n      catchError((error) => {\r\n        console.error(`❌ Error loading ${type}:`, error);\r\n        // Return cached data if available\r\n        return of(this.secondaryDataCache.get(type) || []);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load essential data from server using parallel requests\r\n   */\r\n  private loadEssentialDataFromServer(): Observable<AdminDashboardData> {\r\n    return forkJoin({\r\n      players: this.playerService.getAdminPlayers(),\r\n      matches: this.matchService.getAdminMatches(),\r\n      currentLeague: this.leagueService.getAdminCurrentLeague().pipe(\r\n        map((response) => response.league),\r\n        catchError(() => of(null))\r\n      ),\r\n      allLeagues: this.leagueService\r\n        .getAdminAllLeagues()\r\n        .pipe(catchError(() => of([]))),\r\n      notes: this.noteService.getAdminNotes().pipe(\r\n        map((response) => response.notes),\r\n        catchError(() => of([]))\r\n      ),\r\n      messages: this.messageService.getAdminMessages().pipe(\r\n        map((response) => response.messages || []),\r\n        catchError(() => of([]))\r\n      ),\r\n    }).pipe(\r\n      map(\r\n        ({ players, matches, currentLeague, allLeagues, notes, messages }) => {\r\n          const messagesList = Array.isArray(messages) ? messages : [];\r\n          return {\r\n            players: players as Player[],\r\n            matches: matches as Match[],\r\n            currentLeague,\r\n            allLeagues: allLeagues as AllLeagueRank[],\r\n            notes: notes as Note[],\r\n            messages: messagesList as Message[],\r\n            stats: {\r\n              totalPlayers: players.length,\r\n              totalMatches: matches.length,\r\n              totalMatchesLeft: matches.filter((m) => !m.isCompleted).length,\r\n              totalMessagesLeft: messagesList.filter(\r\n                (m: any) => !m.isRead && !m.isFromAdmin\r\n              ).length,\r\n            },\r\n          };\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load secondary data from server\r\n   */\r\n  private loadSecondaryDataFromServer(type: string): Observable<any> {\r\n    switch (type) {\r\n      case 'leagues':\r\n        return this.leagueService.getAdminAllLeagues();\r\n      case 'notes':\r\n        return this.noteService\r\n          .getAdminNotes()\r\n          .pipe(map((response) => response.notes));\r\n      case 'messages':\r\n        return this.messageService\r\n          .getAdminMessages()\r\n          .pipe(map((response) => response.messages || []));\r\n      default:\r\n        return of([]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update cached data after mutations\r\n   */\r\n  invalidateCache(\r\n    type: 'essential' | 'leagues' | 'notes' | 'messages' | 'all'\r\n  ): void {\r\n    switch (type) {\r\n      case 'essential':\r\n        this.lastEssentialUpdate = 0;\r\n        break;\r\n      case 'leagues':\r\n      case 'notes':\r\n      case 'messages':\r\n        this.lastSecondaryUpdate.set(type, 0);\r\n        this.secondaryDataCache.delete(type);\r\n        break;\r\n      case 'all':\r\n        this.lastEssentialUpdate = 0;\r\n        this.lastSecondaryUpdate.clear();\r\n        this.secondaryDataCache.clear();\r\n        break;\r\n    }\r\n  }\r\n\r\n  // ✅ تم حذف Background refresh تماماً - مالوش لازمة أصلاً\r\n\r\n  /**\r\n   * Get current cached essential data\r\n   */\r\n  getCurrentEssentialData(): AdminDashboardData | null {\r\n    return this.essentialDataCache$.value;\r\n  }\r\n\r\n  /**\r\n   * Update message count in stats\r\n   */\r\n  updateMessageCount(count: number): void {\r\n    const current = this.essentialDataCache$.value;\r\n    if (current) {\r\n      current.stats.totalMessagesLeft = count;\r\n      this.essentialDataCache$.next(current);\r\n    }\r\n  }\r\n\r\n  private getEmptyDashboardData(): AdminDashboardData {\r\n    return {\r\n      players: [],\r\n      matches: [],\r\n      currentLeague: null,\r\n      allLeagues: [],\r\n      notes: [],\r\n      messages: [],\r\n      stats: {\r\n        totalPlayers: 0,\r\n        totalMatches: 0,\r\n        totalMatchesLeft: 0,\r\n        totalMessagesLeft: 0,\r\n      },\r\n    };\r\n  }\r\n}\r\n","import { ReplaySubject } from '../ReplaySubject';\nimport { share } from './share';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    let bufferSize;\n    let refCount = false;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        ({ bufferSize = Infinity, windowTime = Infinity, refCount = false, scheduler } = configOrBufferSize);\n    }\n    else {\n        bufferSize = (configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity);\n    }\n    return share({\n        connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n        resetOnError: true,\n        resetOnComplete: false,\n        resetOnRefCountZero: refCount,\n    });\n}\n","<!-- Admin Update Status Component -->\r\n\r\n<div class=\"block sm:flex transition-all duration-600\">\r\n  <!-- Sidebar -->\r\n  <div\r\n    class=\"bg-black bg-opacity-50 backdrop-blur-sm text-white transition-all duration-600\"\r\n    [ngClass]=\"{\r\n      'w-64 p-4 sm:min-h-screen': isSidebarOpen,\r\n      'w-0 p-0': !isSidebarOpen\r\n    }\"\r\n  >\r\n    <h2\r\n      class=\"text-lg font-bold mb-4 flex justify-between overflow-hidden text-white\"\r\n    >\r\n      Players\r\n      <button (click)=\"toggleSidebar()\" class=\"text-gray-300 text-3xl\">\r\n        ×\r\n      </button>\r\n    </h2>\r\n    <ul *ngIf=\"isSidebarOpen\">\r\n      <li\r\n        *ngFor=\"let player of players\"\r\n        class=\"flex items-center justify-between p-2 cursor-pointer rounded-md hover:bg-gray-700\"\r\n        [class.bg-blue-600]=\"selectedPlayer?.playerId === player.playerId\"\r\n        (click)=\"selectPlayer(player)\"\r\n      >\r\n        <span class=\"text-white\">{{ player.fullName }}</span>\r\n        <button\r\n          (click)=\"confirmDelete(player, $event)\"\r\n          class=\"bg-red-600 px-2 py-1 text-sm rounded text-white hover:bg-red-700 transition\"\r\n        >\r\n          X\r\n        </button>\r\n      </li>\r\n    </ul>\r\n    <button\r\n      *ngIf=\"isSidebarOpen\"\r\n      class=\"mt-4 w-full bg-green-600 p-2 rounded text-white hover:bg-green-700 transition\"\r\n      (click)=\"openModal()\"\r\n    >\r\n      Add Player\r\n    </button>\r\n  </div>\r\n\r\n  <!-- Main Content -->\r\n  <div\r\n    class=\"sm:flex-1 sm:p-2 transition-all duration-600 sm:container sm:mx-auto\"\r\n  >\r\n    <div *ngIf=\"selectedPlayer\" class=\"sm:w-4/6 mx-auto\">\r\n      <h2 class=\"text-2xl font-bold mb-4 text-center text-white\">\r\n        Matches for {{ selectedPlayer.fullName }}\r\n      </h2>\r\n\r\n      <table class=\"w-full border-collapse border border-gray-600 text-center\">\r\n        <thead>\r\n          <tr class=\"bg-black bg-opacity-50 backdrop-blur-sm text-white\">\r\n            <th class=\"border border-gray-600 p-2\">Player 1</th>\r\n            <th class=\"border border-gray-600 p-2\">Player 2</th>\r\n            <th class=\"border border-gray-600 p-2\">Result</th>\r\n            <th class=\"border border-gray-600 p-2\">Actions</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr\r\n            *ngFor=\"let match of displayMatches; let i = index\"\r\n            class=\"border border-gray-600\"\r\n            [ngClass]=\"i % 2 === 0 ? 'bg-gray-900' : 'bg-gray-950'\"\r\n          >\r\n            <td class=\"p-2 font-bold text-white\">{{ match.player1Name }}</td>\r\n            <td class=\"p-2 font-bold text-white\">{{ match.player2Name }}</td>\r\n            <td class=\"p-2 font-bold text-white\">\r\n              {{ match.score1 }} - {{ match.score2 }}\r\n            </td>\r\n            <td class=\"p-2\">\r\n              <button\r\n                class=\"bg-blue-600 px-2 py-1 rounded text-white hover:bg-blue-700 transition-all\"\r\n                (click)=\"updateMatch(match.matchId, match.player1Id)\"\r\n                [disabled]=\"match.isCompleted\"\r\n                [ngClass]=\"{\r\n                  'opacity-50 cursor-not-allowed': match.isCompleted\r\n                }\"\r\n              >\r\n                {{ loadingMatches[match.matchId] ? \"Load..\" : \"Win P1\" }}\r\n              </button>\r\n              <button\r\n                class=\"bg-blue-600 px-2 py-1 rounded text-white mx-1 hover:bg-blue-700 transition-all\"\r\n                (click)=\"updateMatch(match.matchId, match.player2Id)\"\r\n                [disabled]=\"match.isCompleted\"\r\n                [ngClass]=\"{\r\n                  'opacity-50 cursor-not-allowed': match.isCompleted\r\n                }\"\r\n              >\r\n                {{ loadingMatches[match.matchId] ? \"Load..\" : \"Win P2\" }}\r\n              </button>\r\n              <button\r\n                class=\"bg-yellow-600 px-2 py-1 rounded text-white hover:bg-yellow-700 transition-all\"\r\n                (click)=\"updateMatch(match.matchId, null)\"\r\n                [disabled]=\"match.isCompleted\"\r\n                [ngClass]=\"{\r\n                  'opacity-50 cursor-not-allowed': match.isCompleted\r\n                }\"\r\n              >\r\n                {{ loadingMatches[match.matchId] ? \"Load..\" : \"Draw\" }}\r\n              </button>\r\n              <button\r\n                class=\"bg-gray-600 px-2 py-1 rounded text-white ml-2 hover:bg-gray-700 transition-all\"\r\n                (click)=\"resetMatch(match.matchId)\"\r\n              >\r\n                {{ loadingMatches[match.matchId] ? \"Load..\" : \"Undo\" }}\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <hr class=\"my-3 border-gray-600\" />\r\n\r\n    <!-- القائمة الأولية -->\r\n    <div>\r\n      <div class=\"flex justify-evenly pt-5\">\r\n        <button\r\n          (click)=\"toggleSidebar()\"\r\n          class=\"bg-blue-600 text-white px-3 py-2 rounded mb-4 hover:bg-blue-700 transition\"\r\n        >\r\n          ☰ Players\r\n        </button>\r\n        <button\r\n          routerLink=\"/admin/inbox\"\r\n          class=\"bg-orange-600 hover:bg-orange-700 text-white mb-4 px-3 py-2 rounded transition-all relative\"\r\n        >\r\n          Inbox\r\n          <div\r\n            class=\"absolute -top-2 -right-2 w-[30px] h-[30px] rounded-full bg-green-600 flex justify-center items-center\"\r\n            *ngIf=\"totalMessagesLeft > 0\"\r\n          >\r\n            <h4 class=\"text-white font-bold\">{{ totalMessagesLeft }}</h4>\r\n          </div>\r\n        </button>\r\n        <button\r\n          class=\"bg-green-600 text-white px-3 py-2 rounded mb-4 hover:bg-green-700 transition\"\r\n          (click)=\"openStartLeagueModal()\"\r\n          *ngIf=\"leagueData == null\"\r\n        >\r\n          Start New League\r\n        </button>\r\n        <button\r\n          class=\"bg-red-600 text-white px-3 py-2 rounded mb-4 hover:bg-red-700 transition\"\r\n          *ngIf=\"leagueData != null\"\r\n          (click)=\"showEndLeagueModal = true\"\r\n          s\r\n        >\r\n          End League\r\n        </button>\r\n        <!-- Tournament Stage Button -->\r\n        <button\r\n          class=\"bg-purple-600 text-white px-3 py-2 rounded mb-4 hover:bg-purple-700 transition\"\r\n          *ngIf=\"showTournamentStageButton && leagueData != null\"\r\n          (click)=\"onTournamentStageButtonClick()\"\r\n        >\r\n          {{ tournamentStageButtonText }}\r\n        </button>\r\n        <button\r\n          class=\"bg-indigo-600 text-white px-3 py-2 rounded mb-4 hover:bg-indigo-700 transition\"\r\n          (click)=\"openNoteModal()\"\r\n        >\r\n          Notes\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        class=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-8\"\r\n        *ngIf=\"leagueData\"\r\n      >\r\n        <div\r\n          class=\"bg-black bg-opacity-50 backdrop-blur-sm shadow-md rounded p-6 text-center\"\r\n        >\r\n          <h3 class=\"text-lg font-semibold mb-2 text-white\">\r\n            League Description\r\n          </h3>\r\n          <p class=\"font-bold text-gray-300\">{{ leagueData.description }}</p>\r\n        </div>\r\n        <div\r\n          class=\"bg-black bg-opacity-50 backdrop-blur-sm shadow-md rounded p-6 text-center\"\r\n        >\r\n          <h3 class=\"text-lg font-semibold mb-2 text-white\">League Type</h3>\r\n          <p\r\n            *ngIf=\"leagueData.typeOfLeague === 0\"\r\n            class=\"font-bold text-gray-300\"\r\n          >\r\n            Single\r\n          </p>\r\n          <p\r\n            *ngIf=\"leagueData.typeOfLeague === 1\"\r\n            class=\"font-bold text-gray-300\"\r\n          >\r\n            Multi\r\n          </p>\r\n          <p\r\n            *ngIf=\"leagueData.typeOfLeague === 2\"\r\n            class=\"font-bold text-gray-300\"\r\n          >\r\n            Groups\r\n          </p>\r\n        </div>\r\n        <div\r\n          class=\"bg-black bg-opacity-50 backdrop-blur-sm shadow-md rounded p-6 text-center\"\r\n        >\r\n          <h3 class=\"text-lg font-semibold mb-2 text-white\">Start Date</h3>\r\n          <p class=\"font-bold text-gray-300\">\r\n            {{ leagueData.createdOn | date : \"fullDate\" }}\r\n          </p>\r\n        </div>\r\n        <div\r\n          class=\"bg-black bg-opacity-50 backdrop-blur-sm shadow-md rounded p-6 text-center\"\r\n        >\r\n          <h3 class=\"text-lg font-semibold mb-2 text-white\">League Name</h3>\r\n          <p class=\"font-bold text-gray-300\">{{ leagueData.name }}</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8 container mx-auto\">\r\n        <div\r\n          class=\"bg-black bg-opacity-50 backdrop-blur-sm shadow-md rounded p-6 text-center\"\r\n        >\r\n          <h3 class=\"text-lg font-semibold mb-2 text-white\">\r\n            Remaining Matches\r\n          </h3>\r\n          <p class=\"text-3xl font-bold text-red-500\">{{ totalMatchesLeft }}</p>\r\n        </div>\r\n        <div\r\n          class=\"bg-black bg-opacity-50 backdrop-blur-sm shadow-md rounded p-6 text-center\"\r\n        >\r\n          <h3 class=\"text-lg font-semibold mb-2 text-white\">Total Matches</h3>\r\n          <p class=\"text-3xl font-bold text-green-500\">{{ totalMatches }}</p>\r\n        </div>\r\n        <div\r\n          class=\"bg-black bg-opacity-50 backdrop-blur-sm shadow-md rounded p-6 text-center\"\r\n        >\r\n          <h3 class=\"text-lg font-semibold mb-2 text-white\">Total Players</h3>\r\n          <p class=\"text-3xl font-bold text-blue-500\">{{ totalPlayers }}</p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- كل البطولات -->\r\n    <div class=\"text-center\">\r\n      <h2\r\n        class=\"mb-4 text-4xl font-extrabold leading-none tracking-tight md:text-4xl lg:text-4xl text-white\"\r\n      >\r\n        All Leagues\r\n      </h2>\r\n\r\n      <div class=\"max-h-[350px] overflow-x-auto\">\r\n        <table class=\"min-w-full divide-y-2 divide-gray-600\">\r\n          <thead class=\"sticky top-0 bg-black bg-opacity-50 backdrop-blur-sm\">\r\n            <tr class=\"*:font-medium *:text-white\">\r\n              <th class=\"px-3 py-2 whitespace-nowrap\">League Name</th>\r\n              <th class=\"px-3 py-2 whitespace-nowrap\">League Status</th>\r\n              <th class=\"px-3 py-2 whitespace-nowrap\">League Type</th>\r\n              <th class=\"px-3 py-2 whitespace-nowrap\">League System</th>\r\n              <th class=\"px-3 py-2 whitespace-nowrap\">League Date</th>\r\n              <th class=\"px-3 py-2 whitespace-nowrap\">Winner</th>\r\n              <th class=\"px-3 py-2 whitespace-nowrap\">Delete</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody class=\"divide-y divide-gray-600\">\r\n            <tr\r\n              *ngFor=\"let league of leagues; let i = index\"\r\n              class=\"*:font-bold *:first:font-medium\"\r\n              [ngClass]=\"{\r\n                'bg-gray-900': i % 2 === 0,\r\n                'bg-gray-950': i % 2 !== 0\r\n              }\"\r\n            >\r\n              <td class=\"px-3 py-2 whitespace-nowrap text-white\">\r\n                {{ league.leagueName }}\r\n              </td>\r\n              <td\r\n                class=\"px-3 py-2 whitespace-nowrap\"\r\n                [class.text-green-500]=\"!league.isFinished\"\r\n                [class.text-red-500]=\"league.isFinished\"\r\n              >\r\n                {{ !league.isFinished ? \"Live Now!!\" : \"Finished\" }}\r\n              </td>\r\n\r\n              <td class=\"px-3 py-2 whitespace-nowrap text-white\">\r\n                {{\r\n                  league.leagueType === 0\r\n                    ? \"Single\"\r\n                    : league.leagueType === 1\r\n                    ? \"Multi\"\r\n                    : league.leagueType === 2\r\n                    ? \"Groups\"\r\n                    : \"Unknown\"\r\n                }}\r\n              </td>\r\n              <td class=\"px-3 py-2 whitespace-nowrap text-white\">\r\n                {{\r\n                  league.systemOfLeague === 0\r\n                    ? \"Points\"\r\n                    : league.systemOfLeague === 1\r\n                    ? \"Classic\"\r\n                    : \"Unknown\"\r\n                }}\r\n              </td>\r\n              <td class=\"px-3 py-2 whitespace-nowrap text-white\">\r\n                {{ league.createdOn | date : \"yyyy/MM/dd\" }}\r\n              </td>\r\n              <td class=\"px-3 py-2 whitespace-nowrap text-white\">\r\n                {{\r\n                  league.players && league.players.length > 0\r\n                    ? league.players[0].fullName\r\n                    : \"No Winner Yet\"\r\n                }}\r\n              </td>\r\n              <td class=\"px-3 py-2 whitespace-nowrap\">\r\n                <button\r\n                  (click)=\"openDeleteLeagueModal(league.leagueId)\"\r\n                  class=\"bg-red-600 text-white px-3 py-2 rounded hover:bg-red-700 transition\"\r\n                >\r\n                  Delete League\r\n                </button>\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Delete League Modal -->\r\n  <div\r\n    *ngIf=\"showDeleteLeagueModal\"\r\n    class=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\"\r\n  >\r\n    <div\r\n      class=\"bg-black bg-opacity-50 backdrop-blur-sm p-6 rounded-lg shadow-lg w-96\"\r\n    >\r\n      <h2 class=\"text-xl font-bold text-white mb-4\">Confirm Delete</h2>\r\n      <p class=\"text-gray-300 mb-6\">\r\n        Are you sure you want to delete league \"{{\r\n          selectedLeagueToDelete?.leagueName\r\n        }}\"?\r\n      </p>\r\n      <div class=\"flex justify-end space-x-4\">\r\n        <button\r\n          (click)=\"closeDeleteLeagueModal()\"\r\n          class=\"bg-gray-600 text-white px-4 py-2 rounded hover:bg-gray-700 transition\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          (click)=\"deleteConfirmedLeague()\"\r\n          class=\"bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700 transition\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Delete Confirmation Modal -->\r\n  <div\r\n    *ngIf=\"showDeleteModal\"\r\n    class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50\"\r\n  >\r\n    <div class=\"bg-black bg-opacity-50 backdrop-blur-sm p-6 rounded-lg\">\r\n      <h2 class=\"text-lg font-bold mb-4 text-white\">Confirm Delete</h2>\r\n      <p class=\"text-gray-300\">\r\n        Are you sure you want to delete\r\n        <strong>{{ selectedPlayerToDelete?.fullName }}</strong\r\n        >?\r\n      </p>\r\n      <div class=\"mt-4 flex justify-end\">\r\n        <button\r\n          class=\"bg-gray-600 px-4 py-2 text-white rounded mr-2 hover:bg-gray-700 transition\"\r\n          (click)=\"showDeleteModal = false\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          class=\"bg-red-600 px-4 py-2 text-white rounded hover:bg-red-700 transition\"\r\n          (click)=\"deleteConfirmedPlayer()\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Add Player Modal -->\r\n  <div\r\n    *ngIf=\"showModal\"\r\n    class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50\"\r\n  >\r\n    <div class=\"bg-black bg-opacity-50 backdrop-blur-sm p-6 rounded-lg\">\r\n      <h2 class=\"text-lg font-bold mb-4 text-white\">Add New Player</h2>\r\n      <input\r\n        type=\"text\"\r\n        [(ngModel)]=\"newPlayerName\"\r\n        class=\"border border-gray-600 p-2 w-full bg-gray-800 text-white rounded placeholder-gray-400\"\r\n        placeholder=\"Enter player name\"\r\n      />\r\n      <div class=\"mt-4 flex justify-end\">\r\n        <button\r\n          class=\"bg-red-600 px-4 py-2 text-white rounded mr-2 hover:bg-red-700 transition\"\r\n          (click)=\"closeModal()\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          class=\"bg-green-600 px-4 py-2 text-white rounded hover:bg-green-700 transition\"\r\n          (click)=\"addPlayer()\"\r\n        >\r\n          Add\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Start League Modal -->\r\n  <div\r\n    *ngIf=\"showStartLeagueModal\"\r\n    class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50\"\r\n  >\r\n    <div class=\"bg-black bg-opacity-50 backdrop-blur-sm p-6 rounded-lg w-96\">\r\n      <h2 class=\"text-lg font-bold mb-4 text-white\">Start New League</h2>\r\n      <div class=\"mb-4\">\r\n        <label class=\"block text-sm font-medium mb-1 text-gray-300\"\r\n          >League Name</label\r\n        >\r\n        <input\r\n          type=\"text\"\r\n          [(ngModel)]=\"newLeague.name\"\r\n          class=\"border border-gray-600 p-2 w-full rounded bg-gray-800 text-white placeholder-gray-400\"\r\n          placeholder=\"Enter league name\"\r\n        />\r\n      </div>\r\n      <div class=\"mb-4\">\r\n        <label class=\"block text-sm font-medium mb-1 text-gray-300\"\r\n          >League Description</label\r\n        >\r\n        <textarea\r\n          [(ngModel)]=\"newLeague.description\"\r\n          class=\"border border-gray-600 p-2 w-full rounded bg-gray-800 text-white placeholder-gray-400\"\r\n          placeholder=\"Enter league description\"\r\n          rows=\"3\"\r\n        ></textarea>\r\n      </div>\r\n      <div class=\"mb-4\">\r\n        <label class=\"block text-sm font-medium mb-1 text-gray-300\"\r\n          >League Type</label\r\n        >\r\n        <select\r\n          [(ngModel)]=\"newLeague.typeOfLeague\"\r\n          class=\"border border-gray-600 p-2 w-full rounded bg-gray-800 text-white\"\r\n        >\r\n          <option [ngValue]=\"0\">Single</option>\r\n          <option [ngValue]=\"1\">Multi</option>\r\n          <option [ngValue]=\"2\">Groups</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"mb-4\">\r\n        <label class=\"block text-sm font-medium mb-1 text-gray-300\"\r\n          >System Of League</label\r\n        >\r\n        <select\r\n          [(ngModel)]=\"newLeague.systemOfLeague\"\r\n          class=\"border border-gray-600 p-2 w-full rounded bg-gray-800 text-white\"\r\n        >\r\n          <option [ngValue]=\"0\">Points</option>\r\n          <option [ngValue]=\"1\">Classic</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"mt-4 flex justify-end\">\r\n        <button\r\n          class=\"bg-gray-600 px-4 py-2 text-white rounded mr-2 hover:bg-gray-700 transition\"\r\n          (click)=\"closeStartLeagueModal()\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          class=\"bg-green-600 px-4 py-2 text-white rounded hover:bg-green-700 transition\"\r\n          (click)=\"startLeague()\"\r\n        >\r\n          Start League\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- End League Confirmation Modal -->\r\n  <div\r\n    *ngIf=\"showEndLeagueModal\"\r\n    class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50\"\r\n  >\r\n    <div class=\"bg-black bg-opacity-50 backdrop-blur-sm p-6 rounded-lg\">\r\n      <h2 class=\"text-lg font-bold mb-4 text-white\">Confirm End League</h2>\r\n      <p class=\"text-gray-300\">\r\n        Are you sure you want to end the current league? This action cannot be\r\n        undone.\r\n      </p>\r\n      <div class=\"mt-4 flex justify-end\">\r\n        <button\r\n          class=\"bg-gray-600 px-4 py-2 text-white rounded mr-2 hover:bg-gray-700 transition\"\r\n          (click)=\"showEndLeagueModal = false\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          class=\"bg-red-600 px-4 py-2 text-white rounded hover:bg-red-700 transition\"\r\n          (click)=\"resetTournament(leagueData!.id)\"\r\n        >\r\n          Confirm End\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Notes Modal -->\r\n  <div\r\n    class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-75 z-50\"\r\n    *ngIf=\"showNoteModal\"\r\n  >\r\n    <div class=\"bg-black bg-opacity-50 backdrop-blur-sm p-4 rounded-lg\">\r\n      <div>\r\n        <h2 class=\"font-bold text-white text-center\">Add New Note</h2>\r\n        <div>\r\n          <label for=\"Notes\">\r\n            <span class=\"text-sm font-medium text-gray-300\">Notes</span>\r\n            <div class=\"relative m-2 overflow-hidden rounded border-gray-600\">\r\n              <textarea\r\n                id=\"Notes\"\r\n                class=\"w-full resize-none p-3 border border-gray-600 bg-gray-800 text-white placeholder-gray-400\"\r\n                rows=\"4\"\r\n                [(ngModel)]=\"newNote\"\r\n              ></textarea>\r\n              <div class=\"flex items-center justify-end gap-2 p-1.5\">\r\n                <button\r\n                  type=\"button\"\r\n                  class=\"rounded p-2 font-bold text-white bg-green-600 hover:bg-green-700 transition\"\r\n                  (click)=\"sendNote()\"\r\n                >\r\n                  Save\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </label>\r\n        </div>\r\n      </div>\r\n      <div class=\"p-6\">\r\n        <div *ngFor=\"let note of notes\">\r\n          <div\r\n            class=\"mt-4 flex items-center justify-end\"\r\n            *ngIf=\"note.isDeleted == false\"\r\n          >\r\n            <p class=\"font-bold px-3 text-white\">\r\n              {{ note.content }}\r\n            </p>\r\n            <button\r\n              class=\"bg-red-600 px-4 py-2 text-white rounded mr-2 hover:bg-red-700 transition\"\r\n              (click)=\"toggleDeleteNote(note.id)\"\r\n            >\r\n              Delete\r\n            </button>\r\n            <button\r\n              class=\"bg-green-600 px-4 py-2 text-white rounded hover:bg-green-700 transition\"\r\n              (click)=\"toggleHideNote(note)\"\r\n              *ngIf=\"note.isHidden == true\"\r\n            >\r\n              Show\r\n            </button>\r\n            <button\r\n              class=\"bg-purple-600 px-4 py-2 text-white rounded hover:bg-purple-700 transition\"\r\n              (click)=\"toggleHideNote(note)\"\r\n              *ngIf=\"note.isHidden == false\"\r\n            >\r\n              Hide\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button\r\n        class=\"bg-gray-600 px-4 py-2 text-white rounded hover:bg-gray-700 transition\"\r\n        (click)=\"closeNoteModal()\"\r\n      >\r\n        Cancel\r\n      </button>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { MatchService } from 'src/app/core/services/match.service';\r\nimport { PlayerService } from './../../core/services/player.service';\r\nimport { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport {\r\n  Player,\r\n  Match,\r\n  StartLeagueDto,\r\n  League,\r\n  AllLeagueRank,\r\n  Note,\r\n  TournamentStage,\r\n  LeagueType,\r\n} from 'src/app/models/interfaces';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { LeagueService } from 'src/app/core/services/league.service';\r\nimport { MessageService } from 'src/app/core/services/message.service';\r\nimport { NoteService } from 'src/app/core/services/note.service';\r\n// ✅ تم حذف AdminBackgroundService - مالوش لازمة\r\nimport {\r\n  AdminDashboardService,\r\n  AdminDashboardData,\r\n} from 'src/app/core/services/admin-dashboard.service';\r\nimport { Subscription, interval } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-players',\r\n  templateUrl: './players.component.html',\r\n  styleUrls: ['./players.component.css'],\r\n})\r\nexport class PlayersComponent implements OnInit, OnDestroy {\r\n  players: Player[] = [];\r\n  private playerOrder: number[] = []; // حفظ ترتيب اللاعبين الحالي\r\n  selectedPlayer: Player | null = null;\r\n  playerMatches: Match[] = [];\r\n  displayMatches: Match[] = [];\r\n  notes: Note[] = [];\r\n  showModal = false;\r\n  newPlayerName = '';\r\n  isSidebarOpen = false;\r\n  showDeleteModal = false;\r\n  showNoteModal = false;\r\n  showDeleteLeagueModal = false;\r\n  showEndLeagueModal = false;\r\n  loadingMatches: { [matchId: number]: boolean } = {};\r\n  private requestQueue: Array<() => Promise<void>> = [];\r\n  private isProcessingQueue = false;\r\n  showResetModal: boolean = false;\r\n  leagueData: League | null = null;\r\n  showStartLeagueModal: boolean = false;\r\n  newLeague: StartLeagueDto = {\r\n    name: '',\r\n    description: '',\r\n    typeOfLeague: 0,\r\n    systemOfLeague: 0,\r\n  };\r\n  totalMessagesLeft: number = 0;\r\n  totalPlayers: number = 0;\r\n  totalMatches: number = 0;\r\n  totalMatchesLeft: number = 0;\r\n  totalMessages: number = 0;\r\n  leagues: AllLeagueRank[] = [];\r\n  newNote: string = '';\r\n  selectedLeagueToDelete: AllLeagueRank | null = null;\r\n  // ✅ تم حذف updateStatusSubscription - مالوش لازمة\r\n\r\n  // New properties for tournament stage management\r\n  currentMatches: Match[] = [];\r\n  showTournamentStageButton = false;\r\n  tournamentStageButtonText = '';\r\n  tournamentStageButtonAction: (() => void) | null = null;\r\n\r\n  constructor(\r\n    private playerService: PlayerService,\r\n    private matchService: MatchService,\r\n    private toastr: ToastrService,\r\n    private leagueService: LeagueService,\r\n    private messageService: MessageService,\r\n    private noteService: NoteService,\r\n    // ✅ تم حذف adminBackgroundService\r\n    private adminDashboardService: AdminDashboardService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // تحميل البيانات الأساسية مع Smart Caching\r\n    this.loadEssentialData();\r\n    this.subscribeToUpdates();\r\n    // ✅ تم إلغاء Background refresh تماماً - مالوش لازمة\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // ✅ لا توجد subscriptions للإلغاء - تم حذف AdminBackgroundService\r\n  }\r\n\r\n  private loadCurrentLeagueFromServer(): void {\r\n    this.leagueService.getAdminCurrentLeague().subscribe({\r\n      next: (data) => {\r\n        this.leagueData = data.league;\r\n        this.updateTournamentStageButton(); // Update button state when league data changes\r\n      },\r\n      error: (err) => {\r\n        console.error('❌ Failed to load current league:', err);\r\n        this.leagueData = null;\r\n        this.updateTournamentStageButton(); // Update button state when league data changes\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * 🚀 Cache First Strategy - عرض فوري للبيانات من الكاش\r\n   * تحميل ALL البيانات بدون انتظار أو spinner\r\n   */\r\n  private loadEssentialData(): void {\r\n    this.adminDashboardService.getEssentialData().subscribe({\r\n      next: (data: AdminDashboardData) => {\r\n        // ✅ عرض جميع البيانات فوراً من الكاش\r\n        this.players = data.players;\r\n        this.currentMatches = data.matches;\r\n        this.leagueData = data.currentLeague;\r\n        this.leagues = data.allLeagues;\r\n        this.notes = data.notes;\r\n\r\n        // ✅ عرض إحصائيات كاملة بما فيها عدد الرسائل\r\n        this.totalPlayers = data.stats.totalPlayers;\r\n        this.totalMatches = data.stats.totalMatches;\r\n        this.totalMatchesLeft = data.stats.totalMatchesLeft;\r\n        this.totalMessagesLeft = data.stats.totalMessagesLeft;\r\n\r\n        // Update tournament stage button\r\n        this.updateTournamentStageButton();\r\n\r\n        console.log('🚀 ALL data loaded instantly from cache:', {\r\n          players: data.players.length,\r\n          matches: data.matches.length,\r\n          leagues: data.allLeagues.length,\r\n          notes: data.notes.length,\r\n          messages: data.messages.length,\r\n          messagesUnread: data.stats.totalMessagesLeft,\r\n        });\r\n      },\r\n      error: (err) => {\r\n        console.error('❌ Failed to load data:', err);\r\n        this.toastr.error('حدث خطأ أثناء تحميل البيانات');\r\n      },\r\n    });\r\n  }\r\n\r\n  private subscribeToUpdates(): void {\r\n    // ✅ تم حذف AdminBackgroundService subscriptions - مالهاش لازمة\r\n  }\r\n\r\n  // ✅ تم حذف Background refresh تماماً - مالوش لازمة أصلاً\r\n\r\n  /**\r\n   * ✅ لا حاجة للـ lazy loading - البيانات متاحة فوراً من الكاش\r\n   * تم استبدال هذه الـ methods بـ Cache First Strategy في loadEssentialData()\r\n   */\r\n\r\n  toggleSidebar(): void {\r\n    this.isSidebarOpen = !this.isSidebarOpen;\r\n    this.selectedPlayer = null;\r\n  }\r\n\r\n  selectPlayer(player: Player): void {\r\n    this.selectedPlayer = player;\r\n    this.loadMatches();\r\n  }\r\n\r\n  loadMatches(): void {\r\n    if (!this.selectedPlayer) return;\r\n    this.matchService.getAdminMatches().subscribe((matches) => {\r\n      // console.log(matches);\r\n\r\n      this.playerMatches = matches\r\n        .filter(\r\n          (m) =>\r\n            m.player1Id === this.selectedPlayer!.playerId ||\r\n            m.player2Id === this.selectedPlayer!.playerId\r\n        )\r\n        .sort((a, b) => {\r\n          const nameA =\r\n            (a.player1Id === this.selectedPlayer!.playerId\r\n              ? a.player2Name\r\n              : a.player1Name\r\n            )?.toLowerCase() ?? '';\r\n          const nameB =\r\n            (b.player1Id === this.selectedPlayer!.playerId\r\n              ? b.player2Name\r\n              : b.player1Name\r\n            )?.toLowerCase() ?? '';\r\n          return nameA.localeCompare(nameB);\r\n        });\r\n      this.displayMatches = this.playerMatches.map((match) => {\r\n        if (match.player2Id === this.selectedPlayer!.playerId) {\r\n          return {\r\n            ...match,\r\n            player1Name: match.player2Name,\r\n            player2Name: match.player1Name,\r\n            score1: match.score2,\r\n            score2: match.score1,\r\n            player1Id: match.player2Id,\r\n            player2Id: match.player1Id,\r\n          };\r\n        }\r\n        return { ...match };\r\n      });\r\n      this.playerMatches.forEach((match) => {\r\n        this.loadingMatches[match.matchId] = false;\r\n      });\r\n    });\r\n  }\r\n\r\n  private addToQueue(request: () => Promise<void>): void {\r\n    this.requestQueue.push(request);\r\n    this.processQueue();\r\n  }\r\n\r\n  private async processQueue(): Promise<void> {\r\n    if (this.isProcessingQueue || this.requestQueue.length === 0) return;\r\n\r\n    this.isProcessingQueue = true;\r\n    const request = this.requestQueue.shift();\r\n\r\n    if (request) {\r\n      try {\r\n        await request();\r\n      } catch (error) {\r\n        console.error('Error processing request:', error);\r\n      }\r\n    }\r\n\r\n    this.isProcessingQueue = false;\r\n    this.processQueue();\r\n  }\r\n\r\n  updateMatch(matchId: number, winnerId: number | null) {\r\n    this.loadingMatches[matchId] = true;\r\n\r\n    this.addToQueue(\r\n      () =>\r\n        new Promise<void>((resolve, reject) => {\r\n          this.matchService.updateMatch(matchId, winnerId).subscribe({\r\n            next: (response) => {\r\n              if (response.success) {\r\n                this.toastr.success(response.message);\r\n                // Invalidate cache and reload essential data\r\n                this.adminDashboardService.invalidateCache('essential');\r\n                this.loadEssentialData();\r\n                this.loadMatches();\r\n              } else {\r\n                this.toastr.error(response.message);\r\n              }\r\n              this.loadingMatches[matchId] = false;\r\n              resolve();\r\n            },\r\n            error: (error) => {\r\n              this.toastr.error(error.error.message);\r\n              this.loadingMatches[matchId] = false;\r\n              reject(error);\r\n            },\r\n          });\r\n        })\r\n    );\r\n  }\r\n\r\n  resetMatch(matchId: number) {\r\n    this.loadingMatches[matchId] = true;\r\n\r\n    this.addToQueue(\r\n      () =>\r\n        new Promise<void>((resolve, reject) => {\r\n          this.matchService.resetMatch(matchId).subscribe({\r\n            next: (response) => {\r\n              if (response.success) {\r\n                this.toastr.success(response.message);\r\n                this.loadMatches();\r\n              } else {\r\n                this.toastr.error(response.message, 'Error');\r\n              }\r\n              this.loadingMatches[matchId] = false;\r\n              resolve();\r\n            },\r\n            error: (error) => {\r\n              this.toastr.error(error.error.message);\r\n              this.loadingMatches[matchId] = false;\r\n              reject(error);\r\n            },\r\n          });\r\n        })\r\n    );\r\n  }\r\n\r\n  deletePlayer(playerId: number, event: Event): void {\r\n    event.stopPropagation();\r\n    this.playerService.deletePlayer(playerId).subscribe(() => {\r\n      this.toastr.warning('Player deleted!', 'Deleted');\r\n      this.loadMatches();\r\n      // Invalidate cache and reload essential data\r\n      this.adminDashboardService.invalidateCache('essential');\r\n      this.loadEssentialData();\r\n      this.updateTournamentStageButton(); // Update button state after deleting player\r\n      if (this.selectedPlayer?.playerId === playerId) {\r\n        this.selectedPlayer = null;\r\n        this.playerMatches = [];\r\n        this.displayMatches = [];\r\n      }\r\n    });\r\n  }\r\n\r\n  openModal(): void {\r\n    this.showModal = true;\r\n  }\r\n\r\n  closeModal(): void {\r\n    this.showModal = false;\r\n    this.newPlayerName = '';\r\n  }\r\n\r\n  addPlayer(): void {\r\n    if (!this.newPlayerName.trim()) return;\r\n    this.playerService.addPlayer(this.newPlayerName).subscribe((response) => {\r\n      if (response.success) {\r\n        this.toastr.success(response.message);\r\n        // Invalidate cache and reload essential data\r\n        this.adminDashboardService.invalidateCache('essential');\r\n        this.loadEssentialData();\r\n        this.loadMatches();\r\n        this.closeModal();\r\n      } else this.toastr.warning(response.message);\r\n    });\r\n  }\r\n\r\n  selectedPlayerToDelete: { playerId: number; fullName: string } | null = null;\r\n\r\n  confirmDelete(player: { playerId: number; fullName: string }, event: Event) {\r\n    event.stopPropagation();\r\n    this.selectedPlayerToDelete = player;\r\n    this.showDeleteModal = true;\r\n  }\r\n\r\n  deleteConfirmedPlayer() {\r\n    if (this.selectedPlayerToDelete) {\r\n      this.playerService\r\n        .deletePlayer(this.selectedPlayerToDelete.playerId)\r\n        .subscribe((response) => {\r\n          if (response.success) {\r\n            this.toastr.success(response.message);\r\n            // Invalidate cache and reload essential data\r\n            this.adminDashboardService.invalidateCache('essential');\r\n            this.loadEssentialData();\r\n            this.loadMatches();\r\n          } else {\r\n            this.toastr.error(response.message, 'Error');\r\n          }\r\n        });\r\n\r\n      this.showDeleteModal = false;\r\n      this.selectedPlayerToDelete = null;\r\n    }\r\n  }\r\n\r\n  // ✅ تم حذف getPlayers() - محلها loadEssentialData()\r\n  // ✅ تم حذف getMatches() - محلها loadEssentialData()\r\n\r\n  resetTournament(id: number): void {\r\n    this.leagueService.resetLeague(id).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.toastr.success(response.message);\r\n          this.showResetModal = false;\r\n          this.loadMatches();\r\n          // Invalidate cache and reload essential data\r\n          this.adminDashboardService.invalidateCache('essential');\r\n          this.loadEssentialData();\r\n          this.showEndLeagueModal = false;\r\n        } else {\r\n          this.toastr.error(response.message);\r\n        }\r\n      },\r\n\r\n      error: (err) => {\r\n        this.toastr.error(err.error.message);\r\n        // console.error(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  openStartLeagueModal(): void {\r\n    this.showStartLeagueModal = true;\r\n    this.newLeague = {\r\n      name: '',\r\n      description: '',\r\n      typeOfLeague: 0,\r\n      systemOfLeague: 0,\r\n    };\r\n  }\r\n\r\n  closeStartLeagueModal(): void {\r\n    this.showStartLeagueModal = false;\r\n  }\r\n\r\n  startLeague(): void {\r\n    if (!this.newLeague.name.trim()) {\r\n      this.toastr.error('League name is required', 'Error');\r\n      return;\r\n    }\r\n\r\n    this.leagueService.startLeague(this.newLeague).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.toastr.success(response.message);\r\n          this.closeStartLeagueModal();\r\n          this.loadMatches();\r\n          // Invalidate cache and reload essential data\r\n          this.adminDashboardService.invalidateCache('essential');\r\n          this.loadEssentialData();\r\n        } else {\r\n          this.toastr.error(response.message, 'Error');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.error.message);\r\n        // console.error(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  // ✅ تم حذف getMessages() - محلها loadEssentialData()\r\n\r\n  // ✅ تم حذف GetAllLeagyes() - محلها loadEssentialData()\r\n\r\n  DeleteLeague(id: number): void {\r\n    this.leagueService.DeleteLeague(id).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.toastr.success(response.message);\r\n          this.showDeleteLeagueModal = false;\r\n        } else {\r\n          this.toastr.error(response.message);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.error.message);\r\n      },\r\n    });\r\n  }\r\n\r\n  openDeleteLeagueModal(leagueId: number): void {\r\n    this.selectedLeagueToDelete =\r\n      this.leagues.find((l) => l.leagueId === leagueId) || null;\r\n    this.showDeleteLeagueModal = true;\r\n  }\r\n\r\n  closeDeleteLeagueModal(): void {\r\n    this.showDeleteLeagueModal = false;\r\n    this.selectedLeagueToDelete = null;\r\n  }\r\n\r\n  deleteConfirmedLeague(): void {\r\n    if (this.selectedLeagueToDelete) {\r\n      this.DeleteLeague(this.selectedLeagueToDelete.leagueId);\r\n      this.leagues = this.leagues.filter(\r\n        (l) => l.leagueId !== this.selectedLeagueToDelete?.leagueId\r\n      );\r\n      this.closeDeleteLeagueModal();\r\n    }\r\n  }\r\n\r\n  sendNote(): void {\r\n    if (!this.newNote.trim()) return;\r\n\r\n    this.noteService.sendNote(this.newNote).subscribe({\r\n      next: (res) => {\r\n        this.toastr.success(res.message);\r\n        this.newNote = '';\r\n        // Invalidate cache and reload all data\r\n        this.adminDashboardService.invalidateCache('essential');\r\n        this.loadEssentialData();\r\n      },\r\n      error: () => this.toastr.error('حصل مشكلة وانت بتبعت الملاحظة'),\r\n    });\r\n  }\r\n\r\n  toggleHideNote(note: any): void {\r\n    this.noteService.toggleMarHide(note.id, !note.isHidden).subscribe({\r\n      next: (res) => {\r\n        this.toastr.success(res.message);\r\n        this.loadEssentialData(); // ✅ محل getNotes()\r\n      },\r\n      error: () => this.toastr.error('حصل مشكلة وانت بتغير الظهور'),\r\n    });\r\n  }\r\n\r\n  toggleDeleteNote(noteId: number): void {\r\n    this.noteService.DeleteNote(noteId, false).subscribe({\r\n      next: (res) => {\r\n        this.toastr.warning(res.message);\r\n        this.loadEssentialData(); // ✅ محل getNotes()\r\n      },\r\n      error: () => this.toastr.error('حصل مشكلة وانت بتحذف '),\r\n    });\r\n  }\r\n\r\n  // ✅ تم حذف getNotes() - محلها loadEssentialData()\r\n\r\n  // تم استبدال هذه الـ methods بـ Smart Caching في AdminDashboardService\r\n  // للحفاظ على التوافق مع باقي الكود، إذا تم استدعاؤها ستستخدم الـ cache\r\n\r\n  openNoteModal(): void {\r\n    this.showNoteModal = true;\r\n    // ✅ Notes are already loaded from cache - no need to fetch\r\n  }\r\n  closeNoteModal(): void {\r\n    this.showNoteModal = false;\r\n  }\r\n\r\n  // New method to load current matches for tournament stage logic\r\n  private loadCurrentMatches(): void {\r\n    this.matchService.getAdminMatches().subscribe({\r\n      next: (matches) => {\r\n        this.currentMatches = matches;\r\n        this.updateTournamentStageButton();\r\n      },\r\n      error: (err) => {\r\n        console.error('Error loading current matches:', err);\r\n        this.currentMatches = [];\r\n        this.updateTournamentStageButton(); // Update button state even on error\r\n      },\r\n    });\r\n  }\r\n\r\n  // Method to determine tournament stage and update button\r\n  private updateTournamentStageButton(): void {\r\n    // Only show button for Groups type leagues\r\n    if (\r\n      !this.leagueData ||\r\n      this.leagueData.typeOfLeague !== LeagueType.Groups\r\n    ) {\r\n      this.showTournamentStageButton = false;\r\n      return;\r\n    }\r\n\r\n    console.log('Current matches:', this.currentMatches);\r\n    // console.log('Total players:', this.totalPlayers);\r\n    // console.log('League data:', this.leagueData);\r\n\r\n    // Check if there are players but no matches (need to start group stage)\r\n    if (this.totalPlayers > 0 && this.currentMatches.length === 0) {\r\n      this.showTournamentStageButton = true;\r\n      this.tournamentStageButtonText = 'Start Group Stage';\r\n      this.tournamentStageButtonAction = () => this.startGroupStage();\r\n      return;\r\n    }\r\n\r\n    // Check current stage based on matches\r\n    const groupMatches = this.currentMatches.filter(\r\n      (m) =>\r\n        m.stage === TournamentStage.GroupStage ||\r\n        m.tournamentStage === 'GroupStage'\r\n    );\r\n    const quarterMatches = this.currentMatches.filter(\r\n      (m) =>\r\n        m.stage === TournamentStage.QuarterFinals ||\r\n        m.tournamentStage === 'QuarterFinals'\r\n    );\r\n    const semiMatches = this.currentMatches.filter(\r\n      (m) =>\r\n        m.stage === TournamentStage.SemiFinals ||\r\n        m.tournamentStage === 'SemiFinals'\r\n    );\r\n    const finalMatches = this.currentMatches.filter(\r\n      (m) => m.stage === TournamentStage.Final || m.tournamentStage === 'Final'\r\n    );\r\n\r\n    // console.log('Filtered matches:');\r\n    // console.log('Group matches:', groupMatches);\r\n    // console.log('Quarter matches:', quarterMatches);\r\n    // console.log('Semi matches:', semiMatches);\r\n    // console.log('Final matches:', finalMatches);\r\n\r\n    // Check if all matches in a stage are completed\r\n    const allGroupMatchesCompleted =\r\n      groupMatches.length > 0 &&\r\n      groupMatches.every((match) => match.isCompleted);\r\n    const allQuarterMatchesCompleted =\r\n      quarterMatches.length > 0 &&\r\n      quarterMatches.every((match) => match.isCompleted);\r\n    const allSemiMatchesCompleted =\r\n      semiMatches.length > 0 && semiMatches.every((match) => match.isCompleted);\r\n\r\n    // Show quarter button when group stage is completed and no quarter matches exist\r\n    if (\r\n      groupMatches.length > 0 &&\r\n      allGroupMatchesCompleted &&\r\n      quarterMatches.length === 0\r\n    ) {\r\n      this.showTournamentStageButton = true;\r\n      this.tournamentStageButtonText = 'Start Quarter';\r\n      this.tournamentStageButtonAction = () => this.startQuarterStage();\r\n      return;\r\n    }\r\n\r\n    // Show semi button when quarter stage is completed and no semi matches exist\r\n    if (\r\n      quarterMatches.length > 0 &&\r\n      allQuarterMatchesCompleted &&\r\n      semiMatches.length === 0\r\n    ) {\r\n      this.showTournamentStageButton = true;\r\n      this.tournamentStageButtonText = 'Start Semi Final';\r\n      this.tournamentStageButtonAction = () => this.startSemiFinalStage();\r\n      return;\r\n    }\r\n\r\n    // Show final button when semi stage is completed and no final matches exist\r\n    if (\r\n      semiMatches.length > 0 &&\r\n      allSemiMatchesCompleted &&\r\n      finalMatches.length === 0\r\n    ) {\r\n      this.showTournamentStageButton = true;\r\n      this.tournamentStageButtonText = 'Start Final';\r\n      this.tournamentStageButtonAction = () => this.startFinalStage();\r\n      return;\r\n    }\r\n\r\n    if (finalMatches.length > 0) {\r\n      // Final stage is active, hide button\r\n      this.showTournamentStageButton = false;\r\n      return;\r\n    }\r\n\r\n    // Default: hide button\r\n    this.showTournamentStageButton = false;\r\n  }\r\n\r\n  // Tournament stage action methods\r\n  startGroupStage(): void {\r\n    if (!this.leagueData) return;\r\n\r\n    this.leagueService.createGroupsAndMatches(this.leagueData.id).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.toastr.success(response.message);\r\n          // Invalidate cache and reload essential data\r\n          this.adminDashboardService.invalidateCache('essential');\r\n          this.loadEssentialData();\r\n        } else {\r\n          this.toastr.error(response.message);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.error.message);\r\n      },\r\n    });\r\n  }\r\n\r\n  startQuarterStage(): void {\r\n    if (!this.leagueData) return;\r\n\r\n    this.leagueService.startKnockoutStage(this.leagueData.id).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.toastr.success(response.message);\r\n          // Invalidate cache and reload essential data\r\n          this.adminDashboardService.invalidateCache('essential');\r\n          this.loadEssentialData();\r\n        } else {\r\n          this.toastr.error(response.message);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.error.message);\r\n        // console.error(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  startSemiFinalStage(): void {\r\n    if (!this.leagueData) return;\r\n\r\n    this.leagueService.startSemiFinals(this.leagueData.id).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.toastr.success(response.message);\r\n          // Invalidate cache and reload essential data\r\n          this.adminDashboardService.invalidateCache('essential');\r\n          this.loadEssentialData();\r\n        } else {\r\n          this.toastr.error(response.message);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.error.message);\r\n        // console.error(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  startFinalStage(): void {\r\n    if (!this.leagueData) return;\r\n\r\n    this.leagueService.startFinal(this.leagueData.id).subscribe({\r\n      next: (response) => {\r\n        if (response.success) {\r\n          this.toastr.success(response.message);\r\n          // Invalidate cache and reload essential data\r\n          this.adminDashboardService.invalidateCache('essential');\r\n          this.loadEssentialData();\r\n        } else {\r\n          this.toastr.error(response.message);\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.error.message);\r\n        // console.error(err);\r\n      },\r\n    });\r\n  }\r\n\r\n  // Method to handle tournament stage button click\r\n  onTournamentStageButtonClick(): void {\r\n    if (this.tournamentStageButtonAction) {\r\n      this.tournamentStageButtonAction();\r\n    }\r\n  }\r\n}\r\n","<div\r\n  class=\"container mx-auto p-4 flex flex-col sm:flex-row overflow-hidden h-screen\"\r\n>\r\n  <!-- Chats List -->\r\n  <div\r\n    class=\"w-full sm:w-1/3 border-r border-gray-600 sm:block\"\r\n    [ngClass]=\"{ hidden: selectedChat }\"\r\n  >\r\n    <div class=\"flex items-center justify-between mb-6\">\r\n      <h2 class=\"text-2xl font-bold text-white\">📥 Inbox</h2>\r\n    </div>\r\n\r\n    <!-- No Chats -->\r\n    <div *ngIf=\"playerChats.length === 0\" class=\"text-center text-gray-300\">\r\n      No messages here 📭\r\n    </div>\r\n\r\n    <!-- Chats List -->\r\n    <div\r\n      *ngIf=\"playerChats.length > 0\"\r\n      class=\"space-y-2 overflow-y-auto max-h-[calc(100vh-120px)]\"\r\n    >\r\n      <div\r\n        *ngFor=\"let chat of playerChats; trackBy: trackByPlayerId\"\r\n        class=\"p-4 backdrop-blur-sm border border-gray-600 rounded-lg hover:bg-gray-700 cursor-pointer flex items-center justify-between\"\r\n        (click)=\"openChat(chat.senderId)\"\r\n      >\r\n        <div>\r\n          <p class=\"font-bold text-white\">{{ chat.senderFullName }}</p>\r\n          <p class=\"text-sm text-gray-300 truncate\">{{ chat.lastMessage }}</p>\r\n        </div>\r\n        <span\r\n          *ngIf=\"chat.unreadCount > 0\"\r\n          class=\"bg-green-600 text-white text-xs font-bold rounded-full px-2 py-1\"\r\n        >\r\n          {{ chat.unreadCount }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Chat View -->\r\n  <div\r\n    class=\"w-full sm:w-2/3 flex flex-col h-full relative\"\r\n    [ngClass]=\"{ block: selectedChat, 'hidden sm:flex': !selectedChat }\"\r\n  >\r\n    <div *ngIf=\"selectedChat; else noChatSelected\" class=\"flex flex-col h-full\">\r\n      <!-- Chat Header - Fixed -->\r\n      <div\r\n        class=\"fixed left-0 right-0 z-40 p-2 backdrop-blur-sm border-b border-gray-600 flex items-center justify-between bg-black bg-opacity-90\"\r\n        [ngClass]=\"{ 'sm:left-1/3': selectedChat }\"\r\n        [style.top.px]=\"navbarHeight\"\r\n      >\r\n        <div class=\"flex items-center\">\r\n          <button\r\n            (click)=\"closeChat()\"\r\n            class=\"mr-4 text-gray-300 hover:text-white transition\"\r\n          >\r\n            <i class=\"fa-solid fa-arrow-left\" style=\"color: #ffffff\"></i>\r\n          </button>\r\n          <div>\r\n            <p class=\"font-bold text-white text-sm p-0\">\r\n              {{ selectedChat.senderFullName }}\r\n            </p>\r\n            <p class=\"text-xs text-gray-400 p-0\">\r\n              {{ selectedChat.senderPhoneNumber }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Messages - Scrollable Area with padding for fixed header and footer -->\r\n      <div\r\n        #messagesContainer\r\n        class=\"flex-1 p-4 overflow-y-auto backdrop-blur-sm\"\r\n        [style.margin-top.px]=\"navbarHeight + 80\"\r\n        style=\"margin-bottom: 80px\"\r\n      >\r\n        <div\r\n          *ngFor=\"\r\n            let message of selectedChat.messages;\r\n            trackBy: trackByMessageId\r\n          \"\r\n          class=\"mb-4\"\r\n          [ngClass]=\"{\r\n            'text-right': !message.isFromAdmin,\r\n            'text-left': message.isFromAdmin\r\n          }\"\r\n        >\r\n          <div\r\n            class=\"inline-block p-3 rounded-lg max-w-xs\"\r\n            [ngClass]=\"{\r\n              'bg-green-700': !message.isFromAdmin,\r\n              'bg-gray-700 ': message.isFromAdmin\r\n            }\"\r\n          >\r\n            <p class=\"text-white\">{{ message.content }}</p>\r\n            <p class=\"text-xs mt-1 text-gray-300\">\r\n              {{ message.sentAt | date : \"MMM d, y, hh:mm a\" }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Reply Input - Fixed -->\r\n      <div\r\n        class=\"fixed bottom-0 left-0 right-0 z-50 p-4 bg-black bg-opacity-90 backdrop-blur-sm border-t border-gray-600\"\r\n        [ngClass]=\"{ 'sm:left-1/3': selectedChat }\"\r\n      >\r\n        <form (ngSubmit)=\"sendReply()\" class=\"flex items-center gap-2\">\r\n          <input\r\n            type=\"text\"\r\n            [(ngModel)]=\"replyMessages[selectedChat.messages[0].id]\"\r\n            [ngModelOptions]=\"{ standalone: true }\"\r\n            (ngModelChange)=\"\r\n              replyMessages[selectedChat.messages[0].id] = $event\r\n            \"\r\n            placeholder=\"Write your reply...\"\r\n            class=\"flex-1 p-2 border border-gray-600 rounded-lg bg-gray-800 text-white focus:outline-none focus:ring-2 focus:ring-blue-600 placeholder-gray-400\"\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            class=\"bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 transition disabled:bg-gray-600\"\r\n            [disabled]=\"!replyMessages[selectedChat.messages[0].id]\"\r\n          >\r\n            Reply\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Placeholder when no chat is selected -->\r\n    <ng-template #noChatSelected>\r\n      <div class=\"w-full flex items-center justify-center text-gray-300\">\r\n        Select a chat to view messages 📩\r\n      </div>\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PlayersComponent } from './players/players.component';\r\nimport { InboxComponent } from './inbox/inbox.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: PlayersComponent },\r\n  { path: 'players', component: PlayersComponent },\r\n  { path: 'inbox', component: InboxComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AdminRoutingModule {}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  ElementRef,\r\n  AfterViewChecked,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { MessageService } from 'src/app/core/services/message.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Message } from 'src/app/models/interfaces';\r\nimport { AdminDashboardService } from 'src/app/core/services/admin-dashboard.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\ninterface PlayerChat {\r\n  senderId: string;\r\n  senderFullName: string;\r\n  senderPhoneNumber: string;\r\n  lastMessage: string;\r\n  lastMessageDate: string;\r\n  unreadCount: number;\r\n  messages: Message[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-inbox',\r\n  templateUrl: './inbox.component.html',\r\n  styleUrls: ['./inbox.component.css'],\r\n})\r\nexport class InboxComponent implements OnInit, AfterViewChecked, OnDestroy {\r\n  playerChats: PlayerChat[] = [];\r\n  selectedPlayerId: string | null = null;\r\n  selectedChat: PlayerChat | null = null;\r\n  replyMessages: { [messageId: number]: string } = {};\r\n  private updateStatusSubscription?: Subscription;\r\n  private refreshSubscription?: Subscription;\r\n  navbarHeight = 60; // default navbar height\r\n\r\n  @ViewChild('messagesContainer')\r\n  messagesContainer!: ElementRef<HTMLDivElement>;\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private toastr: ToastrService,\r\n    private cdr: ChangeDetectorRef,\r\n    private adminDashboardService: AdminDashboardService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadAdminMessages();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.updateStatusSubscription) {\r\n      this.updateStatusSubscription.unsubscribe();\r\n    }\r\n    if (this.refreshSubscription) {\r\n      this.refreshSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n\r\n  private loadAdminMessages(): void {\r\n    // Always load fresh data from server for immediate updates\r\n    this.loadFromServer();\r\n  }\r\n\r\n  private loadFromCache(): void {\r\n    // تم إلغاء الكاش للادمن، سيتم التحميل دائماً من السيرفر\r\n    this.loadFromServer();\r\n  }\r\n\r\n  private loadFromServer(): void {\r\n    this.adminDashboardService.getSecondaryData('messages').subscribe({\r\n      next: (messages) => {\r\n        if (messages && messages.length > 0) {\r\n          const groupedMessages = this.groupMessagesBySender(messages);\r\n          // ترتيب المحادثات حسب الأحدث (آخر رسالة)\r\n          this.playerChats = groupedMessages.sort(\r\n            (a, b) =>\r\n              new Date(b.lastMessageDate).getTime() -\r\n              new Date(a.lastMessageDate).getTime()\r\n          );\r\n          // console.log('✅ Messages loaded with smart caching');\r\n        } else {\r\n          this.toastr.error('لا يوجد رسائل');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.message);\r\n      },\r\n    });\r\n  }\r\n\r\n  // Add refresh method for immediate updates\r\n  refreshMessages(): void {\r\n    this.messageService.getAdminMessages().subscribe({\r\n      next: (response) => {\r\n        if (response && response.messages) {\r\n          const groupedMessages = this.groupMessagesBySender(response.messages);\r\n          // ترتيب المحادثات حسب الأحدث (آخر رسالة)\r\n          this.playerChats = groupedMessages.sort(\r\n            (a, b) =>\r\n              new Date(b.lastMessageDate).getTime() -\r\n              new Date(a.lastMessageDate).getTime()\r\n          );\r\n          // console.log('🔄 Messages refreshed from server');\r\n        } else {\r\n          this.toastr.error('لا يوجد رسائل');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.message);\r\n      },\r\n    });\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this.selectedChat && this.messagesContainer) {\r\n      this.scrollToBottom();\r\n    }\r\n  }\r\n\r\n  loadMessages(): void {\r\n    this.messageService.getMessages().subscribe({\r\n      next: (response) => {\r\n        if (response && response.messages) {\r\n          this.processMessages(response.messages);\r\n        } else {\r\n          this.toastr.error('لا يوجد رسائل الآن');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error('حصل خطأ أثناء جلب الرسائل');\r\n      },\r\n    });\r\n  }\r\n\r\n  private processMessages(messages: Message[]): void {\r\n    const groupedMessages = this.groupMessagesBySender(messages);\r\n    // ترتيب حسب الأحدث (آخر رسالة)\r\n    this.playerChats = groupedMessages.sort(\r\n      (a, b) =>\r\n        new Date(b.lastMessageDate).getTime() -\r\n        new Date(a.lastMessageDate).getTime()\r\n    );\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  groupMessagesBySender(messages: Message[]): PlayerChat[] {\r\n    const chatMap: { [senderId: string]: PlayerChat } = {};\r\n    messages\r\n      .filter((msg) => !msg.isDeleted)\r\n      .forEach((msg) => {\r\n        const playerId = msg.isFromAdmin ? msg.senderId : msg.senderId;\r\n        if (!chatMap[playerId]) {\r\n          chatMap[playerId] = {\r\n            senderId: playerId,\r\n            senderFullName: msg.senderFullName,\r\n            senderPhoneNumber: msg.senderPhoneNumber,\r\n            lastMessage: '',\r\n            lastMessageDate: '',\r\n            unreadCount: 0,\r\n            messages: [],\r\n          };\r\n        }\r\n        chatMap[playerId].messages.push(msg);\r\n        if (!msg.isFromAdmin && !msg.isRead) {\r\n          chatMap[playerId].unreadCount++;\r\n        }\r\n      });\r\n\r\n    return Object.values(chatMap).map((chat) => {\r\n      // ترتيب الرسائل من الأقدم للأحدث\r\n      chat.messages = chat.messages.sort(\r\n        (a, b) => new Date(a.sentAt).getTime() - new Date(b.sentAt).getTime()\r\n      );\r\n      // آخر رسالة\r\n      const lastMsg = chat.messages[chat.messages.length - 1];\r\n      chat.lastMessage = lastMsg?.content ?? '';\r\n      chat.lastMessageDate = lastMsg?.sentAt ?? '';\r\n      return chat;\r\n    });\r\n  }\r\n\r\n  openChat(playerId: string): void {\r\n    this.selectedPlayerId = playerId;\r\n    this.selectedChat =\r\n      this.playerChats.find((chat) => chat.senderId === playerId) || null;\r\n    if (this.selectedChat) {\r\n      this.selectedChat.messages\r\n        .filter((msg) => !msg.isRead && !msg.isFromAdmin)\r\n        .forEach((msg) => {\r\n          this.messageService.toggleMarkMessage(msg.id, true).subscribe({\r\n            next: (response) => {\r\n              if (response.success) {\r\n                msg.isRead = true;\r\n                this.selectedChat!.unreadCount =\r\n                  this.selectedChat!.messages.filter(\r\n                    (m) => !m.isRead && !m.isFromAdmin\r\n                  ).length;\r\n                this.cdr.detectChanges();\r\n              }\r\n            },\r\n            error: (err) => {\r\n              this.toastr.error('حصل خطأ أثناء تحديث حالة الرسالة');\r\n            },\r\n          });\r\n        });\r\n      this.cdr.detectChanges();\r\n    }\r\n  }\r\n\r\n  closeChat(): void {\r\n    this.selectedPlayerId = null;\r\n    this.selectedChat = null;\r\n    this.replyMessages = {};\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  sendReply(): void {\r\n    if (!this.selectedChat) {\r\n      this.toastr.warning('الرجاء اختيار محادثة');\r\n      return;\r\n    }\r\n    const replyContent =\r\n      this.replyMessages[this.selectedChat.messages[0].id]?.trim();\r\n    if (!replyContent) {\r\n      this.toastr.warning('الرجاء كتابة رد');\r\n      return;\r\n    }\r\n\r\n    this.messageService\r\n      .sendAdminReply(this.selectedChat.senderId, replyContent)\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success) {\r\n            this.toastr.success('تم إرسال الرد');\r\n            this.replyMessages[this.selectedChat!.messages[0].id] = '';\r\n\r\n            const newMessage: Message = {\r\n              id: Math.random(),\r\n              senderId: this.selectedChat!.senderId,\r\n              senderFullName: 'Admin',\r\n              senderPhoneNumber: '',\r\n              content: replyContent,\r\n              isRead: true,\r\n              isDeleted: false,\r\n              sentAt: new Date().toISOString(),\r\n              isFromAdmin: true,\r\n            };\r\n\r\n            // تحديث الرسائل في المحادثة المحددة\r\n            this.selectedChat!.messages.push(newMessage);\r\n            this.selectedChat!.messages.sort(\r\n              (a, b) =>\r\n                new Date(a.sentAt).getTime() - new Date(b.sentAt).getTime()\r\n            );\r\n\r\n            // تحديث آخر رسالة في قائمة المحادثات\r\n            this.selectedChat!.lastMessage = replyContent;\r\n            this.selectedChat!.lastMessageDate = newMessage.sentAt;\r\n\r\n            // إعادة ترتيب قائمة المحادثات حسب الأحدث\r\n            this.playerChats.sort(\r\n              (a, b) =>\r\n                new Date(b.lastMessageDate).getTime() -\r\n                new Date(a.lastMessageDate).getTime()\r\n            );\r\n\r\n            // تحديث المحادثة المحددة بعد إعادة الترتيب\r\n            this.selectedChat =\r\n              this.playerChats.find(\r\n                (chat) => chat.senderId === this.selectedPlayerId\r\n              ) || null;\r\n\r\n            this.cdr.detectChanges();\r\n          } else {\r\n            this.toastr.error(response.message || 'فشل إرسال الرد');\r\n          }\r\n        },\r\n        error: (err) => {\r\n          this.toastr.error('حصل خطأ أثناء إرسال الرد');\r\n        },\r\n      });\r\n  }\r\n\r\n  private scrollToBottom(): void {\r\n    if (this.messagesContainer) {\r\n      const container = this.messagesContainer.nativeElement;\r\n      container.scrollTop = container.scrollHeight;\r\n    }\r\n  }\r\n\r\n  trackByPlayerId(index: number, chat: PlayerChat): string {\r\n    return chat.senderId;\r\n  }\r\n\r\n  trackByMessageId(index: number, message: Message): number {\r\n    return message.id;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { AdminRoutingModule } from './admin-routing.module';\r\nimport { PlayersComponent } from './players/players.component';\r\nimport { InboxComponent } from './inbox/inbox.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FindPlayerPipe } from '../pipes/find-player.pipe';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { UtcToLocalPipe } from '../pipes/utcToLocal.pipe';\r\nimport { PlayerModule } from '../player/player.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PlayersComponent,\r\n    InboxComponent,\r\n    FindPlayerPipe,\r\n    UtcToLocalPipe,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    AdminRoutingModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n    PlayerModule,\r\n    SharedModule,\r\n  ],\r\n})\r\nexport class AdminModule {}\r\n"],"x_google_ignoreList":[0,2]}