{"version":3,"file":"main.c2f22c9548362449.js","mappings":"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","names":["i0","chat_r6","unreadCount","_r10","$implicit","ctx_r9","openChat","senderId","InboxComponent_div_6_div_1_span_6_Template","senderFullName","lastMessage","InboxComponent_div_6_div_1_Template","ctx_r1","playerChats","trackByPlayerId","_c1","message_r13","isFromAdmin","_c2","content","sentAt","_r15","ctx_r14","closeChat","InboxComponent_div_8_div_12_Template","ctx_r16","sendReply","$event","ctx_r17","replyMessages","selectedChat","messages","id","ctx_r18","ctx_r2","navbarHeight","_c3","senderPhoneNumber","trackByMessageId","_c4","InboxComponent","constructor","messageService","toastr","cdr","adminDashboardService","this","selectedPlayerId","ngOnInit","loadAdminMessages","ngOnDestroy","updateStatusSubscription","unsubscribe","refreshSubscription","loadFromServer","loadFromCache","getSecondaryData","subscribe","next","length","groupedMessages","groupMessagesBySender","sort","a","b","Date","lastMessageDate","getTime","error","err","message","refreshMessages","getAdminMessages","response","ngAfterViewChecked","messagesContainer","scrollToBottom","loadMessages","getMessages","processMessages","detectChanges","chatMap","filter","msg","isDeleted","forEach","playerId","push","isRead","Object","values","map","chat","lastMsg","find","toggleMarkMessage","success","m","warning","replyContent","trim","sendAdminReply","newMessage","Math","random","toISOString","container","nativeElement","scrollTop","scrollHeight","index","i1","i2","i3","selectors","viewQuery","rf","ctx","InboxComponent_div_5_Template","InboxComponent_div_6_Template","InboxComponent_div_8_Template","InboxComponent_ng_template_9_Template","_c5","_c6","_r3","AdminDashboardService","playerService","matchService","leagueService","noteService","essentialDataCache$","BehaviorSubject","secondaryDataCache","Map","lastEssentialUpdate","lastSecondaryUpdate","CACHE_DURATION","SECONDARY_CACHE_DURATION","getEssentialData","forceRefresh","now","value","asObservable","pipe","data","loadEssentialDataFromServer","tap","catchError","of","getEmptyDashboardData","shareReplay","type","lastUpdate","get","hasValidCache","has","loadSecondaryDataFromServer","set","forkJoin","players","getAdminPlayers","matches","getAdminMatches","currentLeague","getAdminCurrentLeague","league","allLeagues","getAdminAllLeagues","notes","getAdminNotes","messagesList","Array","isArray","stats","totalPlayers","totalMatches","totalMatchesLeft","isCompleted","totalMessagesLeft","invalidateCache","delete","clear","getCurrentEssentialData","updateMessageCount","count","current","i4","i5","factory","ɵfac","providedIn","AuthService","http","router","baseUrl","environment","apiUrl","isLoggedInSubject","hasToken","isLoggedIn$","userRole","token","localStorage","getItem","getRoleFromToken","login","email","password","post","setItem","navigate","playerLogin","phoneNumber","extractedRole","register","firstName","lastName","resetPassword","newPassword","logout","removeItem","getRole","JSON","parse","atob","split","role","CacheService","cache","DEFAULT_TTL","PLAYER_TTL","LEAGUE_TTL","RANKINGS_TTL","loadFromLocalStorage","key","ttl","item","timestamp","saveToLocalStorage","remove","cacheRequest","request","cached","cachePlayerRequest","cacheLeagueRequest","cacheRankingsRequest","cacheAllLeaguesRequest","createdOn","sortedData","dateA","invalidatePattern","pattern","keys","includes","getNextPlayerUpdateTime","getFullYear","getMonth","getDate","getHours","getLastUpdateTime","isCacheExpired","getCacheExpiryTime","shouldRefreshRankings","shouldRefreshCurrentLeague","cacheData","from","entries","stringify","LeagueService","cacheService","resetLeague","LeagueId","startLeague","dto","GetCurrentLeague","GetAllLeaguesRank","DeleteLeague","leagueId","createGroupsAndMatches","startKnockoutStage","startSemiFinals","startFinal","getLastLeaguesRankUpdateTime","getLastCurrentLeagueUpdateTime","isRankingsCacheExpired","isCurrentLeagueCacheExpired","getNextRankingsUpdateTime","getNextCurrentLeagueUpdateTime","forceRefreshRankings","forceRefreshCurrentLeague","MatchService","getMatches","updateMatch","matchId","winnerId","refreshPlayers","resetMatch","getLastMatchesUpdateTime","MessageService","sendMessage","Content","messageId","marked","Marked","toggleDeleteMessage","getPlayerMessages","NoteService","sendNote","getNotes","toggleMarHide","noteId","DeleteNote","PlayerService","rankingSubject","ranking$","getrank","getPlayers","addPlayer","fullName","deletePlayer","refreshRanking","getNextUpdateTime","getLastRankingUpdateTime","getLastPlayersUpdateTime","SharedModule","imports","CommonModule","FormsModule","production","routes","path","redirectTo","pathMatch","loadChildren","__webpack_require__","e","then","bind","PlayerModule","title","AuthModule","Promise","all","AdminModule","canActivate","authGuard","route","state","authService","inject","AppRoutingModule","RouterModule","forRoot","TitleStrategyService","defaultTitle","console","log","setTitle","setupTitleUpdates","events","event","NavigationEnd","setTimeout","updateTitle","currentRoute","getCurrentRoute","snapshot","newTitle","routerState","root","firstChild","currentActivatedRoute","_r13","ctx_r12","closeMenu","_r18","note_r20","NavbarComponent_div_48_div_2_Template","ctx_r11","getNavbarOnlyHeight","NavbarComponent","navbarHeightChange","EventEmitter","isLoggedIn","isAdmin","isMenuOpen","navbarOnlyHeight","loggedIn","ngAfterViewInit","calculateNavbarHeight","navbarOnly","offsetHeight","totalHeight","emit","n","isHidden","toggleMenu","onResize","NavbarComponent_a_7_Template","NavbarComponent_a_8_Template","NavbarComponent_a_9_Template","NavbarComponent_a_10_Template","NavbarComponent_a_25_Template","NavbarComponent_ng_container_26_Template","NavbarComponent_a_27_Template","NavbarComponent_ng_container_46_Template","NavbarComponent_a_47_Template","NavbarComponent_div_48_Template","onButtonMouseDown","ctx_r4","onButtonTouchStart","ctx_r5","toggleInboxOverlay","ctx_r0","buttonPosition","x","y","isDragging","_r7","ctx_r6","closeInboxOverlay","stopPropagation","AppComponent","titleStrategy","showInboxOverlay","dragOffset","hasMovedDuringDrag","checkAdminStatus","setInitialButtonPosition","document","body","style","cursor","classList","removeEventListener","onGlobalMouseMove","onGlobalMouseUp","warn","fixInboxComponentForOverlay","inboxElement","querySelector","querySelectorAll","el","marginTop","top","savedPosition","parsedPosition","margin","buttonSize","maxX","window","innerWidth","maxY","innerHeight","max","clientX","clientY","preventDefault","add","touch","touches","requestAnimationFrame","newY","oldX","oldY","finalX","min","finalY","abs","saveButtonPosition","onGlobalTouchMove","onGlobalTouchEnd","onWindowResize","onEscapeKey","onNavbarHeightChange","height","hostBindings","AppComponent_div_3_Template","AppComponent_div_4_Template","AuthInterceptor","spinner","intercept","req","show","clonedReq","clone","setHeaders","Authorization","handle","finalize","hide","CacheInterceptor","method","shouldCache","url","cachedResponse","HttpResponse","some","cacheableUrl","AppModule","bootstrap","provide","HTTP_INTERCEPTORS","useClass","multi","NgxSpinnerModule","Title","BrowserModule","HttpClientModule","NoopAnimationsModule","ToastrModule","timeOut","positionClass","preventDuplicates","__NgCli_bootstrap_1","bootstrapModule","catch"],"sourceRoot":"webpack:///","sources":["./src/app/admin/inbox/inbox.component.html","./src/app/admin/inbox/inbox.component.ts","./src/app/core/services/admin-dashboard.service.ts","./src/app/core/services/auth.service.ts","./src/app/core/services/cache.service.ts","./src/app/core/services/league.service.ts","./src/app/core/services/match.service.ts","./src/app/core/services/message.service.ts","./src/app/core/services/note.service.ts","./src/app/core/services/player.service.ts","./src/app/shared/shared.module.ts","./src/environments/environment.ts","./src/app/app-routing.module.ts","./src/app/core/guards/auth.guard.ts","./src/app/core/services/title-strategy.service.ts","./src/app/navbar/navbar.component.html","./src/app/navbar/navbar.component.ts","./src/app/app.component.html","./src/app/app.component.ts","./src/app/interceptors/auth-interceptor.service.ts","./src/app/core/interceptors/cache-interceptor.service.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["<div\r\n  class=\"container mx-auto p-4 flex flex-col sm:flex-row overflow-hidden h-screen\"\r\n>\r\n  <!-- Chats List -->\r\n  <div\r\n    class=\"w-full sm:w-1/3 border-r border-gray-600 sm:block\"\r\n    [ngClass]=\"{ hidden: selectedChat }\"\r\n  >\r\n    <div class=\"flex items-center justify-between mb-6\">\r\n      <h2 class=\"text-2xl font-bold text-white\">📥 Inbox</h2>\r\n    </div>\r\n\r\n    <!-- No Chats -->\r\n    <div *ngIf=\"playerChats.length === 0\" class=\"text-center text-gray-300\">\r\n      No messages here 📭\r\n    </div>\r\n\r\n    <!-- Chats List -->\r\n    <div\r\n      *ngIf=\"playerChats.length > 0\"\r\n      class=\"space-y-2 overflow-y-auto max-h-[calc(100vh-120px)]\"\r\n    >\r\n      <div\r\n        *ngFor=\"let chat of playerChats; trackBy: trackByPlayerId\"\r\n        class=\"p-4 backdrop-blur-sm border border-gray-600 rounded-lg hover:bg-gray-700 cursor-pointer flex items-center justify-between\"\r\n        (click)=\"openChat(chat.senderId)\"\r\n      >\r\n        <div>\r\n          <p class=\"font-bold text-white\">{{ chat.senderFullName }}</p>\r\n          <p class=\"text-sm text-gray-300 truncate\">{{ chat.lastMessage }}</p>\r\n        </div>\r\n        <span\r\n          *ngIf=\"chat.unreadCount > 0\"\r\n          class=\"bg-green-600 text-white text-xs font-bold rounded-full px-2 py-1\"\r\n        >\r\n          {{ chat.unreadCount }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <!-- Chat View -->\r\n  <div\r\n    class=\"w-full sm:w-2/3 flex flex-col h-full relative\"\r\n    [ngClass]=\"{ block: selectedChat, 'hidden sm:flex': !selectedChat }\"\r\n  >\r\n    <div *ngIf=\"selectedChat; else noChatSelected\" class=\"flex flex-col h-full\">\r\n      <!-- Chat Header - Fixed -->\r\n      <div\r\n        class=\"fixed left-0 right-0 z-40 p-2 backdrop-blur-sm border-b border-gray-600 flex items-center justify-between bg-black bg-opacity-90\"\r\n        [ngClass]=\"{ 'sm:left-1/3': selectedChat }\"\r\n        [style.top.px]=\"navbarHeight\"\r\n      >\r\n        <div class=\"flex items-center\">\r\n          <button\r\n            (click)=\"closeChat()\"\r\n            class=\"mr-4 text-gray-300 hover:text-white transition\"\r\n          >\r\n            <i class=\"fa-solid fa-arrow-left\" style=\"color: #ffffff\"></i>\r\n          </button>\r\n          <div>\r\n            <p class=\"font-bold text-white text-sm p-0\">\r\n              {{ selectedChat.senderFullName }}\r\n            </p>\r\n            <p class=\"text-xs text-gray-400 p-0\">\r\n              {{ selectedChat.senderPhoneNumber }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Messages - Scrollable Area with padding for fixed header and footer -->\r\n      <div\r\n        #messagesContainer\r\n        class=\"flex-1 p-4 overflow-y-auto backdrop-blur-sm\"\r\n        [style.margin-top.px]=\"navbarHeight + 80\"\r\n        style=\"margin-bottom: 80px\"\r\n      >\r\n        <div\r\n          *ngFor=\"\r\n            let message of selectedChat.messages;\r\n            trackBy: trackByMessageId\r\n          \"\r\n          class=\"mb-4\"\r\n          [ngClass]=\"{\r\n            'text-right': !message.isFromAdmin,\r\n            'text-left': message.isFromAdmin\r\n          }\"\r\n        >\r\n          <div\r\n            class=\"inline-block p-3 rounded-lg max-w-xs\"\r\n            [ngClass]=\"{\r\n              'bg-green-700': !message.isFromAdmin,\r\n              'bg-gray-700 ': message.isFromAdmin\r\n            }\"\r\n          >\r\n            <p class=\"text-white\">{{ message.content }}</p>\r\n            <p class=\"text-xs mt-1 text-gray-300\">\r\n              {{ message.sentAt | date : \"MMM d, y, hh:mm a\" }}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Reply Input - Fixed -->\r\n      <div\r\n        class=\"fixed bottom-0 left-0 right-0 z-50 p-4 bg-black bg-opacity-90 backdrop-blur-sm border-t border-gray-600\"\r\n        [ngClass]=\"{ 'sm:left-1/3': selectedChat }\"\r\n      >\r\n        <form (ngSubmit)=\"sendReply()\" class=\"flex items-center gap-2\">\r\n          <input\r\n            type=\"text\"\r\n            [(ngModel)]=\"replyMessages[selectedChat.messages[0].id]\"\r\n            [ngModelOptions]=\"{ standalone: true }\"\r\n            (ngModelChange)=\"\r\n              replyMessages[selectedChat.messages[0].id] = $event\r\n            \"\r\n            placeholder=\"Write your reply...\"\r\n            class=\"flex-1 p-2 border border-gray-600 rounded-lg bg-gray-800 text-white focus:outline-none focus:ring-2 focus:ring-blue-600 placeholder-gray-400\"\r\n          />\r\n          <button\r\n            type=\"submit\"\r\n            class=\"bg-blue-600 text-white p-2 rounded-lg hover:bg-blue-700 transition disabled:bg-gray-600\"\r\n            [disabled]=\"!replyMessages[selectedChat.messages[0].id]\"\r\n          >\r\n            Reply\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Placeholder when no chat is selected -->\r\n    <ng-template #noChatSelected>\r\n      <div class=\"w-full flex items-center justify-center text-gray-300\">\r\n        Select a chat to view messages 📩\r\n      </div>\r\n    </ng-template>\r\n  </div>\r\n</div>\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  ChangeDetectorRef,\r\n  ViewChild,\r\n  ElementRef,\r\n  AfterViewChecked,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { MessageService } from 'src/app/core/services/message.service';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { Message } from 'src/app/models/interfaces';\r\nimport { AdminDashboardService } from 'src/app/core/services/admin-dashboard.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\ninterface PlayerChat {\r\n  senderId: string;\r\n  senderFullName: string;\r\n  senderPhoneNumber: string;\r\n  lastMessage: string;\r\n  lastMessageDate: string;\r\n  unreadCount: number;\r\n  messages: Message[];\r\n}\r\n\r\n@Component({\r\n  selector: 'app-inbox',\r\n  templateUrl: './inbox.component.html',\r\n  styleUrls: ['./inbox.component.css'],\r\n})\r\nexport class InboxComponent implements OnInit, AfterViewChecked, OnDestroy {\r\n  playerChats: PlayerChat[] = [];\r\n  selectedPlayerId: string | null = null;\r\n  selectedChat: PlayerChat | null = null;\r\n  replyMessages: { [messageId: number]: string } = {};\r\n  private updateStatusSubscription?: Subscription;\r\n  private refreshSubscription?: Subscription;\r\n  navbarHeight = 60; // default navbar height\r\n\r\n  @ViewChild('messagesContainer')\r\n  messagesContainer!: ElementRef<HTMLDivElement>;\r\n\r\n  constructor(\r\n    private messageService: MessageService,\r\n    private toastr: ToastrService,\r\n    private cdr: ChangeDetectorRef,\r\n    private adminDashboardService: AdminDashboardService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loadAdminMessages();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    if (this.updateStatusSubscription) {\r\n      this.updateStatusSubscription.unsubscribe();\r\n    }\r\n    if (this.refreshSubscription) {\r\n      this.refreshSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n\r\n  private loadAdminMessages(): void {\r\n    // Always load fresh data from server for immediate updates\r\n    this.loadFromServer();\r\n  }\r\n\r\n  private loadFromCache(): void {\r\n    // تم إلغاء الكاش للادمن، سيتم التحميل دائماً من السيرفر\r\n    this.loadFromServer();\r\n  }\r\n\r\n  private loadFromServer(): void {\r\n    this.adminDashboardService.getSecondaryData('messages').subscribe({\r\n      next: (messages) => {\r\n        if (messages && messages.length > 0) {\r\n          const groupedMessages = this.groupMessagesBySender(messages);\r\n          // ترتيب المحادثات حسب الأحدث (آخر رسالة)\r\n          this.playerChats = groupedMessages.sort(\r\n            (a, b) =>\r\n              new Date(b.lastMessageDate).getTime() -\r\n              new Date(a.lastMessageDate).getTime()\r\n          );\r\n  \r\n        } else {\r\n          this.toastr.error('لا يوجد رسائل');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.message);\r\n      },\r\n    });\r\n  }\r\n\r\n  // Add refresh method for immediate updates\r\n  refreshMessages(): void {\r\n    this.messageService.getAdminMessages().subscribe({\r\n      next: (response) => {\r\n        if (response && response.messages) {\r\n          const groupedMessages = this.groupMessagesBySender(response.messages);\r\n          // ترتيب المحادثات حسب الأحدث (آخر رسالة)\r\n          this.playerChats = groupedMessages.sort(\r\n            (a, b) =>\r\n              new Date(b.lastMessageDate).getTime() -\r\n              new Date(a.lastMessageDate).getTime()\r\n          );\r\n          \r\n        } else {\r\n          this.toastr.error('لا يوجد رسائل');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error(err.message);\r\n      },\r\n    });\r\n  }\r\n\r\n  ngAfterViewChecked(): void {\r\n    if (this.selectedChat && this.messagesContainer) {\r\n      this.scrollToBottom();\r\n    }\r\n  }\r\n\r\n  loadMessages(): void {\r\n    this.messageService.getMessages().subscribe({\r\n      next: (response) => {\r\n        if (response && response.messages) {\r\n          this.processMessages(response.messages);\r\n        } else {\r\n          this.toastr.error('لا يوجد رسائل الآن');\r\n        }\r\n      },\r\n      error: (err) => {\r\n        this.toastr.error('حصل خطأ أثناء جلب الرسائل');\r\n      },\r\n    });\r\n  }\r\n\r\n  private processMessages(messages: Message[]): void {\r\n    const groupedMessages = this.groupMessagesBySender(messages);\r\n    // ترتيب حسب الأحدث (آخر رسالة)\r\n    this.playerChats = groupedMessages.sort(\r\n      (a, b) =>\r\n        new Date(b.lastMessageDate).getTime() -\r\n        new Date(a.lastMessageDate).getTime()\r\n    );\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  groupMessagesBySender(messages: Message[]): PlayerChat[] {\r\n    const chatMap: { [senderId: string]: PlayerChat } = {};\r\n    messages\r\n      .filter((msg) => !msg.isDeleted)\r\n      .forEach((msg) => {\r\n        const playerId = msg.isFromAdmin ? msg.senderId : msg.senderId;\r\n        if (!chatMap[playerId]) {\r\n          chatMap[playerId] = {\r\n            senderId: playerId,\r\n            senderFullName: msg.senderFullName,\r\n            senderPhoneNumber: msg.senderPhoneNumber,\r\n            lastMessage: '',\r\n            lastMessageDate: '',\r\n            unreadCount: 0,\r\n            messages: [],\r\n          };\r\n        }\r\n        chatMap[playerId].messages.push(msg);\r\n        if (!msg.isFromAdmin && !msg.isRead) {\r\n          chatMap[playerId].unreadCount++;\r\n        }\r\n      });\r\n\r\n    return Object.values(chatMap).map((chat) => {\r\n      // ترتيب الرسائل من الأقدم للأحدث\r\n      chat.messages = chat.messages.sort(\r\n        (a, b) => new Date(a.sentAt).getTime() - new Date(b.sentAt).getTime()\r\n      );\r\n      // آخر رسالة\r\n      const lastMsg = chat.messages[chat.messages.length - 1];\r\n      chat.lastMessage = lastMsg?.content ?? '';\r\n      chat.lastMessageDate = lastMsg?.sentAt ?? '';\r\n      return chat;\r\n    });\r\n  }\r\n\r\n  openChat(playerId: string): void {\r\n    this.selectedPlayerId = playerId;\r\n    this.selectedChat =\r\n      this.playerChats.find((chat) => chat.senderId === playerId) || null;\r\n    if (this.selectedChat) {\r\n      this.selectedChat.messages\r\n        .filter((msg) => !msg.isRead && !msg.isFromAdmin)\r\n        .forEach((msg) => {\r\n          this.messageService.toggleMarkMessage(msg.id, true).subscribe({\r\n            next: (response) => {\r\n              if (response.success) {\r\n                msg.isRead = true;\r\n                this.selectedChat!.unreadCount =\r\n                  this.selectedChat!.messages.filter(\r\n                    (m) => !m.isRead && !m.isFromAdmin\r\n                  ).length;\r\n                this.cdr.detectChanges();\r\n              }\r\n            },\r\n            error: (err) => {\r\n              this.toastr.error('حصل خطأ أثناء تحديث حالة الرسالة');\r\n            },\r\n          });\r\n        });\r\n      this.cdr.detectChanges();\r\n    }\r\n  }\r\n\r\n  closeChat(): void {\r\n    this.selectedPlayerId = null;\r\n    this.selectedChat = null;\r\n    this.replyMessages = {};\r\n    this.cdr.detectChanges();\r\n  }\r\n\r\n  sendReply(): void {\r\n    if (!this.selectedChat) {\r\n      this.toastr.warning('الرجاء اختيار محادثة');\r\n      return;\r\n    }\r\n    const replyContent =\r\n      this.replyMessages[this.selectedChat.messages[0].id]?.trim();\r\n    if (!replyContent) {\r\n      this.toastr.warning('الرجاء كتابة رد');\r\n      return;\r\n    }\r\n\r\n    this.messageService\r\n      .sendAdminReply(this.selectedChat.senderId, replyContent)\r\n      .subscribe({\r\n        next: (response) => {\r\n          if (response.success) {\r\n            this.toastr.success('تم إرسال الرد');\r\n            this.replyMessages[this.selectedChat!.messages[0].id] = '';\r\n\r\n            const newMessage: Message = {\r\n              id: Math.random(),\r\n              senderId: this.selectedChat!.senderId,\r\n              senderFullName: 'Admin',\r\n              senderPhoneNumber: '',\r\n              content: replyContent,\r\n              isRead: true,\r\n              isDeleted: false,\r\n              sentAt: new Date().toISOString(),\r\n              isFromAdmin: true,\r\n            };\r\n\r\n            // تحديث الرسائل في المحادثة المحددة\r\n            this.selectedChat!.messages.push(newMessage);\r\n            this.selectedChat!.messages.sort(\r\n              (a, b) =>\r\n                new Date(a.sentAt).getTime() - new Date(b.sentAt).getTime()\r\n            );\r\n\r\n            // تحديث آخر رسالة في قائمة المحادثات\r\n            this.selectedChat!.lastMessage = replyContent;\r\n            this.selectedChat!.lastMessageDate = newMessage.sentAt;\r\n\r\n            // إعادة ترتيب قائمة المحادثات حسب الأحدث\r\n            this.playerChats.sort(\r\n              (a, b) =>\r\n                new Date(b.lastMessageDate).getTime() -\r\n                new Date(a.lastMessageDate).getTime()\r\n            );\r\n\r\n            // تحديث المحادثة المحددة بعد إعادة الترتيب\r\n            this.selectedChat =\r\n              this.playerChats.find(\r\n                (chat) => chat.senderId === this.selectedPlayerId\r\n              ) || null;\r\n\r\n            this.cdr.detectChanges();\r\n          } else {\r\n            this.toastr.error(response.message || 'فشل إرسال الرد');\r\n          }\r\n        },\r\n        error: (err) => {\r\n          this.toastr.error('حصل خطأ أثناء إرسال الرد');\r\n        },\r\n      });\r\n  }\r\n\r\n  private scrollToBottom(): void {\r\n    if (this.messagesContainer) {\r\n      const container = this.messagesContainer.nativeElement;\r\n      container.scrollTop = container.scrollHeight;\r\n    }\r\n  }\r\n\r\n  trackByPlayerId(index: number, chat: PlayerChat): string {\r\n    return chat.senderId;\r\n  }\r\n\r\n  trackByMessageId(index: number, message: Message): number {\r\n    return message.id;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject, forkJoin, of } from 'rxjs';\r\nimport { map, tap, catchError, shareReplay, filter } from 'rxjs/operators';\r\nimport { PlayerService } from './player.service';\r\nimport { MatchService } from './match.service';\r\nimport { LeagueService } from './league.service';\r\nimport { MessageService } from './message.service';\r\nimport { NoteService } from './note.service';\r\nimport {\r\n  Player,\r\n  Match,\r\n  League,\r\n  AllLeagueRank,\r\n  Note,\r\n  Message,\r\n} from '../../models/interfaces';\r\n\r\nexport interface AdminDashboardData {\r\n  players: Player[];\r\n  matches: Match[];\r\n  currentLeague: League | null;\r\n  allLeagues: AllLeagueRank[];\r\n  notes: Note[];\r\n  messages: Message[];\r\n  stats: {\r\n    totalPlayers: number;\r\n    totalMatches: number;\r\n    totalMatchesLeft: number;\r\n    totalMessagesLeft: number;\r\n  };\r\n}\r\n\r\nexport interface AdminSecondaryData {\r\n  allLeagues: AllLeagueRank[];\r\n  notes: Note[];\r\n  messages: Message[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminDashboardService {\r\n  private essentialDataCache$ = new BehaviorSubject<AdminDashboardData | null>(\r\n    null\r\n  );\r\n  private secondaryDataCache = new Map<string, any>();\r\n  private lastEssentialUpdate = 0;\r\n  private lastSecondaryUpdate = new Map<string, number>();\r\n  private readonly CACHE_DURATION = 900000; // 15 minutes\r\n  private readonly SECONDARY_CACHE_DURATION = 900000; // 15 minutes (same as main cache)\r\n\r\n  constructor(\r\n    private playerService: PlayerService,\r\n    private matchService: MatchService,\r\n    private leagueService: LeagueService,\r\n    private messageService: MessageService,\r\n    private noteService: NoteService\r\n  ) {}\r\n\r\n  /**\r\n   * Get essential dashboard data with smart caching\r\n   */\r\n  getEssentialData(forceRefresh = false): Observable<AdminDashboardData> {\r\n    const now = Date.now();\r\n    const hasValidCache =\r\n      this.essentialDataCache$.value &&\r\n      now - this.lastEssentialUpdate < this.CACHE_DURATION;\r\n\r\n    if (!forceRefresh && hasValidCache) {\r\n      return this.essentialDataCache$\r\n        .asObservable()\r\n        .pipe(filter((data): data is AdminDashboardData => data !== null));\r\n    }\r\n\r\n    return this.loadEssentialDataFromServer().pipe(\r\n      tap((data) => {\r\n        this.essentialDataCache$.next(data);\r\n        this.lastEssentialUpdate = now;\r\n      }),\r\n      catchError((error) => {\r\n        // Return cached data if available, otherwise empty state\r\n        return of(\r\n          this.essentialDataCache$.value || this.getEmptyDashboardData()\r\n        );\r\n      }),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get secondary data with smart caching\r\n   */\r\n  getSecondaryData(\r\n    type: 'leagues' | 'notes' | 'messages',\r\n    forceRefresh = false\r\n  ): Observable<any> {\r\n    const now = Date.now();\r\n    const lastUpdate = this.lastSecondaryUpdate.get(type) || 0;\r\n    const hasValidCache =\r\n      this.secondaryDataCache.has(type) &&\r\n      now - lastUpdate < this.SECONDARY_CACHE_DURATION;\r\n\r\n    if (!forceRefresh && hasValidCache) {\r\n      return of(this.secondaryDataCache.get(type));\r\n    }\r\n\r\n    return this.loadSecondaryDataFromServer(type).pipe(\r\n      tap((data) => {\r\n        this.secondaryDataCache.set(type, data);\r\n        this.lastSecondaryUpdate.set(type, now);\r\n      }),\r\n      catchError((error) => {\r\n        // Return cached data if available\r\n        return of(this.secondaryDataCache.get(type) || []);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load essential data from server using parallel requests\r\n   */\r\n  private loadEssentialDataFromServer(): Observable<AdminDashboardData> {\r\n    return forkJoin({\r\n      players: this.playerService.getAdminPlayers(),\r\n      matches: this.matchService.getAdminMatches(),\r\n      currentLeague: this.leagueService.getAdminCurrentLeague().pipe(\r\n        map((response) => response.league),\r\n        catchError(() => of(null))\r\n      ),\r\n      allLeagues: this.leagueService\r\n        .getAdminAllLeagues()\r\n        .pipe(catchError(() => of([]))),\r\n      notes: this.noteService.getAdminNotes().pipe(\r\n        map((response) => response.notes),\r\n        catchError(() => of([]))\r\n      ),\r\n      messages: this.messageService.getAdminMessages().pipe(\r\n        map((response) => response.messages || []),\r\n        catchError(() => of([]))\r\n      ),\r\n    }).pipe(\r\n      map(\r\n        ({ players, matches, currentLeague, allLeagues, notes, messages }) => {\r\n          const messagesList = Array.isArray(messages) ? messages : [];\r\n          return {\r\n            players: players as Player[],\r\n            matches: matches as Match[],\r\n            currentLeague,\r\n            allLeagues: allLeagues as AllLeagueRank[],\r\n            notes: notes as Note[],\r\n            messages: messagesList as Message[],\r\n            stats: {\r\n              totalPlayers: players.length,\r\n              totalMatches: matches.length,\r\n              totalMatchesLeft: matches.filter((m) => !m.isCompleted).length,\r\n              totalMessagesLeft: messagesList.filter(\r\n                (m: any) => !m.isRead && !m.isFromAdmin\r\n              ).length,\r\n            },\r\n          };\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load secondary data from server\r\n   */\r\n  private loadSecondaryDataFromServer(type: string): Observable<any> {\r\n    switch (type) {\r\n      case 'leagues':\r\n        return this.leagueService.getAdminAllLeagues();\r\n      case 'notes':\r\n        return this.noteService\r\n          .getAdminNotes()\r\n          .pipe(map((response) => response.notes));\r\n      case 'messages':\r\n        return this.messageService\r\n          .getAdminMessages()\r\n          .pipe(map((response) => response.messages || []));\r\n      default:\r\n        return of([]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update cached data after mutations\r\n   */\r\n  invalidateCache(\r\n    type: 'essential' | 'leagues' | 'notes' | 'messages' | 'all'\r\n  ): void {\r\n    switch (type) {\r\n      case 'essential':\r\n        this.lastEssentialUpdate = 0;\r\n        break;\r\n      case 'leagues':\r\n      case 'notes':\r\n      case 'messages':\r\n        this.lastSecondaryUpdate.set(type, 0);\r\n        this.secondaryDataCache.delete(type);\r\n        break;\r\n      case 'all':\r\n        this.lastEssentialUpdate = 0;\r\n        this.lastSecondaryUpdate.clear();\r\n        this.secondaryDataCache.clear();\r\n        break;\r\n    }\r\n  }\r\n\r\n  // ✅ تم حذف Background refresh تماماً - مالوش لازمة أصلاً\r\n\r\n  /**\r\n   * Get current cached essential data\r\n   */\r\n  getCurrentEssentialData(): AdminDashboardData | null {\r\n    return this.essentialDataCache$.value;\r\n  }\r\n\r\n  /**\r\n   * Update message count in stats\r\n   */\r\n  updateMessageCount(count: number): void {\r\n    const current = this.essentialDataCache$.value;\r\n    if (current) {\r\n      current.stats.totalMessagesLeft = count;\r\n      this.essentialDataCache$.next(current);\r\n    }\r\n  }\r\n\r\n  private getEmptyDashboardData(): AdminDashboardData {\r\n    return {\r\n      players: [],\r\n      matches: [],\r\n      currentLeague: null,\r\n      allLeagues: [],\r\n      notes: [],\r\n      messages: [],\r\n      stats: {\r\n        totalPlayers: 0,\r\n        totalMatches: 0,\r\n        totalMatchesLeft: 0,\r\n        totalMessagesLeft: 0,\r\n      },\r\n    };\r\n  }\r\n}\r\n","import { environment } from './../../../environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { CommonResponse, LoginResponse } from 'src/app/models/interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private baseUrl = environment.apiUrl;\r\n  private isLoggedInSubject = new BehaviorSubject<boolean>(this.hasToken());\r\n  isLoggedIn$ = this.isLoggedInSubject.asObservable();\r\n  private userRole: string | null = null;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      this.userRole = this.getRoleFromToken(token);\r\n      this.isLoggedInSubject.next(true);\r\n    }\r\n  }\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    return this.http\r\n      .post<any>(`${this.baseUrl}/auth/login`, {\r\n        email,\r\n        password,\r\n      })\r\n      .pipe(\r\n        tap((response) => {\r\n          if (response.success) {\r\n            localStorage.setItem('token', response.token);\r\n            localStorage.setItem('userRole', response.userRole || 'Admin');\r\n            this.userRole = response.userRole || 'Admin';\r\n            this.isLoggedInSubject.next(true);\r\n            this.router.navigate(['/admin']);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  playerLogin(\r\n    phoneNumber: string,\r\n    password: string\r\n  ): Observable<LoginResponse> {\r\n    return this.http\r\n      .post<LoginResponse>(`${this.baseUrl}/auth/player-login`, {\r\n        phoneNumber,\r\n        password,\r\n      })\r\n      .pipe(\r\n        tap((response) => {\r\n          if (response.success && response.token) {\r\n            localStorage.setItem('token', response.token);\r\n            const extractedRole = this.getRoleFromToken(response.token);\r\n            this.userRole = extractedRole || 'Player';\r\n            localStorage.setItem('userRole', this.userRole);\r\n\r\n            this.isLoggedInSubject.next(true);\r\n            this.router.navigate(['/player']);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  register(\r\n    phoneNumber: string,\r\n    password: string,\r\n    firstName: string,\r\n    lastName: string\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/auth/register-player`,\r\n      { phoneNumber, password, firstName, lastName }\r\n    );\r\n  }\r\n\r\n  resetPassword(\r\n    phoneNumber: string,\r\n    newPassword: string\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/auth/reset-password`,\r\n      { phoneNumber, newPassword }\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    this.userRole = null;\r\n    this.isLoggedInSubject.next(false);\r\n    this.router.navigate(['/player']);\r\n  }\r\n\r\n  getRole(): string | null {\r\n    return this.userRole;\r\n  }\r\n\r\n  private hasToken(): boolean {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  private getRoleFromToken(token: string): string | null {\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      const role = payload['role'] || null;\r\n      return role;\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\n\r\ninterface CacheItem<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number; // Time to live in milliseconds\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CacheService {\r\n  private cache = new Map<string, CacheItem<any>>();\r\n  private readonly DEFAULT_TTL = 5 * 60 * 1000; // 5 minutes default\r\n  private readonly PLAYER_TTL = 30 * 60 * 1000; // 30 minutes for player data\r\n  private readonly LEAGUE_TTL = 30 * 60 * 1000; // 30 minutes for league data\r\n  private readonly RANKINGS_TTL = 30 * 60 * 1000; // 30 minutes for rankings data\r\n\r\n  constructor() {\r\n    this.loadFromLocalStorage();\r\n  }\r\n\r\n  set<T>(key: string, data: T, ttl: number = this.DEFAULT_TTL): void {\r\n    const item = {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl,\r\n    };\r\n\r\n    this.cache.set(key, item);\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  get<T>(key: string): T | null {\r\n    const item = this.cache.get(key);\r\n    if (!item) return null;\r\n\r\n    const isExpired = Date.now() - item.timestamp > item.ttl;\r\n    if (isExpired) {\r\n      this.cache.delete(key);\r\n      this.saveToLocalStorage();\r\n      return null;\r\n    }\r\n\r\n    return item.data;\r\n  }\r\n\r\n  has(key: string): boolean {\r\n    return this.get(key) !== null;\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  remove(key: string): void {\r\n    this.cache.delete(key);\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  // Helper method to cache HTTP requests\r\n  cacheRequest<T>(\r\n    key: string,\r\n    request: Observable<T>,\r\n    ttl: number = this.DEFAULT_TTL\r\n  ): Observable<T> {\r\n    const cached = this.get<T>(key);\r\n    if (cached) {\r\n      return of(cached);\r\n    }\r\n\r\n    return request.pipe(\r\n      tap((data) => this.set(key, data, ttl)),\r\n      catchError((error) => {\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Cache player data with 30 minutes TTL\r\n  cachePlayerRequest<T>(key: string, request: Observable<T>): Observable<T> {\r\n    return this.cacheRequest(key, request, this.PLAYER_TTL);\r\n  }\r\n\r\n  // Cache league data with 30 minutes TTL\r\n  cacheLeagueRequest<T>(key: string, request: Observable<T>): Observable<T> {\r\n    return this.cacheRequest(key, request, this.LEAGUE_TTL);\r\n  }\r\n\r\n  // Cache rankings data with 30 minutes TTL\r\n  cacheRankingsRequest<T>(key: string, request: Observable<T>): Observable<T> {\r\n    return this.cacheRequest(key, request, this.RANKINGS_TTL);\r\n  }\r\n\r\n  // Cache all-leagues data with 30 minutes TTL and sort by creation date (newest first)\r\n  cacheAllLeaguesRequest<T>(\r\n    key: string,\r\n    request: Observable<T>\r\n  ): Observable<T> {\r\n    const cached = this.get<T>(key);\r\n    if (cached) {\r\n      return of(cached);\r\n    }\r\n\r\n    return request.pipe(\r\n      tap((data: any) => {\r\n        // Sort leagues by createdOn date (newest first) if it's an array\r\n        if (Array.isArray(data) && data.length > 0 && data[0].createdOn) {\r\n          const sortedData = [...data].sort((a, b) => {\r\n            const dateA = new Date(a.createdOn).getTime();\r\n            const dateB = new Date(b.createdOn).getTime();\r\n            return dateB - dateA; // Descending order (newest first)\r\n          });\r\n          this.set(key, sortedData, this.RANKINGS_TTL);\r\n        } else {\r\n          this.set(key, data, this.RANKINGS_TTL);\r\n        }\r\n      }),\r\n      catchError((error) => {\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Invalidate cache for specific patterns\r\n  invalidatePattern(pattern: string): void {\r\n    for (const key of this.cache.keys()) {\r\n      if (key.includes(pattern)) {\r\n        this.cache.delete(key);\r\n      }\r\n    }\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  // Get next update time for player data (every hour)\r\n  getNextPlayerUpdateTime(): Date {\r\n    const now = new Date();\r\n    const nextHour = new Date(\r\n      now.getFullYear(),\r\n      now.getMonth(),\r\n      now.getDate(),\r\n      now.getHours() + 1,\r\n      0,\r\n      0,\r\n      0\r\n    );\r\n    return nextHour;\r\n  }\r\n\r\n  // Get last update time for a specific key\r\n  getLastUpdateTime(key: string): Date | null {\r\n    const item = this.cache.get(key);\r\n    return item ? new Date(item.timestamp) : null;\r\n  }\r\n\r\n  // Check if cache is expired for a specific key\r\n  isCacheExpired(key: string): boolean {\r\n    const item = this.cache.get(key);\r\n    if (!item) return true;\r\n    return Date.now() - item.timestamp > item.ttl;\r\n  }\r\n\r\n  // Get cache expiry time for a specific key\r\n  getCacheExpiryTime(key: string): Date | null {\r\n    const item = this.cache.get(key);\r\n    if (!item) return null;\r\n    return new Date(item.timestamp + item.ttl);\r\n  }\r\n\r\n  // Force refresh cache for a specific key\r\n  forceRefresh<T>(\r\n    key: string,\r\n    request: Observable<T>,\r\n    ttl: number = this.DEFAULT_TTL\r\n  ): Observable<T> {\r\n    this.remove(key);\r\n    return this.cacheRequest(key, request, ttl);\r\n  }\r\n\r\n  // Check if cache should be refreshed based on current time (every 30 minutes)\r\n  shouldRefreshRankings(): boolean {\r\n    const lastUpdate = this.getLastUpdateTime('all-leagues-rank');\r\n    if (!lastUpdate) return true;\r\n\r\n    const minutesSinceUpdate =\r\n      (Date.now() - lastUpdate.getTime()) / (60 * 1000);\r\n    return minutesSinceUpdate >= 30;\r\n  }\r\n\r\n  // Check if current league cache should be refreshed\r\n  shouldRefreshCurrentLeague(): boolean {\r\n    const lastUpdate = this.getLastUpdateTime('current-league');\r\n    if (!lastUpdate) return true;\r\n\r\n    const minutesSinceUpdate =\r\n      (Date.now() - lastUpdate.getTime()) / (60 * 1000);\r\n    return minutesSinceUpdate >= 30;\r\n  }\r\n\r\n  private saveToLocalStorage(): void {\r\n    try {\r\n      const cacheData = Array.from(this.cache.entries());\r\n      localStorage.setItem('app_cache', JSON.stringify(cacheData));\r\n    } catch (error) {\r\n      // Silent error handling\r\n    }\r\n  }\r\n\r\n  private loadFromLocalStorage(): void {\r\n    try {\r\n      const cacheData = localStorage.getItem('app_cache');\r\n      if (cacheData) {\r\n        const entries = JSON.parse(cacheData);\r\n        this.cache = new Map(entries);\r\n\r\n        // Clean expired items\r\n        for (const [key, item] of this.cache.entries()) {\r\n          if (Date.now() - item.timestamp > item.ttl) {\r\n            this.cache.delete(key);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Silent error handling\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from './../../../environments/environment';\r\nimport {\r\n  AllLeagueRank,\r\n  CommonResponse,\r\n  LeagueResponse,\r\n  StartLeagueDto,\r\n} from 'src/app/models/interfaces';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LeagueService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient, private cacheService: CacheService) {}\r\n\r\n  resetLeague(LeagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/reset/${LeagueId}`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  startLeague(dto: StartLeagueDto): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(`${this.baseUrl}/league/start`, dto);\r\n  }\r\n\r\n  GetCurrentLeague(forceRefresh: boolean = false): Observable<LeagueResponse> {\r\n    const request = this.http.get<LeagueResponse>(\r\n      `${this.baseUrl}/league/getCurrentLeague`\r\n    );\r\n\r\n    if (forceRefresh || this.cacheService.shouldRefreshCurrentLeague()) {\r\n      return this.cacheService.forceRefresh(\r\n        'current-league',\r\n        request,\r\n        30 * 60 * 1000\r\n      );\r\n    }\r\n\r\n    return this.cacheService.cachePlayerRequest('current-league', request);\r\n  }\r\n\r\n  // Admin-specific method for current league without cache\r\n  getAdminCurrentLeague(): Observable<LeagueResponse> {\r\n    return this.http.get<LeagueResponse>(\r\n      `${this.baseUrl}/league/getCurrentLeague`\r\n    );\r\n  }\r\n\r\n  GetAllLeaguesRank(\r\n    forceRefresh: boolean = false\r\n  ): Observable<AllLeagueRank[]> {\r\n    const request = this.http.get<AllLeagueRank[]>(\r\n      `${this.baseUrl}/player/players/all`\r\n    );\r\n\r\n    if (forceRefresh || this.cacheService.shouldRefreshRankings()) {\r\n      return this.cacheService.forceRefresh(\r\n        'all-leagues-rank',\r\n        request,\r\n        30 * 60 * 1000\r\n      );\r\n    }\r\n\r\n    return this.cacheService.cacheAllLeaguesRequest(\r\n      'all-leagues-rank',\r\n      request\r\n    );\r\n  }\r\n\r\n  // Admin-specific method with 30-minute cache\r\n  getAdminAllLeagues(): Observable<AllLeagueRank[]> {\r\n    return this.http.get<AllLeagueRank[]>(`${this.baseUrl}/player/players/all`);\r\n  }\r\n\r\n  DeleteLeague(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.delete<CommonResponse>(\r\n      `${this.baseUrl}/league/delete/${leagueId}`\r\n    );\r\n  }\r\n\r\n  createGroupsAndMatches(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/${leagueId}/create-groups`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  startKnockoutStage(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/${leagueId}/start-knockouts`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  startSemiFinals(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/${leagueId}/start-semifinals`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  startFinal(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/${leagueId}/start-final`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  // Get last update time for leagues rank\r\n  getLastLeaguesRankUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('all-leagues-rank');\r\n  }\r\n\r\n  // Get last update time for current league\r\n  getLastCurrentLeagueUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('current-league');\r\n  }\r\n\r\n  // Check if rankings cache is expired\r\n  isRankingsCacheExpired(): boolean {\r\n    return this.cacheService.isCacheExpired('all-leagues-rank');\r\n  }\r\n\r\n  // Check if current league cache is expired\r\n  isCurrentLeagueCacheExpired(): boolean {\r\n    return this.cacheService.isCacheExpired('current-league');\r\n  }\r\n\r\n  // Get next rankings update time\r\n  getNextRankingsUpdateTime(): Date | null {\r\n    return this.cacheService.getCacheExpiryTime('all-leagues-rank');\r\n  }\r\n\r\n  // Get next current league update time\r\n  getNextCurrentLeagueUpdateTime(): Date | null {\r\n    return this.cacheService.getCacheExpiryTime('current-league');\r\n  }\r\n\r\n  // Force refresh rankings data\r\n  forceRefreshRankings(): Observable<AllLeagueRank[]> {\r\n    return this.GetAllLeaguesRank(true);\r\n  }\r\n\r\n  // Force refresh current league data\r\n  forceRefreshCurrentLeague(): Observable<LeagueResponse> {\r\n    return this.GetCurrentLeague(true);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { environment } from './../../../environments/environment';\r\nimport { Match, ResultResponse } from 'src/app/models/interfaces';\r\nimport { PlayerService } from './player.service';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MatchService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private playerService: PlayerService,\r\n    private cacheService: CacheService\r\n  ) {}\r\n\r\n  getMatches(): Observable<Match[]> {\r\n    return this.cacheService.cachePlayerRequest(\r\n      'current-matches',\r\n      this.http.get<Match[]>(`${this.baseUrl}/match`)\r\n    );\r\n  }\r\n\r\n  // Admin-specific method - now same as regular method\r\n  getAdminMatches(): Observable<Match[]> {\r\n    return this.http.get<Match[]>(`${this.baseUrl}/match`);\r\n  }\r\n\r\n  updateMatch(\r\n    matchId: number,\r\n    winnerId: number | null\r\n  ): Observable<ResultResponse> {\r\n    return this.http\r\n      .post<ResultResponse>(`${this.baseUrl}/match/${matchId}/result`, {\r\n        winnerId,\r\n      })\r\n      .pipe(\r\n        tap(() => {\r\n          this.playerService.refreshPlayers();\r\n        })\r\n      );\r\n  }\r\n\r\n  resetMatch(matchId: number): Observable<ResultResponse> {\r\n    return this.http\r\n      .delete<ResultResponse>(`${this.baseUrl}/match/reset/${matchId}`)\r\n      .pipe(\r\n        tap(() => {\r\n          this.playerService.refreshPlayers();\r\n        })\r\n      );\r\n  }\r\n\r\n  // Get last update time for current matches\r\n  getLastMatchesUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('current-matches');\r\n  }\r\n}\r\n","import { environment } from './../../../environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CommonResponse, MessagesResponse } from 'src/app/models/interfaces';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessageService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient, private cacheService: CacheService) {}\r\n\r\n  sendMessage(message: string): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(`${this.baseUrl}/Message/send`, {\r\n      Content: message,\r\n    });\r\n  }\r\n\r\n  getMessages(): Observable<MessagesResponse> {\r\n    return this.http.get<MessagesResponse>(`${this.baseUrl}/Message/inbox`);\r\n  }\r\n\r\n  // Admin-specific method - now loads fresh data immediately without caching\r\n  getAdminMessages(): Observable<MessagesResponse> {\r\n    return this.http.get<MessagesResponse>(`${this.baseUrl}/Message/inbox`);\r\n  }\r\n\r\n  toggleMarkMessage(\r\n    messageId: number,\r\n    marked: boolean\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/Message/mark/${messageId}`,\r\n      { Marked: marked }\r\n    );\r\n  }\r\n\r\n  toggleDeleteMessage(\r\n    messageId: number,\r\n    marked: boolean\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/Message/delete/${messageId}`,\r\n      { Marked: marked }\r\n    );\r\n  }\r\n\r\n  getPlayerMessages(): Observable<MessagesResponse> {\r\n    return this.http.get<MessagesResponse>(\r\n      `${this.baseUrl}/Message/my-messages`\r\n    );\r\n  }\r\n\r\n  sendAdminReply(\r\n    playerId: string,\r\n    message: string\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/Message/reply/${playerId}`,\r\n      { Content: message }\r\n    );\r\n  }\r\n}\r\n","import { environment } from './../../../environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CommonResponse, NoteResponse } from 'src/app/models/interfaces';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NoteService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient, private cacheService: CacheService) {}\r\n\r\n  sendNote(message: string): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(`${this.baseUrl}/note/write`, {\r\n      Content: message,\r\n    });\r\n  }\r\n\r\n  getNotes(): Observable<NoteResponse> {\r\n    return this.http.get<NoteResponse>(`${this.baseUrl}/note/notes`);\r\n  }\r\n\r\n  // Admin-specific method with 30-minute cache\r\n  getAdminNotes(): Observable<NoteResponse> {\r\n    return this.http.get<NoteResponse>(`${this.baseUrl}/note/notes`);\r\n  }\r\n\r\n  toggleMarHide(noteId: number, marked: boolean): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/note/hide/${noteId}`,\r\n      { Marked: marked }\r\n    );\r\n  }\r\n\r\n  DeleteNote(noteId: number, marked: boolean): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/note/delete/${noteId}`,\r\n      { Marked: marked }\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { CommonResponse } from 'src/app/models/interfaces';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PlayerService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  private rankingSubject = new BehaviorSubject<[]>([]);\r\n  ranking$ = this.rankingSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient, private cacheService: CacheService) {}\r\n\r\n  getrank(): Observable<[]> {\r\n    return this.cacheService.cachePlayerRequest(\r\n      'player-ranking',\r\n      this.http\r\n        .get<[]>(`${this.baseUrl}/player/ranking`)\r\n        .pipe(tap((data) => this.rankingSubject.next(data)))\r\n    );\r\n  }\r\n\r\n  getPlayers(): Observable<[]> {\r\n    return this.cacheService.cachePlayerRequest(\r\n      'players-list',\r\n      this.http\r\n        .get<[]>(`${this.baseUrl}/player`)\r\n        .pipe(tap((data) => this.rankingSubject.next(data)))\r\n    );\r\n  }\r\n\r\n  // Admin-specific method with 30-minute cache\r\n  getAdminPlayers(): Observable<[]> {\r\n    return this.http\r\n      .get<[]>(`${this.baseUrl}/player`)\r\n      .pipe(tap((data) => this.rankingSubject.next(data)));\r\n  }\r\n\r\n  addPlayer(fullName: string): Observable<CommonResponse> {\r\n    return this.http\r\n      .post<CommonResponse>(`${this.baseUrl}/player`, { fullName })\r\n      .pipe(\r\n        tap(() => {\r\n          this.cacheService.invalidatePattern('player');\r\n          this.refreshPlayers();\r\n        })\r\n      );\r\n  }\r\n\r\n  deletePlayer(playerId: number): Observable<CommonResponse> {\r\n    return this.http\r\n      .delete<CommonResponse>(`${this.baseUrl}/player/${playerId}`)\r\n      .pipe(\r\n        tap(() => {\r\n          this.cacheService.invalidatePattern('player');\r\n          this.refreshPlayers();\r\n        })\r\n      );\r\n  }\r\n\r\n  refreshRanking() {\r\n    this.cacheService.remove('player-ranking');\r\n    this.http.get<[]>(`${this.baseUrl}/player/ranking`).subscribe((data) => {\r\n      this.rankingSubject.next(data);\r\n    });\r\n  }\r\n\r\n  refreshPlayers() {\r\n    this.cacheService.remove('players-list');\r\n    this.http.get<[]>(`${this.baseUrl}/player`).subscribe((data) => {\r\n      this.rankingSubject.next(data);\r\n    });\r\n  }\r\n\r\n  // Get next update time\r\n  getNextUpdateTime(): Date {\r\n    return this.cacheService.getNextPlayerUpdateTime();\r\n  }\r\n\r\n  // Get last update time for ranking\r\n  getLastRankingUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('player-ranking');\r\n  }\r\n\r\n  // Get last update time for players list\r\n  getLastPlayersUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('players-list');\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { InboxComponent } from '../admin/inbox/inbox.component';\r\nimport { MessageService } from '../core/services/message.service';\r\nimport { AdminDashboardService } from '../core/services/admin-dashboard.service';\r\n\r\n@NgModule({\r\n  declarations: [InboxComponent],\r\n  imports: [CommonModule, FormsModule],\r\n  exports: [InboxComponent],\r\n  providers: [MessageService, AdminDashboardService],\r\n})\r\nexport class SharedModule {}\r\n","var api = 'https://yugiapp.runasp.net/api';\r\n\r\n// api = 'https://localhost:7144/api';\r\n\r\nexport const environment = {\r\n  production: false,\r\n\r\n  apiUrl: api,\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { authGuard } from './core/guards/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'player', pathMatch: 'full' },\r\n  {\r\n    path: 'player',\r\n    loadChildren: () =>\r\n      import('./player/player.module').then((m) => m.PlayerModule),\r\n    data: { title: 'Players' },\r\n  },\r\n  {\r\n    path: 'auth',\r\n    loadChildren: () => import('./auth/auth.module').then((m) => m.AuthModule),\r\n    data: { title: 'Auth' },\r\n  },\r\n  {\r\n    path: 'admin',\r\n    loadChildren: () =>\r\n      import('./admin/admin.module').then((m) => m.AdminModule),\r\n    canActivate: [authGuard],\r\n    data: { title: 'Admin' },\r\n  },\r\n  { path: '**', redirectTo: 'player' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { CanActivateFn } from '@angular/router';\r\nimport { inject } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\nexport const authGuard: CanActivateFn = (route, state) => {\r\n  const authService = inject(AuthService);\r\n  const token = localStorage.getItem('token');\r\n  \r\n  return !!token;\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TitleStrategyService {\r\n  private readonly defaultTitle = 'Yugi-Oh Tournament';\r\n\r\n  constructor(private title: Title, private router: Router) {\r\n    console.log('TitleStrategyService initialized');\r\n    // Set initial title\r\n    this.title.setTitle(this.defaultTitle);\r\n    this.setupTitleUpdates();\r\n  }\r\n\r\n  private setupTitleUpdates(): void {\r\n    console.log('Setting up title updates');\r\n    this.router.events\r\n      .pipe(filter((event) => event instanceof NavigationEnd))\r\n      .subscribe((event) => {\r\n        console.log('NavigationEnd event:', event);\r\n        // Add a small delay to ensure route data is available\r\n        setTimeout(() => {\r\n          this.updateTitle();\r\n        }, 50);\r\n      });\r\n  }\r\n\r\n  private updateTitle(): void {\r\n    console.log('Updating title...');\r\n    const currentRoute = this.getCurrentRoute();\r\n    console.log('Current route:', currentRoute);\r\n    console.log('Current route data:', currentRoute?.snapshot?.data);\r\n\r\n    if (currentRoute?.snapshot?.data?.['title']) {\r\n      const newTitle = currentRoute.snapshot.data['title'];\r\n      console.log('Setting title to:', newTitle);\r\n      this.title.setTitle(newTitle);\r\n    } else {\r\n      console.log('Setting default title:', this.defaultTitle);\r\n      this.title.setTitle(this.defaultTitle);\r\n    }\r\n  }\r\n\r\n  private getCurrentRoute(): any {\r\n    let route = this.router.routerState.root;\r\n\r\n    // Navigate through all child routes to find the deepest one\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n\r\n    // Also check the current activated route for additional data\r\n    let currentActivatedRoute = this.router.routerState.root;\r\n    while (currentActivatedRoute.firstChild) {\r\n      currentActivatedRoute = currentActivatedRoute.firstChild;\r\n    }\r\n\r\n    console.log('Final route:', route);\r\n    console.log('Current activated route:', currentActivatedRoute);\r\n\r\n    // Try to get title from the deepest route first\r\n    if (route?.snapshot?.data?.['title']) {\r\n      return route;\r\n    }\r\n\r\n    // If no title in deepest route, check the activated route\r\n    if (currentActivatedRoute?.snapshot?.data?.['title']) {\r\n      return currentActivatedRoute;\r\n    }\r\n\r\n    // If still no title, return the deepest route\r\n    return route;\r\n  }\r\n\r\n  setTitle(title: string): void {\r\n    if (title) {\r\n      const newTitle = title;\r\n      console.log('Manual title set to:', newTitle);\r\n      this.title.setTitle(newTitle);\r\n    } else {\r\n      console.log('Setting default title:', this.defaultTitle);\r\n      this.title.setTitle(this.defaultTitle);\r\n    }\r\n  }\r\n}\r\n","<div\r\n  #navbarContainer\r\n  class=\"fixed top-0 left-0 w-full z-50 bg-black backdrop-blur-sm transition-all duration-300\"\r\n>\r\n  <nav #navbarOnly>\r\n    <div\r\n      class=\"container mx-auto flex flex-col md:flex-row md:items-center md:justify-between p-2\"\r\n    >\r\n      <!-- Row with 3 sections: logo | menu | auth -->\r\n      <div class=\"w-full flex items-center justify-between md:gap-4\">\r\n        <!-- Left: Logo + Send Message (mobile) -->\r\n        <div class=\"flex items-center gap-4\">\r\n          <a\r\n            class=\"text-xl font-bold bg-gradient-to-r from-indigo-400 to-cyan-400 text-transparent bg-clip-text\"\r\n            *ngIf=\"!isAdmin\"\r\n          >\r\n            YuGi Tournament\r\n          </a>\r\n          <a\r\n            *ngIf=\"isAdmin\"\r\n            routerLink=\"/admin/players\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 font-bold\"\r\n          >\r\n            Admin Dashboard\r\n          </a>\r\n          <a\r\n            *ngIf=\"isAdmin\"\r\n            routerLink=\"/admin/friendlies\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 font-bold\"\r\n          >\r\n            Friendlies\r\n          </a>\r\n\r\n          <!-- Send Message (small screen only) -->\r\n          <a\r\n            *ngIf=\"isLoggedIn && !isAdmin\"\r\n            routerLink=\"/player/inbox\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"md:hidden font-bold text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 cursor-pointer\"\r\n          >\r\n            Inbox\r\n          </a>\r\n        </div>\r\n\r\n        <!-- Center: Navigation links -->\r\n        <div class=\"hidden md:flex justify-center space-x-2 font-bold\">\r\n          <a\r\n            routerLink=\"/player/friendlies\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            🎮 Friendlies\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/teams\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            👥 Teams\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/forbidden\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            Forbidden Cards\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/allLeagues\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            All Leagues\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/league-table\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            League Table\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/ranking\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            Ranking\r\n          </a>\r\n        </div>\r\n\r\n        <!-- Right: Auth Buttons -->\r\n        <div class=\"hidden md:flex justify-end items-center space-x-4\">\r\n          <!-- Send Message (only on large screens) -->\r\n          <a\r\n            *ngIf=\"isLoggedIn && !isAdmin\"\r\n            routerLink=\"/player/inbox\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white font-bold hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 cursor-pointer\"\r\n          >\r\n            Inbox\r\n          </a>\r\n\r\n          <ng-container *ngIf=\"!isLoggedIn\">\r\n            <a\r\n              routerLink=\"/auth/login\"\r\n              routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n              class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            >\r\n              Login\r\n            </a>\r\n            <a\r\n              routerLink=\"/auth/register\"\r\n              routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n              class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            >\r\n              Register\r\n            </a>\r\n          </ng-container>\r\n\r\n          <a\r\n            *ngIf=\"isLoggedIn\"\r\n            (click)=\"logout()\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 cursor-pointer\"\r\n          >\r\n            Logout\r\n          </a>\r\n        </div>\r\n\r\n        <!-- Hamburger Button (small screen only) -->\r\n        <div class=\"md:hidden\">\r\n          <button (click)=\"toggleMenu()\" class=\"text-white ml-2\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              class=\"h-6 w-6\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"2\"\r\n            >\r\n              <path\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                d=\"M4 6h16M4 12h16M4 18h16\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Mobile Menu (below full row) -->\r\n      <div\r\n        class=\"w-full mt-4 md:hidden\"\r\n        [ngClass]=\"{ block: isMenuOpen, hidden: !isMenuOpen }\"\r\n      >\r\n        <div class=\"flex flex-col space-y-2 font-bold text-center\">\r\n          <a\r\n            routerLink=\"/player/friendlies\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            🎮 Friendlies\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/teams\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            👥 Teams\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/forbidden\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            Forbidden Cards\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/allLeagues\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            All Leagues\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/league-table\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            League Table\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/ranking\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            Ranking\r\n          </a>\r\n\r\n          <ng-container *ngIf=\"!isLoggedIn\">\r\n            <a\r\n              routerLink=\"/auth/login\"\r\n              class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n              (click)=\"closeMenu()\"\r\n            >\r\n              Login\r\n            </a>\r\n            <a\r\n              routerLink=\"/auth/register\"\r\n              class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n              (click)=\"closeMenu()\"\r\n            >\r\n              Register\r\n            </a>\r\n          </ng-container>\r\n\r\n          <a\r\n            *ngIf=\"isLoggedIn\"\r\n            (click)=\"logout(); closeMenu()\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 cursor-pointer\"\r\n          >\r\n            Logout\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</div>\r\n\r\n<!-- Notes Section - خارج النافبار الثابت -->\r\n<div\r\n  class=\"fixed w-full z-40 bg-black/10 backdrop-blur-sm\"\r\n  [style.top.px]=\"getNavbarOnlyHeight()\"\r\n  *ngIf=\"notes.length > 0\"\r\n>\r\n  <div class=\"min-h-[30px] w-full\">\r\n    <div *ngFor=\"let note of notes\" class=\"py-1\">\r\n      <h4 class=\"text-center text-[16px] text-white font-bold\">\r\n        {{ note.content }}\r\n      </h4>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {\r\n  Component,\r\n  HostListener,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { AuthService } from '../../app/core/services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { NoteService } from '../core/services/note.service';\r\nimport { Note } from '../models/interfaces';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css'],\r\n})\r\nexport class NavbarComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('navbarContainer', { static: false }) navbarContainer!: ElementRef;\r\n  @ViewChild('navbarOnly', { static: false }) navbarOnly!: ElementRef;\r\n  @Output() navbarHeightChange = new EventEmitter<number>();\r\n\r\n  isLoggedIn = false;\r\n  isAdmin = false;\r\n  notes: Note[] = [];\r\n  isMenuOpen = false;\r\n  navbarHeight = 80; // default height\r\n  navbarOnlyHeight = 60; // navbar without notes\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastr: ToastrService,\r\n    private noteService: NoteService\r\n  ) {\r\n    this.authService.isLoggedIn$.subscribe((loggedIn) => {\r\n      this.isLoggedIn = loggedIn;\r\n      const role = this.authService.getRole();\r\n      this.isAdmin = role === 'Admin';\r\n    });\r\n  }\r\n  ngOnInit(): void {\r\n    this.getNotes();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.calculateNavbarHeight();\r\n  }\r\n\r\n  calculateNavbarHeight(): void {\r\n    setTimeout(() => {\r\n      // Calculate navbar only height\r\n      if (this.navbarOnly) {\r\n        this.navbarOnlyHeight = this.navbarOnly.nativeElement.offsetHeight;\r\n      }\r\n\r\n      // Calculate total height including notes\r\n      const notesHeight = this.notes.length * 32; // approximate height per note\r\n      const totalHeight = this.navbarOnlyHeight + notesHeight;\r\n      this.navbarHeight = totalHeight;\r\n      this.navbarHeightChange.emit(totalHeight);\r\n    }, 150);\r\n  }\r\n\r\n  getNavbarOnlyHeight(): number {\r\n    return this.navbarOnlyHeight;\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n    this.toastr.success('تم تسجيل الخروج بنجاح');\r\n    this.router.navigate(['/player']);\r\n  }\r\n\r\n  getNotes(): void {\r\n    this.noteService.getNotes().subscribe((response) => {\r\n      // Handle if response.notes is wrapped in an object or not an array\r\n      const notes = Array.isArray(response.notes)\r\n        ? response.notes\r\n        : (response.notes as any)?.data || [];\r\n      this.notes = notes.filter((n: Note) => n.isHidden == false);\r\n      // Recalculate height after notes change\r\n      setTimeout(() => this.calculateNavbarHeight(), 50);\r\n    });\r\n  }\r\n  toggleMenu() {\r\n    this.isMenuOpen = !this.isMenuOpen;\r\n  }\r\n\r\n  closeMenu() {\r\n    this.isMenuOpen = false;\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event: any) {\r\n    this.calculateNavbarHeight();\r\n  }\r\n}\r\n","<app-navbar (navbarHeightChange)=\"onNavbarHeightChange($event)\"></app-navbar>\r\n<div\r\n  [style.margin-top.px]=\"navbarHeight\"\r\n  [style.min-height]=\"'calc(100vh - ' + navbarHeight + 'px)'\"\r\n  class=\"relative\"\r\n>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n\r\n<!-- Floating Admin Inbox Button (Draggable) -->\r\n<div\r\n  *ngIf=\"isAdmin\"\r\n  class=\"fixed z-50 cursor-pointer select-none\"\r\n  [style.left.px]=\"buttonPosition.x\"\r\n  [style.top.px]=\"buttonPosition.y\"\r\n  [class.dragging]=\"isDragging\"\r\n  (mousedown)=\"onButtonMouseDown($event)\"\r\n  (touchstart)=\"onButtonTouchStart($event)\"\r\n  (click)=\"toggleInboxOverlay()\"\r\n>\r\n  <div\r\n    class=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center hover:scale-110 floating-button relative group border-2 border-blue-400\"\r\n    [class.shadow-2xl]=\"isDragging\"\r\n  >\r\n    <i class=\"fa-solid fa-comments text-lg text-white\"></i>\r\n\r\n    <!-- Tooltip -->\r\n    <div\r\n      class=\"absolute bottom-full right-0 mb-2 px-3 py-2 bg-gray-800 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap pointer-events-none tooltip\"\r\n    >\r\n      Admin Inbox (Drag to move)\r\n      <div\r\n        class=\"absolute top-full right-4 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-800\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Inbox Component Overlay -->\r\n<div\r\n  *ngIf=\"isAdmin && showInboxOverlay\"\r\n  class=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center pt-[50px] sm:p-4\"\r\n  (click)=\"closeInboxOverlay()\"\r\n>\r\n  <div\r\n    class=\"bg-gray-900 rounded-lg shadow-2xl overflow-hidden overlay-enter\"\r\n    (click)=\"$event.stopPropagation()\"\r\n    style=\"min-width: 280px; min-height: 400px\"\r\n  >\r\n    <!-- Overlay Header -->\r\n    <div\r\n      class=\"bg-gray-800 p-4 border-b border-gray-600 flex items-center justify-between\"\r\n    >\r\n      <div class=\"flex items-center\">\r\n        <i class=\"fa-solid fa-inbox text-white mr-3 text-xl\"></i>\r\n        <h2 class=\"text-xl font-bold text-white\">Admin Inbox</h2>\r\n      </div>\r\n      <button\r\n        (click)=\"closeInboxOverlay()\"\r\n        class=\"text-gray-400 hover:text-white transition-colors p-2 rounded-lg hover:bg-gray-700\"\r\n        title=\"Close\"\r\n      >\r\n        <i class=\"fa-solid fa-times text-xl\"></i>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Inbox Component Container -->\r\n    <div class=\"h-full overflow-hidden\">\r\n      <!-- Direct app-inbox component -->\r\n      <app-inbox></app-inbox>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<ngx-spinner\r\n  bdColor=\"rgba(0, 0, 0, 1)\"\r\n  size=\"medium\"\r\n  color=\"#fff\"\r\n  type=\"square-jelly-box\"\r\n  [fullScreen]=\"true\"\r\n  ><p style=\"color: white\">Loading...</p></ngx-spinner\r\n>\r\n","import { Component, OnInit, OnDestroy, HostListener } from '@angular/core';\r\nimport { TitleStrategyService } from './core/services/title-strategy.service';\r\nimport { AuthService } from './core/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  title = 'Yugi-Oh Tournament';\r\n  navbarHeight = 80; // default height\r\n\r\n  // Floating admin inbox properties\r\n  isAdmin = false;\r\n  showInboxOverlay = false;\r\n  buttonPosition = { x: 20, y: 20 };\r\n  isDragging = false;\r\n  dragOffset = { x: 0, y: 0 };\r\n  hasMovedDuringDrag = false;\r\n  unreadCount = 0; // Number of unread messages\r\n\r\n  constructor(\r\n    private titleStrategy: TitleStrategyService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Initialize title strategy with a small delay to ensure router is ready\r\n    setTimeout(() => {\r\n      this.titleStrategy.setTitle('');\r\n    }, 100);\r\n\r\n    // Check if user is admin\r\n    this.checkAdminStatus();\r\n\r\n    // Set initial position for floating button (bottom-right corner)\r\n    this.setInitialButtonPosition();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // Clean up\r\n    this.isDragging = false;\r\n    this.showInboxOverlay = false;\r\n    document.body.style.cursor = 'default';\r\n    document.body.classList.remove('dragging');\r\n\r\n    // Remove any global event listeners\r\n    document.removeEventListener(\r\n      'mousemove',\r\n      this.onGlobalMouseMove.bind(this)\r\n    );\r\n    document.removeEventListener('mouseup', this.onGlobalMouseUp.bind(this));\r\n  }\r\n\r\n  checkAdminStatus(): void {\r\n    try {\r\n      const role = this.authService.getRole();\r\n      this.isAdmin = role === 'Admin';\r\n    } catch (error) {\r\n      console.warn('Error checking admin status:', error);\r\n      this.isAdmin = false;\r\n    }\r\n  }\r\n\r\n  toggleInboxOverlay(): void {\r\n    // Only toggle if not dragging and didn't move during drag\r\n    if (!this.isDragging && !this.hasMovedDuringDrag) {\r\n      this.showInboxOverlay = !this.showInboxOverlay;\r\n\r\n      // Fix navbar height for overlay after component is rendered\r\n      if (this.showInboxOverlay) {\r\n        setTimeout(() => {\r\n          this.fixInboxComponentForOverlay();\r\n        }, 100);\r\n      }\r\n    }\r\n  }\r\n\r\n  fixInboxComponentForOverlay(): void {\r\n    // Find the inbox component and reset its navbarHeight\r\n    const inboxElement = document.querySelector('.overlay-enter app-inbox');\r\n    if (inboxElement) {\r\n      // Reset inline styles that depend on navbarHeight\r\n      const elementsWithMarginTop = inboxElement.querySelectorAll(\r\n        '[style*=\"margin-top\"]'\r\n      );\r\n      elementsWithMarginTop.forEach((el: any) => {\r\n        el.style.marginTop = '0px';\r\n      });\r\n\r\n      const elementsWithTop = inboxElement.querySelectorAll('[style*=\"top\"]');\r\n      elementsWithTop.forEach((el: any) => {\r\n        el.style.top = '0px';\r\n      });\r\n    }\r\n  }\r\n\r\n  closeInboxOverlay(): void {\r\n    this.showInboxOverlay = false;\r\n  }\r\n\r\n  setInitialButtonPosition(): void {\r\n    // Try to load saved position from localStorage\r\n    const savedPosition = localStorage.getItem('adminInboxButtonPosition');\r\n\r\n    if (savedPosition) {\r\n      try {\r\n        const parsedPosition = JSON.parse(savedPosition);\r\n        // Validate the saved position is within current screen bounds\r\n        const margin = 24;\r\n        const buttonSize = 48;\r\n        const maxX = window.innerWidth - buttonSize - margin;\r\n        const maxY = window.innerHeight - buttonSize - margin;\r\n\r\n        if (\r\n          parsedPosition.x >= margin &&\r\n          parsedPosition.x <= maxX &&\r\n          parsedPosition.y >= margin &&\r\n          parsedPosition.y <= maxY\r\n        ) {\r\n          this.buttonPosition = parsedPosition;\r\n          return;\r\n        }\r\n      } catch (error) {\r\n        console.warn('Error parsing saved button position:', error);\r\n      }\r\n    }\r\n\r\n    // Fallback to default position (bottom-right corner)\r\n    const margin = 24;\r\n    const buttonSize = 48;\r\n    const maxX = window.innerWidth - buttonSize - margin;\r\n    const maxY = window.innerHeight - buttonSize - margin;\r\n\r\n    this.buttonPosition = {\r\n      x: Math.max(margin, maxX),\r\n      y: Math.max(margin, maxY),\r\n    };\r\n  }\r\n\r\n  // Dragging functionality for the floating button\r\n  onButtonMouseDown(event: MouseEvent): void {\r\n    this.isDragging = true;\r\n    this.hasMovedDuringDrag = false; // Reset movement flag\r\n    this.dragOffset = {\r\n      x: event.clientX - this.buttonPosition.x,\r\n      y: event.clientY - this.buttonPosition.y,\r\n    };\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    document.body.style.cursor = 'grabbing';\r\n\r\n    // Add dragging class to body for global styling\r\n    document.body.classList.add('dragging');\r\n  }\r\n\r\n  // Touch support for mobile devices\r\n  onButtonTouchStart(event: TouchEvent): void {\r\n    this.isDragging = true;\r\n    this.hasMovedDuringDrag = false; // Reset movement flag\r\n\r\n    const touch = event.touches[0];\r\n    this.dragOffset = {\r\n      x: touch.clientX - this.buttonPosition.x,\r\n      y: touch.clientY - this.buttonPosition.y,\r\n    };\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    document.body.style.cursor = 'grabbing';\r\n    document.body.classList.add('dragging');\r\n  }\r\n\r\n  @HostListener('document:mousemove', ['$event'])\r\n  onGlobalMouseMove(event: MouseEvent): void {\r\n    if (this.isDragging) {\r\n      requestAnimationFrame(() => {\r\n        const newX = event.clientX - this.dragOffset.x;\r\n        const newY = event.clientY - this.dragOffset.y;\r\n\r\n        // Check if position actually changed (moved more than 5px)\r\n        const oldX = this.buttonPosition.x;\r\n        const oldY = this.buttonPosition.y;\r\n\r\n        // Boundary limits (prevent going outside screen)\r\n        const margin = 24;\r\n        const buttonSize = 48; // Updated button size\r\n        const maxX = window.innerWidth - buttonSize - margin;\r\n        const maxY = window.innerHeight - buttonSize - margin;\r\n\r\n        const finalX = Math.max(margin, Math.min(newX, maxX));\r\n        const finalY = Math.max(margin, Math.min(newY, maxY));\r\n\r\n        // If moved more than 5px, consider it a drag\r\n        if (Math.abs(finalX - oldX) > 5 || Math.abs(finalY - oldY) > 5) {\r\n          this.hasMovedDuringDrag = true;\r\n        }\r\n\r\n        this.buttonPosition = {\r\n          x: finalX,\r\n          y: finalY,\r\n        };\r\n\r\n        // Save new position to localStorage\r\n        this.saveButtonPosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('document:touchmove', ['$event'])\r\n  onGlobalTouchMove(event: TouchEvent): void {\r\n    if (this.isDragging) {\r\n      requestAnimationFrame(() => {\r\n        const touch = event.touches[0];\r\n        const newX = touch.clientX - this.dragOffset.x;\r\n        const newY = touch.clientY - this.dragOffset.y;\r\n\r\n        // Check if position actually changed (moved more than 5px)\r\n        const oldX = this.buttonPosition.x;\r\n        const oldY = this.buttonPosition.y;\r\n\r\n        // Boundary limits (prevent going outside screen)\r\n        const margin = 24;\r\n        const buttonSize = 48; // Updated button size\r\n        const maxX = window.innerWidth - buttonSize - margin;\r\n        const maxY = window.innerHeight - buttonSize - margin;\r\n\r\n        const finalX = Math.max(margin, Math.min(newX, maxX));\r\n        const finalY = Math.max(margin, Math.min(newY, maxY));\r\n\r\n        // If moved more than 5px, consider it a drag\r\n        if (Math.abs(finalX - oldX) > 5 || Math.abs(finalY - oldY) > 5) {\r\n          this.hasMovedDuringDrag = true;\r\n        }\r\n\r\n        this.buttonPosition = {\r\n          x: finalX,\r\n          y: finalY,\r\n        };\r\n\r\n        // Save new position to localStorage\r\n        this.saveButtonPosition();\r\n      });\r\n    }\r\n  }\r\n\r\n  @HostListener('document:mouseup')\r\n  onGlobalMouseUp(): void {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n      document.body.style.cursor = 'default';\r\n      document.body.classList.remove('dragging');\r\n\r\n      // Reset movement flag after a short delay to prevent accidental clicks\r\n      setTimeout(() => {\r\n        this.hasMovedDuringDrag = false;\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  @HostListener('document:touchend')\r\n  onGlobalTouchEnd(): void {\r\n    if (this.isDragging) {\r\n      this.isDragging = false;\r\n      document.body.style.cursor = 'default';\r\n      document.body.classList.remove('dragging');\r\n\r\n      // Reset movement flag after a short delay to prevent accidental clicks\r\n      setTimeout(() => {\r\n        this.hasMovedDuringDrag = false;\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  @HostListener('window:resize')\r\n  onWindowResize(): void {\r\n    // Adjust button position if outside new screen bounds\r\n    const margin = 24;\r\n    const buttonSize = 48; // Updated button size\r\n    const maxX = window.innerWidth - buttonSize - margin;\r\n    const maxY = window.innerHeight - buttonSize - margin;\r\n\r\n    this.buttonPosition = {\r\n      x: Math.max(margin, Math.min(this.buttonPosition.x, maxX)),\r\n      y: Math.max(margin, Math.min(this.buttonPosition.y, maxY)),\r\n    };\r\n  }\r\n\r\n  @HostListener('document:keydown.escape')\r\n  onEscapeKey(): void {\r\n    if (this.showInboxOverlay) {\r\n      this.showInboxOverlay = false;\r\n    }\r\n  }\r\n\r\n  onNavbarHeightChange(height: number): void {\r\n    this.navbarHeight = height;\r\n  }\r\n\r\n  // Save button position to localStorage\r\n  private saveButtonPosition(): void {\r\n    try {\r\n      localStorage.setItem(\r\n        'adminInboxButtonPosition',\r\n        JSON.stringify(this.buttonPosition)\r\n      );\r\n    } catch (error) {\r\n      console.warn('Error saving button position to localStorage:', error);\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private spinner: NgxSpinnerService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    this.spinner.show();\r\n\r\n    const token = localStorage.getItem('token');\r\n    let clonedReq = req;\r\n\r\n    if (token) {\r\n      clonedReq = req.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(clonedReq).pipe(\r\n      finalize(() => {\r\n        this.spinner.hide();\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { CacheService } from '../services/cache.service';\r\n\r\n@Injectable()\r\nexport class CacheInterceptor implements HttpInterceptor {\r\n  constructor(private cacheService: CacheService) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    \r\n    // Check if this is a GET request and should be cached\r\n    if (request.method === 'GET' && this.shouldCache(request.url)) {\r\n      const cachedResponse = this.cacheService.get(request.url);\r\n      if (cachedResponse) {\r\n        return of(new HttpResponse({ body: cachedResponse }));\r\n      }\r\n    }\r\n    \r\n    return next.handle(request);\r\n  }\r\n\r\n  private shouldCache(url: string): boolean {\r\n    // Add URLs that should be cached\r\n    const cacheableUrls = [\r\n      '/player/ranking',\r\n      '/player',\r\n      '/match',\r\n      '/Message/inbox',\r\n      '/note/notes',\r\n      '/player/players/all',\r\n      '/league/getCurrentLeague'\r\n    ];\r\n    \r\n    return cacheableUrls.some(cacheableUrl => url.includes(cacheableUrl));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule, Title } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { AuthInterceptor } from './interceptors/auth-interceptor.service';\r\nimport { CacheInterceptor } from './core/interceptors/cache-interceptor.service';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\nimport { TitleStrategyService } from './core/services/title-strategy.service';\r\nimport { SharedModule } from './shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, NavbarComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    NoopAnimationsModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 3000,\r\n      positionClass: 'toast-top-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    NgxSpinnerModule.forRoot({ type: 'square-jelly-box' }),\r\n    SharedModule,\r\n  ],\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\r\n    { provide: HTTP_INTERCEPTORS, useClass: CacheInterceptor, multi: true },\r\n    NgxSpinnerModule,\r\n    Title,\r\n    TitleStrategyService,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch((err) => {});\r\n"],"x_google_ignoreList":[]}