{"version":3,"file":"main.ee805ff763946ff0.js","mappings":"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","names":["AdminDashboardService","constructor","playerService","matchService","leagueService","messageService","noteService","this","essentialDataCache$","BehaviorSubject","secondaryDataCache","Map","lastEssentialUpdate","lastSecondaryUpdate","CACHE_DURATION","SECONDARY_CACHE_DURATION","getEssentialData","forceRefresh","now","Date","value","asObservable","pipe","filter","data","loadEssentialDataFromServer","tap","next","catchError","error","of","getEmptyDashboardData","shareReplay","getSecondaryData","type","lastUpdate","get","hasValidCache","has","loadSecondaryDataFromServer","set","forkJoin","players","getAdminPlayers","matches","getAdminMatches","currentLeague","getAdminCurrentLeague","map","response","league","allLeagues","getAdminAllLeagues","notes","getAdminNotes","messages","getAdminMessages","messagesList","Array","isArray","stats","totalPlayers","length","totalMatches","totalMatchesLeft","m","isCompleted","totalMessagesLeft","isRead","isFromAdmin","invalidateCache","delete","clear","getCurrentEssentialData","updateMessageCount","count","current","i0","i1","i2","i3","i4","i5","factory","ɵfac","providedIn","AuthService","http","router","baseUrl","environment","apiUrl","isLoggedInSubject","hasToken","isLoggedIn$","userRole","token","localStorage","getItem","getRoleFromToken","login","email","password","post","success","setItem","navigate","playerLogin","phoneNumber","extractedRole","register","firstName","lastName","resetPassword","newPassword","logout","removeItem","getRole","JSON","parse","atob","split","role","CacheService","cache","DEFAULT_TTL","PLAYER_TTL","LEAGUE_TTL","RANKINGS_TTL","loadFromLocalStorage","key","ttl","item","timestamp","saveToLocalStorage","remove","cacheRequest","request","cached","cachePlayerRequest","cacheLeagueRequest","cacheRankingsRequest","cacheAllLeaguesRequest","createdOn","sortedData","sort","a","b","dateA","getTime","invalidatePattern","pattern","keys","includes","getNextPlayerUpdateTime","getFullYear","getMonth","getDate","getHours","getLastUpdateTime","isCacheExpired","getCacheExpiryTime","shouldRefreshRankings","shouldRefreshCurrentLeague","cacheData","from","entries","stringify","LeagueService","cacheService","resetLeague","LeagueId","startLeague","dto","GetCurrentLeague","GetAllLeaguesRank","DeleteLeague","leagueId","createGroupsAndMatches","startKnockoutStage","startSemiFinals","startFinal","getLastLeaguesRankUpdateTime","getLastCurrentLeagueUpdateTime","isRankingsCacheExpired","isCurrentLeagueCacheExpired","getNextRankingsUpdateTime","getNextCurrentLeagueUpdateTime","forceRefreshRankings","forceRefreshCurrentLeague","MatchService","getMatches","updateMatch","matchId","winnerId","refreshPlayers","resetMatch","getLastMatchesUpdateTime","MessageService","sendMessage","message","Content","getMessages","toggleMarkMessage","messageId","marked","Marked","toggleDeleteMessage","getPlayerMessages","sendAdminReply","playerId","NoteService","sendNote","getNotes","toggleMarHide","noteId","DeleteNote","PlayerService","rankingSubject","ranking$","getrank","getPlayers","addPlayer","fullName","deletePlayer","refreshRanking","subscribe","getNextUpdateTime","getLastRankingUpdateTime","getLastPlayersUpdateTime","SharedModule","imports","CommonModule","FormsModule","production","routes","path","redirectTo","pathMatch","loadChildren","__webpack_require__","e","then","bind","PlayerModule","title","AuthModule","Promise","all","AdminModule","canActivate","authGuard","route","state","authService","inject","AppRoutingModule","RouterModule","forRoot","TitleStrategyService","defaultTitle","setTitle","setupTitleUpdates","events","event","NavigationEnd","setTimeout","updateTitle","currentRoute","getCurrentRoute","snapshot","routerState","root","firstChild","currentActivatedRoute","$event","_r3","ctx_r2","onButtonMouseDown","ctx_r4","onButtonTouchStart","ctx_r5","onButtonTouchEnd","ctx_r6","toggleInboxOverlay","ctx_r0","buttonPosition","x","y","isDragging","chat_r10","unreadCount","_r14","$implicit","ctx_r13","selectChat","FloatingInboxComponent_div_1_div_10_div_8_div_10_Template","playerFullName","lastMessage","lastMessageDate","_r16","ctx_r15","refreshMessages","FloatingInboxComponent_div_1_div_10_div_8_Template","ctx_r7","playerChats","_r23","message_r19","ctx_r21","markAsRead","id","FloatingInboxComponent_div_1_div_11_div_8_div_7_Template","_c1","_c2","content","sentAt","_r25","ctx_r24","goBack","FloatingInboxComponent_div_1_div_11_div_8_Template","ctx_r26","replyText","ctx_r27","sendReply","selectedChat","ctx_r28","ctx_r8","trackByMessageId","_r30","ctx_r29","closeInboxOverlay","stopPropagation","ctx_r32","FloatingInboxComponent_div_1_div_10_Template","FloatingInboxComponent_div_1_div_11_Template","ctx_r1","FloatingInboxComponent","toastr","cdr","adminDashboardService","isAdmin","showInboxOverlay","dragOffset","hasMovedDuringDrag","isMobile","selectedPlayerId","navbarHeight","shouldScrollToBottom","CACHE_KEY","cachedMessages","lastCacheUpdate","ngOnInit","checkAdminStatus","setInitialButtonPosition","loadAdminMessages","ngAfterViewInit","ngAfterViewChecked","messagesContainer","scrollToBottom","ngOnDestroy","document","body","style","cursor","classList","updateStatusSubscription","unsubscribe","refreshSubscription","removeEventListener","onGlobalMouseMove","onGlobalMouseUp","console","warn","fixInboxComponentForOverlay","inboxElement","querySelector","querySelectorAll","forEach","el","marginTop","top","savedPosition","parsedPosition","margin","buttonSize","maxX","window","innerWidth","maxY","innerHeight","Math","max","clientX","clientY","preventDefault","add","touch","touches","requestAnimationFrame","newY","oldX","oldY","finalX","min","finalY","abs","saveButtonPosition","onGlobalTouchMove","onGlobalTouchEnd","target","closest","onWindowResize","onEscapeKey","saveToCache","loadFromCache","cachedData","parsed","isCacheValid","getCacheStatus","isValid","age","floor","clearCache","updateCacheWithNewData","newMessages","newMessage","existingChat","find","chat","senderId","some","msg","push","senderFullName","loadFromServer","isBackgroundRefresh","groupedMessages","groupMessagesBySender","err","detectChanges","markUnreadMessagesAsRead","loadChatMessages","playerMessages","unreadMessages","chatInList","c","scrollToTop","scrollTop","nativeElement","scrollHeight","chatMap","values","trim","replyContent","newReply","toISOString","index","selectors","viewQuery","rf","ctx","FloatingInboxComponent_div_0_Template","FloatingInboxComponent_div_1_Template","_r13","ctx_r12","_r15","ctx_r14","closeMenu","ctx_r16","_r18","ctx_r17","note_r20","NavbarComponent_div_48_div_2_Template","ctx_r11","getNavbarOnlyHeight","NavbarComponent","navbarHeightChange","EventEmitter","isLoggedIn","isMenuOpen","navbarOnlyHeight","loggedIn","calculateNavbarHeight","navbarOnly","offsetHeight","totalHeight","emit","n","isHidden","toggleMenu","onResize","NavbarComponent_a_7_Template","NavbarComponent_a_8_Template","NavbarComponent_a_9_Template","NavbarComponent_a_10_Template","NavbarComponent_a_25_Template","NavbarComponent_ng_container_26_Template","NavbarComponent_a_27_Template","NavbarComponent_ng_container_46_Template","NavbarComponent_a_47_Template","NavbarComponent_div_48_Template","AppComponent","titleStrategy","onNavbarHeightChange","height","decls","vars","consts","template","AuthInterceptor","spinner","intercept","req","show","clonedReq","clone","setHeaders","Authorization","handle","finalize","hide","CacheInterceptor","method","shouldCache","url","cachedResponse","HttpResponse","cacheableUrl","AppModule","bootstrap","provide","HTTP_INTERCEPTORS","useClass","multi","NgxSpinnerModule","Title","BrowserModule","HttpClientModule","NoopAnimationsModule","ToastrModule","timeOut","positionClass","preventDuplicates","__NgCli_bootstrap_1","bootstrapModule","catch"],"sourceRoot":"webpack:///","sources":["./src/app/core/services/admin-dashboard.service.ts","./src/app/core/services/auth.service.ts","./src/app/core/services/cache.service.ts","./src/app/core/services/league.service.ts","./src/app/core/services/match.service.ts","./src/app/core/services/message.service.ts","./src/app/core/services/note.service.ts","./src/app/core/services/player.service.ts","./src/app/shared/shared.module.ts","./src/environments/environment.ts","./src/app/app-routing.module.ts","./src/app/core/guards/auth.guard.ts","./src/app/core/services/title-strategy.service.ts","./src/app/shared/floating-inbox/floating-inbox.component.html","./src/app/shared/floating-inbox/floating-inbox.component.ts","./src/app/navbar/navbar.component.html","./src/app/navbar/navbar.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/interceptors/auth-interceptor.service.ts","./src/app/core/interceptors/cache-interceptor.service.ts","./src/app/app.module.ts","./src/main.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, BehaviorSubject, forkJoin, of } from 'rxjs';\r\nimport { map, tap, catchError, shareReplay, filter } from 'rxjs/operators';\r\nimport { PlayerService } from './player.service';\r\nimport { MatchService } from './match.service';\r\nimport { LeagueService } from './league.service';\r\nimport { MessageService } from './message.service';\r\nimport { NoteService } from './note.service';\r\nimport {\r\n  Player,\r\n  Match,\r\n  League,\r\n  AllLeagueRank,\r\n  Note,\r\n  Message,\r\n} from '../../models/interfaces';\r\n\r\nexport interface AdminDashboardData {\r\n  players: Player[];\r\n  matches: Match[];\r\n  currentLeague: League | null;\r\n  allLeagues: AllLeagueRank[];\r\n  notes: Note[];\r\n  messages: Message[];\r\n  stats: {\r\n    totalPlayers: number;\r\n    totalMatches: number;\r\n    totalMatchesLeft: number;\r\n    totalMessagesLeft: number;\r\n  };\r\n}\r\n\r\nexport interface AdminSecondaryData {\r\n  allLeagues: AllLeagueRank[];\r\n  notes: Note[];\r\n  messages: Message[];\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AdminDashboardService {\r\n  private essentialDataCache$ = new BehaviorSubject<AdminDashboardData | null>(\r\n    null\r\n  );\r\n  private secondaryDataCache = new Map<string, any>();\r\n  private lastEssentialUpdate = 0;\r\n  private lastSecondaryUpdate = new Map<string, number>();\r\n  private readonly CACHE_DURATION = 900000; // 15 minutes\r\n  private readonly SECONDARY_CACHE_DURATION = 900000; // 15 minutes (same as main cache)\r\n\r\n  constructor(\r\n    private playerService: PlayerService,\r\n    private matchService: MatchService,\r\n    private leagueService: LeagueService,\r\n    private messageService: MessageService,\r\n    private noteService: NoteService\r\n  ) {}\r\n\r\n  /**\r\n   * Get essential dashboard data with smart caching\r\n   */\r\n  getEssentialData(forceRefresh = false): Observable<AdminDashboardData> {\r\n    const now = Date.now();\r\n    const hasValidCache =\r\n      this.essentialDataCache$.value &&\r\n      now - this.lastEssentialUpdate < this.CACHE_DURATION;\r\n\r\n    if (!forceRefresh && hasValidCache) {\r\n      return this.essentialDataCache$\r\n        .asObservable()\r\n        .pipe(filter((data): data is AdminDashboardData => data !== null));\r\n    }\r\n\r\n    return this.loadEssentialDataFromServer().pipe(\r\n      tap((data) => {\r\n        this.essentialDataCache$.next(data);\r\n        this.lastEssentialUpdate = now;\r\n      }),\r\n      catchError((error) => {\r\n        // Return cached data if available, otherwise empty state\r\n        return of(\r\n          this.essentialDataCache$.value || this.getEmptyDashboardData()\r\n        );\r\n      }),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get secondary data with smart caching\r\n   */\r\n  getSecondaryData(\r\n    type: 'leagues' | 'notes' | 'messages',\r\n    forceRefresh = false\r\n  ): Observable<any> {\r\n    const now = Date.now();\r\n    const lastUpdate = this.lastSecondaryUpdate.get(type) || 0;\r\n    const hasValidCache =\r\n      this.secondaryDataCache.has(type) &&\r\n      now - lastUpdate < this.SECONDARY_CACHE_DURATION;\r\n\r\n    if (!forceRefresh && hasValidCache) {\r\n      return of(this.secondaryDataCache.get(type));\r\n    }\r\n\r\n    return this.loadSecondaryDataFromServer(type).pipe(\r\n      tap((data) => {\r\n        this.secondaryDataCache.set(type, data);\r\n        this.lastSecondaryUpdate.set(type, now);\r\n      }),\r\n      catchError((error) => {\r\n        // Return cached data if available\r\n        return of(this.secondaryDataCache.get(type) || []);\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load essential data from server using parallel requests\r\n   */\r\n  private loadEssentialDataFromServer(): Observable<AdminDashboardData> {\r\n    return forkJoin({\r\n      players: this.playerService.getAdminPlayers(),\r\n      matches: this.matchService.getAdminMatches(),\r\n      currentLeague: this.leagueService.getAdminCurrentLeague().pipe(\r\n        map((response) => response.league),\r\n        catchError(() => of(null))\r\n      ),\r\n      allLeagues: this.leagueService\r\n        .getAdminAllLeagues()\r\n        .pipe(catchError(() => of([]))),\r\n      notes: this.noteService.getAdminNotes().pipe(\r\n        map((response) => response.notes),\r\n        catchError(() => of([]))\r\n      ),\r\n      messages: this.messageService.getAdminMessages().pipe(\r\n        map((response) => response.messages || []),\r\n        catchError(() => of([]))\r\n      ),\r\n    }).pipe(\r\n      map(\r\n        ({ players, matches, currentLeague, allLeagues, notes, messages }) => {\r\n          const messagesList = Array.isArray(messages) ? messages : [];\r\n          return {\r\n            players: players as Player[],\r\n            matches: matches as Match[],\r\n            currentLeague,\r\n            allLeagues: allLeagues as AllLeagueRank[],\r\n            notes: notes as Note[],\r\n            messages: messagesList as Message[],\r\n            stats: {\r\n              totalPlayers: players.length,\r\n              totalMatches: matches.length,\r\n              totalMatchesLeft: matches.filter((m) => !m.isCompleted).length,\r\n              totalMessagesLeft: messagesList.filter(\r\n                (m: any) => !m.isRead && !m.isFromAdmin\r\n              ).length,\r\n            },\r\n          };\r\n        }\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Load secondary data from server\r\n   */\r\n  private loadSecondaryDataFromServer(type: string): Observable<any> {\r\n    switch (type) {\r\n      case 'leagues':\r\n        return this.leagueService.getAdminAllLeagues();\r\n      case 'notes':\r\n        return this.noteService\r\n          .getAdminNotes()\r\n          .pipe(map((response) => response.notes));\r\n      case 'messages':\r\n        return this.messageService\r\n          .getAdminMessages()\r\n          .pipe(map((response) => response.messages || []));\r\n      default:\r\n        return of([]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update cached data after mutations\r\n   */\r\n  invalidateCache(\r\n    type: 'essential' | 'leagues' | 'notes' | 'messages' | 'all'\r\n  ): void {\r\n    switch (type) {\r\n      case 'essential':\r\n        this.lastEssentialUpdate = 0;\r\n        break;\r\n      case 'leagues':\r\n      case 'notes':\r\n      case 'messages':\r\n        this.lastSecondaryUpdate.set(type, 0);\r\n        this.secondaryDataCache.delete(type);\r\n        break;\r\n      case 'all':\r\n        this.lastEssentialUpdate = 0;\r\n        this.lastSecondaryUpdate.clear();\r\n        this.secondaryDataCache.clear();\r\n        break;\r\n    }\r\n  }\r\n\r\n  // ✅ تم حذف Background refresh تماماً - مالوش لازمة أصلاً\r\n\r\n  /**\r\n   * Get current cached essential data\r\n   */\r\n  getCurrentEssentialData(): AdminDashboardData | null {\r\n    return this.essentialDataCache$.value;\r\n  }\r\n\r\n  /**\r\n   * Update message count in stats\r\n   */\r\n  updateMessageCount(count: number): void {\r\n    const current = this.essentialDataCache$.value;\r\n    if (current) {\r\n      current.stats.totalMessagesLeft = count;\r\n      this.essentialDataCache$.next(current);\r\n    }\r\n  }\r\n\r\n  private getEmptyDashboardData(): AdminDashboardData {\r\n    return {\r\n      players: [],\r\n      matches: [],\r\n      currentLeague: null,\r\n      allLeagues: [],\r\n      notes: [],\r\n      messages: [],\r\n      stats: {\r\n        totalPlayers: 0,\r\n        totalMatches: 0,\r\n        totalMatchesLeft: 0,\r\n        totalMessagesLeft: 0,\r\n      },\r\n    };\r\n  }\r\n}\r\n","import { environment } from './../../../environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { CommonResponse, LoginResponse } from 'src/app/models/interfaces';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private baseUrl = environment.apiUrl;\r\n  private isLoggedInSubject = new BehaviorSubject<boolean>(this.hasToken());\r\n  isLoggedIn$ = this.isLoggedInSubject.asObservable();\r\n  private userRole: string | null = null;\r\n\r\n  constructor(private http: HttpClient, private router: Router) {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      this.userRole = this.getRoleFromToken(token);\r\n      this.isLoggedInSubject.next(true);\r\n    }\r\n  }\r\n\r\n  login(email: string, password: string): Observable<any> {\r\n    return this.http\r\n      .post<any>(`${this.baseUrl}/auth/login`, {\r\n        email,\r\n        password,\r\n      })\r\n      .pipe(\r\n        tap((response) => {\r\n          if (response.success) {\r\n            localStorage.setItem('token', response.token);\r\n            localStorage.setItem('userRole', response.userRole || 'Admin');\r\n            this.userRole = response.userRole || 'Admin';\r\n            this.isLoggedInSubject.next(true);\r\n            this.router.navigate(['/admin']);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  playerLogin(\r\n    phoneNumber: string,\r\n    password: string\r\n  ): Observable<LoginResponse> {\r\n    return this.http\r\n      .post<LoginResponse>(`${this.baseUrl}/auth/player-login`, {\r\n        phoneNumber,\r\n        password,\r\n      })\r\n      .pipe(\r\n        tap((response) => {\r\n          if (response.success && response.token) {\r\n            localStorage.setItem('token', response.token);\r\n            const extractedRole = this.getRoleFromToken(response.token);\r\n            this.userRole = extractedRole || 'Player';\r\n            localStorage.setItem('userRole', this.userRole);\r\n\r\n            this.isLoggedInSubject.next(true);\r\n            this.router.navigate(['/player']);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  register(\r\n    phoneNumber: string,\r\n    password: string,\r\n    firstName: string,\r\n    lastName: string\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/auth/register-player`,\r\n      { phoneNumber, password, firstName, lastName }\r\n    );\r\n  }\r\n\r\n  resetPassword(\r\n    phoneNumber: string,\r\n    newPassword: string\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/auth/reset-password`,\r\n      { phoneNumber, newPassword }\r\n    );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem('token');\r\n    this.userRole = null;\r\n    this.isLoggedInSubject.next(false);\r\n    this.router.navigate(['/player']);\r\n  }\r\n\r\n  getRole(): string | null {\r\n    return this.userRole;\r\n  }\r\n\r\n  private hasToken(): boolean {\r\n    return !!localStorage.getItem('token');\r\n  }\r\n\r\n  private getRoleFromToken(token: string): string | null {\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      const role = payload['role'] || null;\r\n      return role;\r\n    } catch (e) {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { tap, catchError } from 'rxjs/operators';\r\n\r\ninterface CacheItem<T> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number; // Time to live in milliseconds\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CacheService {\r\n  private cache = new Map<string, CacheItem<any>>();\r\n  private readonly DEFAULT_TTL = 5 * 60 * 1000; // 5 minutes default\r\n  private readonly PLAYER_TTL = 30 * 60 * 1000; // 30 minutes for player data\r\n  private readonly LEAGUE_TTL = 30 * 60 * 1000; // 30 minutes for league data\r\n  private readonly RANKINGS_TTL = 30 * 60 * 1000; // 30 minutes for rankings data\r\n\r\n  constructor() {\r\n    this.loadFromLocalStorage();\r\n  }\r\n\r\n  set<T>(key: string, data: T, ttl: number = this.DEFAULT_TTL): void {\r\n    const item = {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl,\r\n    };\r\n\r\n    this.cache.set(key, item);\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  get<T>(key: string): T | null {\r\n    const item = this.cache.get(key);\r\n    if (!item) return null;\r\n\r\n    const isExpired = Date.now() - item.timestamp > item.ttl;\r\n    if (isExpired) {\r\n      this.cache.delete(key);\r\n      this.saveToLocalStorage();\r\n      return null;\r\n    }\r\n\r\n    return item.data;\r\n  }\r\n\r\n  has(key: string): boolean {\r\n    return this.get(key) !== null;\r\n  }\r\n\r\n  clear(): void {\r\n    this.cache.clear();\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  remove(key: string): void {\r\n    this.cache.delete(key);\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  // Helper method to cache HTTP requests\r\n  cacheRequest<T>(\r\n    key: string,\r\n    request: Observable<T>,\r\n    ttl: number = this.DEFAULT_TTL\r\n  ): Observable<T> {\r\n    const cached = this.get<T>(key);\r\n    if (cached) {\r\n      return of(cached);\r\n    }\r\n\r\n    return request.pipe(\r\n      tap((data) => this.set(key, data, ttl)),\r\n      catchError((error) => {\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Cache player data with 30 minutes TTL\r\n  cachePlayerRequest<T>(key: string, request: Observable<T>): Observable<T> {\r\n    return this.cacheRequest(key, request, this.PLAYER_TTL);\r\n  }\r\n\r\n  // Cache league data with 30 minutes TTL\r\n  cacheLeagueRequest<T>(key: string, request: Observable<T>): Observable<T> {\r\n    return this.cacheRequest(key, request, this.LEAGUE_TTL);\r\n  }\r\n\r\n  // Cache rankings data with 30 minutes TTL\r\n  cacheRankingsRequest<T>(key: string, request: Observable<T>): Observable<T> {\r\n    return this.cacheRequest(key, request, this.RANKINGS_TTL);\r\n  }\r\n\r\n  // Cache all-leagues data with 30 minutes TTL and sort by creation date (newest first)\r\n  cacheAllLeaguesRequest<T>(\r\n    key: string,\r\n    request: Observable<T>\r\n  ): Observable<T> {\r\n    const cached = this.get<T>(key);\r\n    if (cached) {\r\n      return of(cached);\r\n    }\r\n\r\n    return request.pipe(\r\n      tap((data: any) => {\r\n        // Sort leagues by createdOn date (newest first) if it's an array\r\n        if (Array.isArray(data) && data.length > 0 && data[0].createdOn) {\r\n          const sortedData = [...data].sort((a, b) => {\r\n            const dateA = new Date(a.createdOn).getTime();\r\n            const dateB = new Date(b.createdOn).getTime();\r\n            return dateB - dateA; // Descending order (newest first)\r\n          });\r\n          this.set(key, sortedData, this.RANKINGS_TTL);\r\n        } else {\r\n          this.set(key, data, this.RANKINGS_TTL);\r\n        }\r\n      }),\r\n      catchError((error) => {\r\n        throw error;\r\n      })\r\n    );\r\n  }\r\n\r\n  // Invalidate cache for specific patterns\r\n  invalidatePattern(pattern: string): void {\r\n    for (const key of this.cache.keys()) {\r\n      if (key.includes(pattern)) {\r\n        this.cache.delete(key);\r\n      }\r\n    }\r\n    this.saveToLocalStorage();\r\n  }\r\n\r\n  // Get next update time for player data (every hour)\r\n  getNextPlayerUpdateTime(): Date {\r\n    const now = new Date();\r\n    const nextHour = new Date(\r\n      now.getFullYear(),\r\n      now.getMonth(),\r\n      now.getDate(),\r\n      now.getHours() + 1,\r\n      0,\r\n      0,\r\n      0\r\n    );\r\n    return nextHour;\r\n  }\r\n\r\n  // Get last update time for a specific key\r\n  getLastUpdateTime(key: string): Date | null {\r\n    const item = this.cache.get(key);\r\n    return item ? new Date(item.timestamp) : null;\r\n  }\r\n\r\n  // Check if cache is expired for a specific key\r\n  isCacheExpired(key: string): boolean {\r\n    const item = this.cache.get(key);\r\n    if (!item) return true;\r\n    return Date.now() - item.timestamp > item.ttl;\r\n  }\r\n\r\n  // Get cache expiry time for a specific key\r\n  getCacheExpiryTime(key: string): Date | null {\r\n    const item = this.cache.get(key);\r\n    if (!item) return null;\r\n    return new Date(item.timestamp + item.ttl);\r\n  }\r\n\r\n  // Force refresh cache for a specific key\r\n  forceRefresh<T>(\r\n    key: string,\r\n    request: Observable<T>,\r\n    ttl: number = this.DEFAULT_TTL\r\n  ): Observable<T> {\r\n    this.remove(key);\r\n    return this.cacheRequest(key, request, ttl);\r\n  }\r\n\r\n  // Check if cache should be refreshed based on current time (every 30 minutes)\r\n  shouldRefreshRankings(): boolean {\r\n    const lastUpdate = this.getLastUpdateTime('all-leagues-rank');\r\n    if (!lastUpdate) return true;\r\n\r\n    const minutesSinceUpdate =\r\n      (Date.now() - lastUpdate.getTime()) / (60 * 1000);\r\n    return minutesSinceUpdate >= 30;\r\n  }\r\n\r\n  // Check if current league cache should be refreshed\r\n  shouldRefreshCurrentLeague(): boolean {\r\n    const lastUpdate = this.getLastUpdateTime('current-league');\r\n    if (!lastUpdate) return true;\r\n\r\n    const minutesSinceUpdate =\r\n      (Date.now() - lastUpdate.getTime()) / (60 * 1000);\r\n    return minutesSinceUpdate >= 30;\r\n  }\r\n\r\n  private saveToLocalStorage(): void {\r\n    try {\r\n      const cacheData = Array.from(this.cache.entries());\r\n      localStorage.setItem('app_cache', JSON.stringify(cacheData));\r\n    } catch (error) {\r\n      // Silent error handling\r\n    }\r\n  }\r\n\r\n  private loadFromLocalStorage(): void {\r\n    try {\r\n      const cacheData = localStorage.getItem('app_cache');\r\n      if (cacheData) {\r\n        const entries = JSON.parse(cacheData);\r\n        this.cache = new Map(entries);\r\n\r\n        // Clean expired items\r\n        for (const [key, item] of this.cache.entries()) {\r\n          if (Date.now() - item.timestamp > item.ttl) {\r\n            this.cache.delete(key);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Silent error handling\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from './../../../environments/environment';\r\nimport {\r\n  AllLeagueRank,\r\n  CommonResponse,\r\n  LeagueResponse,\r\n  StartLeagueDto,\r\n} from 'src/app/models/interfaces';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LeagueService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient, private cacheService: CacheService) {}\r\n\r\n  resetLeague(LeagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/reset/${LeagueId}`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  startLeague(dto: StartLeagueDto): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(`${this.baseUrl}/league/start`, dto);\r\n  }\r\n\r\n  GetCurrentLeague(forceRefresh: boolean = false): Observable<LeagueResponse> {\r\n    const request = this.http.get<LeagueResponse>(\r\n      `${this.baseUrl}/league/getCurrentLeague`\r\n    );\r\n\r\n    if (forceRefresh || this.cacheService.shouldRefreshCurrentLeague()) {\r\n      return this.cacheService.forceRefresh(\r\n        'current-league',\r\n        request,\r\n        30 * 60 * 1000\r\n      );\r\n    }\r\n\r\n    return this.cacheService.cachePlayerRequest('current-league', request);\r\n  }\r\n\r\n  // Admin-specific method for current league without cache\r\n  getAdminCurrentLeague(): Observable<LeagueResponse> {\r\n    return this.http.get<LeagueResponse>(\r\n      `${this.baseUrl}/league/getCurrentLeague`\r\n    );\r\n  }\r\n\r\n  GetAllLeaguesRank(\r\n    forceRefresh: boolean = false\r\n  ): Observable<AllLeagueRank[]> {\r\n    const request = this.http.get<AllLeagueRank[]>(\r\n      `${this.baseUrl}/player/players/all`\r\n    );\r\n\r\n    if (forceRefresh || this.cacheService.shouldRefreshRankings()) {\r\n      return this.cacheService.forceRefresh(\r\n        'all-leagues-rank',\r\n        request,\r\n        30 * 60 * 1000\r\n      );\r\n    }\r\n\r\n    return this.cacheService.cacheAllLeaguesRequest(\r\n      'all-leagues-rank',\r\n      request\r\n    );\r\n  }\r\n\r\n  // Admin-specific method with 30-minute cache\r\n  getAdminAllLeagues(): Observable<AllLeagueRank[]> {\r\n    return this.http.get<AllLeagueRank[]>(`${this.baseUrl}/player/players/all`);\r\n  }\r\n\r\n  DeleteLeague(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.delete<CommonResponse>(\r\n      `${this.baseUrl}/league/delete/${leagueId}`\r\n    );\r\n  }\r\n\r\n  createGroupsAndMatches(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/${leagueId}/create-groups`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  startKnockoutStage(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/${leagueId}/start-knockouts`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  startSemiFinals(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/${leagueId}/start-semifinals`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  startFinal(leagueId: number): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/league/${leagueId}/start-final`,\r\n      {}\r\n    );\r\n  }\r\n\r\n  // Get last update time for leagues rank\r\n  getLastLeaguesRankUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('all-leagues-rank');\r\n  }\r\n\r\n  // Get last update time for current league\r\n  getLastCurrentLeagueUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('current-league');\r\n  }\r\n\r\n  // Check if rankings cache is expired\r\n  isRankingsCacheExpired(): boolean {\r\n    return this.cacheService.isCacheExpired('all-leagues-rank');\r\n  }\r\n\r\n  // Check if current league cache is expired\r\n  isCurrentLeagueCacheExpired(): boolean {\r\n    return this.cacheService.isCacheExpired('current-league');\r\n  }\r\n\r\n  // Get next rankings update time\r\n  getNextRankingsUpdateTime(): Date | null {\r\n    return this.cacheService.getCacheExpiryTime('all-leagues-rank');\r\n  }\r\n\r\n  // Get next current league update time\r\n  getNextCurrentLeagueUpdateTime(): Date | null {\r\n    return this.cacheService.getCacheExpiryTime('current-league');\r\n  }\r\n\r\n  // Force refresh rankings data\r\n  forceRefreshRankings(): Observable<AllLeagueRank[]> {\r\n    return this.GetAllLeaguesRank(true);\r\n  }\r\n\r\n  // Force refresh current league data\r\n  forceRefreshCurrentLeague(): Observable<LeagueResponse> {\r\n    return this.GetCurrentLeague(true);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { environment } from './../../../environments/environment';\r\nimport { Match, ResultResponse } from 'src/app/models/interfaces';\r\nimport { PlayerService } from './player.service';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MatchService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private playerService: PlayerService,\r\n    private cacheService: CacheService\r\n  ) {}\r\n\r\n  getMatches(): Observable<Match[]> {\r\n    return this.cacheService.cachePlayerRequest(\r\n      'current-matches',\r\n      this.http.get<Match[]>(`${this.baseUrl}/match`)\r\n    );\r\n  }\r\n\r\n  // Admin-specific method - now same as regular method\r\n  getAdminMatches(): Observable<Match[]> {\r\n    return this.http.get<Match[]>(`${this.baseUrl}/match`);\r\n  }\r\n\r\n  updateMatch(\r\n    matchId: number,\r\n    winnerId: number | null\r\n  ): Observable<ResultResponse> {\r\n    return this.http\r\n      .post<ResultResponse>(`${this.baseUrl}/match/${matchId}/result`, {\r\n        winnerId,\r\n      })\r\n      .pipe(\r\n        tap(() => {\r\n          this.playerService.refreshPlayers();\r\n        })\r\n      );\r\n  }\r\n\r\n  resetMatch(matchId: number): Observable<ResultResponse> {\r\n    return this.http\r\n      .delete<ResultResponse>(`${this.baseUrl}/match/reset/${matchId}`)\r\n      .pipe(\r\n        tap(() => {\r\n          this.playerService.refreshPlayers();\r\n        })\r\n      );\r\n  }\r\n\r\n  // Get last update time for current matches\r\n  getLastMatchesUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('current-matches');\r\n  }\r\n}\r\n","import { environment } from './../../../environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CommonResponse, MessagesResponse } from 'src/app/models/interfaces';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MessageService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient, private cacheService: CacheService) {}\r\n\r\n  sendMessage(message: string): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(`${this.baseUrl}/Message/send`, {\r\n      Content: message,\r\n    });\r\n  }\r\n\r\n  getMessages(): Observable<MessagesResponse> {\r\n    return this.http.get<MessagesResponse>(`${this.baseUrl}/Message/inbox`);\r\n  }\r\n\r\n  // Admin-specific method - now loads fresh data immediately without caching\r\n  getAdminMessages(): Observable<MessagesResponse> {\r\n    return this.http.get<MessagesResponse>(`${this.baseUrl}/Message/inbox`);\r\n  }\r\n\r\n  toggleMarkMessage(\r\n    messageId: number,\r\n    marked: boolean\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/Message/mark/${messageId}`,\r\n      { Marked: marked }\r\n    );\r\n  }\r\n\r\n  toggleDeleteMessage(\r\n    messageId: number,\r\n    marked: boolean\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/Message/delete/${messageId}`,\r\n      { Marked: marked }\r\n    );\r\n  }\r\n\r\n  getPlayerMessages(): Observable<MessagesResponse> {\r\n    return this.http.get<MessagesResponse>(\r\n      `${this.baseUrl}/Message/my-messages`\r\n    );\r\n  }\r\n\r\n  sendAdminReply(\r\n    playerId: string,\r\n    message: string\r\n  ): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/Message/reply/${playerId}`,\r\n      { Content: message }\r\n    );\r\n  }\r\n}\r\n","import { environment } from './../../../environments/environment';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CommonResponse, NoteResponse } from 'src/app/models/interfaces';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class NoteService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  constructor(private http: HttpClient, private cacheService: CacheService) {}\r\n\r\n  sendNote(message: string): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(`${this.baseUrl}/note/write`, {\r\n      Content: message,\r\n    });\r\n  }\r\n\r\n  getNotes(): Observable<NoteResponse> {\r\n    return this.http.get<NoteResponse>(`${this.baseUrl}/note/notes`);\r\n  }\r\n\r\n  // Admin-specific method with 30-minute cache\r\n  getAdminNotes(): Observable<NoteResponse> {\r\n    return this.http.get<NoteResponse>(`${this.baseUrl}/note/notes`);\r\n  }\r\n\r\n  toggleMarHide(noteId: number, marked: boolean): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/note/hide/${noteId}`,\r\n      { Marked: marked }\r\n    );\r\n  }\r\n\r\n  DeleteNote(noteId: number, marked: boolean): Observable<CommonResponse> {\r\n    return this.http.post<CommonResponse>(\r\n      `${this.baseUrl}/note/delete/${noteId}`,\r\n      { Marked: marked }\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { environment } from 'src/environments/environment';\r\nimport { CommonResponse } from 'src/app/models/interfaces';\r\nimport { CacheService } from './cache.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class PlayerService {\r\n  private baseUrl = environment.apiUrl;\r\n\r\n  private rankingSubject = new BehaviorSubject<[]>([]);\r\n  ranking$ = this.rankingSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient, private cacheService: CacheService) {}\r\n\r\n  getrank(): Observable<[]> {\r\n    return this.cacheService.cachePlayerRequest(\r\n      'player-ranking',\r\n      this.http\r\n        .get<[]>(`${this.baseUrl}/player/ranking`)\r\n        .pipe(tap((data) => this.rankingSubject.next(data)))\r\n    );\r\n  }\r\n\r\n  getPlayers(): Observable<[]> {\r\n    return this.cacheService.cachePlayerRequest(\r\n      'players-list',\r\n      this.http\r\n        .get<[]>(`${this.baseUrl}/player`)\r\n        .pipe(tap((data) => this.rankingSubject.next(data)))\r\n    );\r\n  }\r\n\r\n  // Admin-specific method with 30-minute cache\r\n  getAdminPlayers(): Observable<[]> {\r\n    return this.http\r\n      .get<[]>(`${this.baseUrl}/player`)\r\n      .pipe(tap((data) => this.rankingSubject.next(data)));\r\n  }\r\n\r\n  addPlayer(fullName: string): Observable<CommonResponse> {\r\n    return this.http\r\n      .post<CommonResponse>(`${this.baseUrl}/player`, { fullName })\r\n      .pipe(\r\n        tap(() => {\r\n          this.cacheService.invalidatePattern('player');\r\n          this.refreshPlayers();\r\n        })\r\n      );\r\n  }\r\n\r\n  deletePlayer(playerId: number): Observable<CommonResponse> {\r\n    return this.http\r\n      .delete<CommonResponse>(`${this.baseUrl}/player/${playerId}`)\r\n      .pipe(\r\n        tap(() => {\r\n          this.cacheService.invalidatePattern('player');\r\n          this.refreshPlayers();\r\n        })\r\n      );\r\n  }\r\n\r\n  refreshRanking() {\r\n    this.cacheService.remove('player-ranking');\r\n    this.http.get<[]>(`${this.baseUrl}/player/ranking`).subscribe((data) => {\r\n      this.rankingSubject.next(data);\r\n    });\r\n  }\r\n\r\n  refreshPlayers() {\r\n    this.cacheService.remove('players-list');\r\n    this.http.get<[]>(`${this.baseUrl}/player`).subscribe((data) => {\r\n      this.rankingSubject.next(data);\r\n    });\r\n  }\r\n\r\n  // Get next update time\r\n  getNextUpdateTime(): Date {\r\n    return this.cacheService.getNextPlayerUpdateTime();\r\n  }\r\n\r\n  // Get last update time for ranking\r\n  getLastRankingUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('player-ranking');\r\n  }\r\n\r\n  // Get last update time for players list\r\n  getLastPlayersUpdateTime(): Date | null {\r\n    return this.cacheService.getLastUpdateTime('players-list');\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { InboxComponent } from '../admin/inbox/inbox.component';\r\nimport { FloatingInboxComponent } from './floating-inbox/floating-inbox.component';\r\nimport { MessageService } from '../core/services/message.service';\r\nimport { AdminDashboardService } from '../core/services/admin-dashboard.service';\r\n\r\n@NgModule({\r\n  declarations: [InboxComponent, FloatingInboxComponent],\r\n  imports: [CommonModule, FormsModule],\r\n  exports: [InboxComponent, FloatingInboxComponent],\r\n  providers: [MessageService, AdminDashboardService],\r\n})\r\nexport class SharedModule {}\r\n","var api = 'https://yugiapp.runasp.net/api';\r\n\r\n// api = 'https://localhost:7144/api';\r\n\r\nexport const environment = {\r\n  production: false,\r\n\r\n  apiUrl: api,\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { authGuard } from './core/guards/auth.guard';\r\n\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: 'player', pathMatch: 'full' },\r\n  {\r\n    path: 'player',\r\n    loadChildren: () =>\r\n      import('./player/player.module').then((m) => m.PlayerModule),\r\n    data: { title: 'Players' },\r\n  },\r\n  {\r\n    path: 'auth',\r\n    loadChildren: () => import('./auth/auth.module').then((m) => m.AuthModule),\r\n    data: { title: 'Auth' },\r\n  },\r\n  {\r\n    path: 'admin',\r\n    loadChildren: () =>\r\n      import('./admin/admin.module').then((m) => m.AdminModule),\r\n    canActivate: [authGuard],\r\n    data: { title: 'Admin' },\r\n  },\r\n  { path: '**', redirectTo: 'player' },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { CanActivateFn } from '@angular/router';\r\nimport { inject } from '@angular/core';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\nexport const authGuard: CanActivateFn = (route, state) => {\r\n  const authService = inject(AuthService);\r\n  const token = localStorage.getItem('token');\r\n  \r\n  return !!token;\r\n};\r\n","import { Injectable } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { Router, NavigationEnd, ActivatedRoute } from '@angular/router';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TitleStrategyService {\r\n  private readonly defaultTitle = 'Yugi-Oh Tournament';\r\n\r\n  constructor(private title: Title, private router: Router) {\r\n    // Set initial title\r\n    this.title.setTitle(this.defaultTitle);\r\n    this.setupTitleUpdates();\r\n  }\r\n\r\n  private setupTitleUpdates(): void {\r\n    this.router.events\r\n      .pipe(filter((event) => event instanceof NavigationEnd))\r\n      .subscribe((event) => {\r\n        // Add a small delay to ensure route data is available\r\n        setTimeout(() => {\r\n          this.updateTitle();\r\n        }, 50);\r\n      });\r\n  }\r\n\r\n  private updateTitle(): void {\r\n    const currentRoute = this.getCurrentRoute();\r\n\r\n    if (currentRoute?.snapshot?.data?.['title']) {\r\n      const newTitle = currentRoute.snapshot.data['title'];\r\n      this.title.setTitle(newTitle);\r\n    } else {\r\n      this.title.setTitle(this.defaultTitle);\r\n    }\r\n  }\r\n\r\n  private getCurrentRoute(): any {\r\n    let route = this.router.routerState.root;\r\n\r\n    // Navigate through all child routes to find the deepest one\r\n    while (route.firstChild) {\r\n      route = route.firstChild;\r\n    }\r\n\r\n    // Also check the current activated route for additional data\r\n    let currentActivatedRoute = this.router.routerState.root;\r\n    while (currentActivatedRoute.firstChild) {\r\n      currentActivatedRoute = currentActivatedRoute.firstChild;\r\n    }\r\n\r\n    // Try to get title from the deepest route first\r\n    if (route?.snapshot?.data?.['title']) {\r\n      return route;\r\n    }\r\n\r\n    // If no title in deepest route, check the activated route\r\n    if (currentActivatedRoute?.snapshot?.data?.['title']) {\r\n      return currentActivatedRoute;\r\n    }\r\n\r\n    // If still no title, return the deepest route\r\n    return route;\r\n  }\r\n\r\n  setTitle(title: string): void {\r\n    if (title) {\r\n      const newTitle = title;\r\n      this.title.setTitle(newTitle);\r\n    } else {\r\n      this.title.setTitle(this.defaultTitle);\r\n    }\r\n  }\r\n}\r\n","<!-- Floating Admin Inbox Button (Draggable) -->\r\n<div\r\n  *ngIf=\"isAdmin\"\r\n  class=\"fixed z-50 cursor-pointer select-none\"\r\n  [style.left.px]=\"buttonPosition.x\"\r\n  [style.top.px]=\"buttonPosition.y\"\r\n  [class.dragging]=\"isDragging\"\r\n  (mousedown)=\"onButtonMouseDown($event)\"\r\n  (touchstart)=\"onButtonTouchStart($event)\"\r\n  (touchend)=\"onButtonTouchEnd($event)\"\r\n  (click)=\"toggleInboxOverlay()\"\r\n>\r\n  <div\r\n    class=\"w-12 h-12 md:w-12 md:h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-full shadow-lg hover:shadow-xl transition-all duration-300 flex items-center justify-center hover:scale-110 floating-button relative group border-2 border-blue-400\"\r\n    [class.shadow-2xl]=\"isDragging\"\r\n  >\r\n    <i class=\"fa-solid fa-comments text-lg text-white\"></i>\r\n\r\n    <!-- Tooltip -->\r\n    <div\r\n      class=\"absolute bottom-full right-0 mb-2 px-3 py-2 bg-gray-800 text-white text-sm rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300 whitespace-nowrap pointer-events-none tooltip\"\r\n    >\r\n      Admin Inbox (Drag to move)\r\n      <div\r\n        class=\"absolute top-full right-4 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-800\"\r\n      ></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<!-- Inbox Component Overlay -->\r\n<div\r\n  *ngIf=\"isAdmin && showInboxOverlay\"\r\n  class=\"fixed inset-0 z-50 bg-black bg-opacity-50 flex items-center justify-center pt-[50px] sm:p-4 md:p-4\"\r\n  (click)=\"closeInboxOverlay()\"\r\n>\r\n  <div\r\n    class=\"bg-gray-900 rounded-lg shadow-2xl overflow-hidden overlay-enter w-full h-full md:w-auto md:h-auto\"\r\n    (click)=\"$event.stopPropagation()\"\r\n    style=\"\r\n      min-width: 320px;\r\n      min-height: 500px;\r\n      max-width: 90vw;\r\n      max-height: 90vh;\r\n    \"\r\n  >\r\n    <!-- Overlay Header -->\r\n    <div\r\n      class=\"bg-gray-800 p-4 border-b border-gray-600 flex items-center justify-between\"\r\n    >\r\n      <div class=\"flex items-center\">\r\n        <i class=\"fa-solid fa-inbox text-white mr-3 text-xl\"></i>\r\n        <h2 class=\"text-xl font-bold text-white\">Admin Inbox</h2>\r\n      </div>\r\n      <button\r\n        (click)=\"closeInboxOverlay()\"\r\n        class=\"text-gray-400 hover:text-white transition-colors p-2 rounded-lg hover:bg-gray-700 active:bg-gray-600\"\r\n        title=\"Close\"\r\n      >\r\n        <i class=\"fa-solid fa-times text-xl\"></i>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- Inbox Component Container -->\r\n    <div class=\"h-full overflow-hidden\">\r\n      <!-- Chat List View -->\r\n      <div *ngIf=\"!selectedChat\" class=\"h-full flex flex-col\">\r\n        <!-- Header with refresh button -->\r\n        <div\r\n          class=\"bg-gray-700 p-3 border-b border-gray-600 flex flex-col space-y-2\"\r\n        >\r\n          <!-- Action Buttons -->\r\n          <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">\r\n            <button\r\n              (click)=\"refreshMessages()\"\r\n              class=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm transition-colors active:bg-blue-800 min-w-[80px]\"\r\n              title=\"تحديث\"\r\n            >\r\n              <i class=\"fa-solid fa-refresh mr-1\"></i>\r\n              <span class=\"hidden sm:inline\">تحديث</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Chat List with Scroll -->\r\n        <div class=\"flex-1 overflow-y-auto p-2 max-h-96\">\r\n          <div\r\n            *ngFor=\"let chat of playerChats\"\r\n            (click)=\"selectChat(chat)\"\r\n            class=\"bg-gray-800 hover:bg-gray-700 rounded-lg p-3 mb-2 cursor-pointer transition-colors border-l-4 border-transparent hover:border-blue-500 active:bg-gray-600\"\r\n          >\r\n            <div class=\"flex justify-between items-start\">\r\n              <div class=\"flex-1 min-w-0\">\r\n                <h4 class=\"text-white font-medium text-sm truncate\">\r\n                  {{ chat.playerFullName }}\r\n                </h4>\r\n                <p class=\"text-gray-300 text-xs mt-1 truncate\">\r\n                  {{ chat.lastMessage }}\r\n                </p>\r\n                <p class=\"text-gray-400 text-xs mt-1\">\r\n                  {{ chat.lastMessageDate | date : \"short\" }}\r\n                </p>\r\n              </div>\r\n              <div\r\n                *ngIf=\"chat.unreadCount > 0\"\r\n                class=\"bg-red-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center flex-shrink-0 ml-2\"\r\n              >\r\n                {{ chat.unreadCount }}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Chat View -->\r\n      <div *ngIf=\"selectedChat\" class=\"h-full flex flex-col\">\r\n        <!-- Chat Header -->\r\n        <div\r\n          class=\"bg-gray-700 px-2 border-b border-gray-600 flex items-center\"\r\n        >\r\n          <button\r\n            (click)=\"goBack()\"\r\n            class=\"text-gray-400 hover:text-white mr-3 transition-colors p-2 rounded active:bg-gray-600\"\r\n            title=\"رجوع\"\r\n          >\r\n            <i class=\"fa-solid fa-arrow-left text-lg\"></i>\r\n          </button>\r\n          <h3 class=\"text-white text-sm font-semibold truncate flex-1\">\r\n            {{ selectedChat.playerFullName }}\r\n          </h3>\r\n        </div>\r\n\r\n        <!-- Messages Container with Scroll -->\r\n        <div\r\n          #messagesContainer\r\n          class=\"flex-1 overflow-y-auto p-3 space-y-3 max-h-80\"\r\n        >\r\n          <div\r\n            *ngFor=\"\r\n              let message of selectedChat.messages;\r\n              trackBy: trackByMessageId\r\n            \"\r\n            class=\"mb-4\"\r\n            [ngClass]=\"{\r\n              'text-right': !message.isFromAdmin,\r\n              'text-left': message.isFromAdmin\r\n            }\"\r\n          >\r\n            <div\r\n              class=\"inline-block p-3 rounded-lg max-w-[85%] md:max-w-xs\"\r\n              [ngClass]=\"{\r\n                'bg-green-700': !message.isFromAdmin,\r\n                'bg-gray-700': message.isFromAdmin\r\n              }\"\r\n            >\r\n              <p class=\"text-white text-sm break-words\">\r\n                {{ message.content }}\r\n              </p>\r\n              <p class=\"text-xs mt-1 text-gray-300\">\r\n                {{ message.sentAt | date : \"MMM d, y, hh:mm a\" }}\r\n              </p>\r\n\r\n              <!-- Message Actions (only mark as read for admin messages) -->\r\n              <div\r\n                *ngIf=\"message.isFromAdmin && !message.isRead\"\r\n                class=\"flex justify-end items-center mt-2\"\r\n              >\r\n                <button\r\n                  (click)=\"markAsRead(message.id)\"\r\n                  class=\"text-green-400 hover:text-green-300 text-xs transition-colors p-1 rounded active:bg-green-800\"\r\n                  title=\"تحديد كمقروءة\"\r\n                >\r\n                  <i class=\"fa-solid fa-check mr-1\"></i>\r\n                  <span class=\"hidden sm:inline\">تحديد كمقروءة</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Fixed Reply Input at Bottom -->\r\n        <div class=\"bg-gray-700 p-3 border-t border-gray-600\">\r\n          <div class=\"flex items-center space-x-2 rtl:space-x-reverse\">\r\n            <input\r\n              type=\"text\"\r\n              [(ngModel)]=\"replyText\"\r\n              placeholder=\"اكتب ردك هنا...\"\r\n              class=\"flex-1 bg-gray-600 text-white text-sm px-3 py-2 md:py-2 rounded border border-gray-500 focus:border-blue-500 focus:outline-none\"\r\n              (keyup.enter)=\"sendReply(selectedChat.playerId)\"\r\n              autocomplete=\"off\"\r\n              autocorrect=\"off\"\r\n              autocapitalize=\"off\"\r\n            />\r\n            <button\r\n              (click)=\"sendReply(selectedChat.playerId)\"\r\n              class=\"bg-blue-600 hover:bg-blue-700 text-white px-3 md:px-4 py-2 md:py-2 rounded text-sm transition-colors min-w-[60px] md:min-w-[80px]\"\r\n              title=\"إرسال\"\r\n            >\r\n              <i class=\"fa-solid fa-paper-plane mr-1\"></i>\r\n              <span class=\"hidden sm:inline\">إرسال</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  HostListener,\n  ViewChild,\n  ElementRef,\n  AfterViewInit,\n  AfterViewChecked,\n} from '@angular/core';\nimport { AuthService } from '../../core/services/auth.service';\nimport { MessageService } from '../../core/services/message.service';\nimport { AdminDashboardService } from '../../core/services/admin-dashboard.service';\nimport { ToastrService } from 'ngx-toastr';\nimport { ChangeDetectorRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\ninterface PlayerChat {\n  playerId: string;\n  playerFullName: string;\n  lastMessage: string;\n  lastMessageDate: string;\n  unreadCount: number;\n  messages: any[];\n}\n\n@Component({\n  selector: 'app-floating-inbox',\n  templateUrl: './floating-inbox.component.html',\n  styleUrls: ['./floating-inbox.component.css'],\n})\nexport class FloatingInboxComponent\n  implements OnInit, OnDestroy, AfterViewInit, AfterViewChecked\n{\n  // Floating button properties\n  isAdmin = false;\n  showInboxOverlay = false;\n  buttonPosition = { x: 20, y: 100 };\n  isDragging = false;\n  dragOffset = { x: 0, y: 0 };\n  hasMovedDuringDrag = false;\n  unreadCount = 0;\n  isMobile = false;\n\n  // Inbox properties\n  playerChats: PlayerChat[] = [];\n  selectedPlayerId: string | null = null;\n  selectedChat: PlayerChat | null = null;\n  replyText = ''; // New property for single reply input\n  navbarHeight = 60;\n\n  // ViewChild for messages container\n  @ViewChild('messagesContainer')\n  messagesContainer!: ElementRef<HTMLDivElement>;\n\n  // Flag to control initial scroll\n  private shouldScrollToBottom = false;\n\n  // Cache management\n  private readonly CACHE_KEY = 'adminMessagesCache';\n  private readonly CACHE_DURATION = 30 * 60 * 1000; // 30 minutes in milliseconds\n  private cachedMessages: PlayerChat[] = [];\n  private lastCacheUpdate: number = 0;\n\n  private updateStatusSubscription?: Subscription;\n  private refreshSubscription?: Subscription;\n\n  constructor(\n    private authService: AuthService,\n    private messageService: MessageService,\n    private toastr: ToastrService,\n    private cdr: ChangeDetectorRef,\n    private adminDashboardService: AdminDashboardService\n  ) {}\n\n  ngOnInit(): void {\n    this.checkAdminStatus();\n    this.setInitialButtonPosition();\n\n    if (this.isAdmin) {\n      // Load fresh data from server (like inbox.component)\n      this.loadAdminMessages();\n    }\n  }\n\n  ngAfterViewInit(): void {\n    // View is initialized, can now access ViewChild elements\n  }\n\n  ngAfterViewChecked(): void {\n    // Only scroll to bottom if flag is set (first time opening chat)\n    if (\n      this.shouldScrollToBottom &&\n      this.selectedChat &&\n      this.messagesContainer\n    ) {\n      // Small delay to ensure DOM is fully updated\n      setTimeout(() => {\n        this.scrollToBottom();\n        // Reset flag after scrolling\n        this.shouldScrollToBottom = false;\n      }, 100);\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.isDragging = false;\n    this.showInboxOverlay = false;\n    document.body.style.cursor = 'default';\n    document.body.classList.remove('dragging');\n\n    if (this.updateStatusSubscription) {\n      this.updateStatusSubscription.unsubscribe();\n    }\n    if (this.refreshSubscription) {\n      this.refreshSubscription.unsubscribe();\n    }\n\n    document.removeEventListener(\n      'mousemove',\n      this.onGlobalMouseMove.bind(this)\n    );\n    document.removeEventListener('mouseup', this.onGlobalMouseUp.bind(this));\n  }\n\n  checkAdminStatus(): void {\n    try {\n      const role = this.authService.getRole();\n      this.isAdmin = role === 'Admin';\n    } catch (error) {\n      console.warn('Error checking admin status:', error);\n      this.isAdmin = false;\n    }\n  }\n\n  toggleInboxOverlay(): void {\n    // Always toggle the overlay when clicked\n    this.showInboxOverlay = !this.showInboxOverlay;\n\n    if (this.showInboxOverlay) {\n      this.loadAdminMessages();\n      setTimeout(() => {\n        this.fixInboxComponentForOverlay();\n      }, 100);\n    }\n  }\n\n  closeInboxOverlay(): void {\n    this.showInboxOverlay = false;\n  }\n\n  fixInboxComponentForOverlay(): void {\n    const inboxElement = document.querySelector(\n      '.overlay-enter app-floating-inbox'\n    );\n    if (inboxElement) {\n      const elementsWithMarginTop = inboxElement.querySelectorAll(\n        '[style*=\"margin-top\"]'\n      );\n      elementsWithMarginTop.forEach((el: any) => {\n        el.style.marginTop = '0px';\n      });\n\n      const elementsWithTop = inboxElement.querySelectorAll('[style*=\"top\"]');\n      elementsWithTop.forEach((el: any) => {\n        el.style.top = '0px';\n      });\n    }\n  }\n\n  setInitialButtonPosition(): void {\n    const savedPosition = localStorage.getItem('floatingInboxButtonPosition');\n\n    if (savedPosition) {\n      try {\n        const parsedPosition = JSON.parse(savedPosition);\n        const margin = 24;\n        const buttonSize = 48;\n        const maxX = window.innerWidth - buttonSize - margin;\n        const maxY = window.innerHeight - buttonSize - margin;\n\n        if (\n          parsedPosition.x >= margin &&\n          parsedPosition.x <= maxX &&\n          parsedPosition.y >= margin &&\n          parsedPosition.y <= maxY\n        ) {\n          this.buttonPosition = parsedPosition;\n          return;\n        }\n      } catch (error) {\n        console.warn('Error parsing saved button position:', error);\n      }\n    }\n\n    const margin = 24;\n    const buttonSize = 48;\n    const maxX = window.innerWidth - buttonSize - margin;\n    const maxY = window.innerHeight - buttonSize - margin;\n\n    this.buttonPosition = {\n      x: Math.max(margin, maxX),\n      y: Math.max(margin, maxY),\n    };\n  }\n\n  // Dragging functionality\n  onButtonMouseDown(event: MouseEvent): void {\n    this.isDragging = true;\n    this.hasMovedDuringDrag = false;\n    this.dragOffset = {\n      x: event.clientX - this.buttonPosition.x,\n      y: event.clientY - this.buttonPosition.y,\n    };\n    event.preventDefault();\n    event.stopPropagation();\n    document.body.style.cursor = 'grabbing';\n    document.body.classList.add('dragging');\n  }\n\n  onButtonTouchStart(event: TouchEvent): void {\n    this.isDragging = true;\n    this.hasMovedDuringDrag = false;\n\n    const touch = event.touches[0];\n    this.dragOffset = {\n      x: touch.clientX - this.buttonPosition.x,\n      y: touch.clientY - this.buttonPosition.y,\n    };\n\n    event.preventDefault();\n    event.stopPropagation();\n    document.body.style.cursor = 'grabbing';\n    document.body.classList.add('dragging');\n  }\n\n  onButtonTouchEnd(event: TouchEvent): void {\n    if (this.isDragging && !this.hasMovedDuringDrag) {\n      // If no significant movement occurred, treat as a tap/click\n      // Don't call toggleInboxOverlay here as it will be handled by click event\n      // Just reset the dragging state\n    }\n\n    this.isDragging = false;\n    document.body.style.cursor = 'default';\n    document.body.classList.remove('dragging');\n\n    setTimeout(() => {\n      this.hasMovedDuringDrag = false;\n    }, 100);\n  }\n\n  @HostListener('document:mousemove', ['$event'])\n  onGlobalMouseMove(event: MouseEvent): void {\n    if (this.isDragging) {\n      requestAnimationFrame(() => {\n        const newX = event.clientX - this.dragOffset.x;\n        const newY = event.clientY - this.dragOffset.y;\n\n        const oldX = this.buttonPosition.x;\n        const oldY = this.buttonPosition.y;\n\n        const margin = 24;\n        const buttonSize = 48;\n        const maxX = window.innerWidth - buttonSize - margin;\n        const maxY = window.innerHeight - buttonSize - margin;\n\n        const finalX = Math.max(margin, Math.min(newX, maxX));\n        const finalY = Math.max(margin, Math.min(newY, maxY));\n\n        if (Math.abs(finalX - oldX) > 5 || Math.abs(finalY - oldY) > 5) {\n          this.hasMovedDuringDrag = true;\n        }\n\n        this.buttonPosition = {\n          x: finalX,\n          y: finalY,\n        };\n\n        this.saveButtonPosition();\n      });\n    }\n  }\n\n  @HostListener('document:touchmove', ['$event'])\n  onGlobalTouchMove(event: TouchEvent): void {\n    if (this.isDragging) {\n      requestAnimationFrame(() => {\n        const touch = event.touches[0];\n        const newX = touch.clientX - this.dragOffset.x;\n        const newY = touch.clientY - this.dragOffset.y;\n\n        const oldX = this.buttonPosition.x;\n        const oldY = this.buttonPosition.y;\n\n        const margin = 24;\n        const buttonSize = 48;\n        const maxX = window.innerWidth - buttonSize - margin;\n        const maxY = window.innerHeight - buttonSize - margin;\n\n        const finalX = Math.max(margin, Math.min(newX, maxX));\n        const finalY = Math.max(margin, Math.min(newY, maxY));\n\n        if (Math.abs(finalX - oldX) > 5 || Math.abs(finalY - oldY) > 5) {\n          this.hasMovedDuringDrag = true;\n        }\n\n        this.buttonPosition = {\n          x: finalX,\n          y: finalY,\n        };\n\n        this.saveButtonPosition();\n      });\n    }\n  }\n\n  @HostListener('document:mouseup')\n  onGlobalMouseUp(): void {\n    if (this.isDragging) {\n      this.isDragging = false;\n      document.body.style.cursor = 'default';\n      document.body.classList.remove('dragging');\n\n      setTimeout(() => {\n        this.hasMovedDuringDrag = false;\n      }, 100);\n    }\n  }\n\n  @HostListener('document:touchend', ['$event'])\n  onGlobalTouchEnd(event: TouchEvent): void {\n    // Only handle global touch end if we're not handling button touch end\n    if (\n      this.isDragging &&\n      !(event.target as Element)?.closest('.floating-button')\n    ) {\n      this.isDragging = false;\n      document.body.style.cursor = 'default';\n      document.body.classList.remove('dragging');\n\n      setTimeout(() => {\n        this.hasMovedDuringDrag = false;\n      }, 100);\n    }\n  }\n\n  @HostListener('window:resize')\n  onWindowResize(): void {\n    const margin = 24;\n    const buttonSize = 48;\n    const maxX = window.innerWidth - buttonSize - margin;\n    const maxY = window.innerHeight - buttonSize - margin;\n\n    this.buttonPosition = {\n      x: Math.max(margin, Math.min(this.buttonPosition.x, maxX)),\n      y: Math.max(margin, Math.min(this.buttonPosition.y, maxY)),\n    };\n  }\n\n  @HostListener('document:keydown.escape')\n  onEscapeKey(): void {\n    if (this.showInboxOverlay) {\n      this.showInboxOverlay = false;\n    }\n  }\n\n  private saveButtonPosition(): void {\n    try {\n      localStorage.setItem(\n        'floatingInboxButtonPosition',\n        JSON.stringify(this.buttonPosition)\n      );\n    } catch (error) {\n      console.warn('Error saving button position to localStorage:', error);\n    }\n  }\n\n  // Cache management methods\n  private saveToCache(messages: PlayerChat[]): void {\n    try {\n      const cacheData = {\n        messages: messages,\n        timestamp: Date.now(),\n      };\n      localStorage.setItem(this.CACHE_KEY, JSON.stringify(cacheData));\n      this.cachedMessages = messages;\n      this.lastCacheUpdate = Date.now();\n    } catch (error) {\n      console.warn('Error saving messages to cache:', error);\n    }\n  }\n\n  private loadFromCache(): PlayerChat[] | null {\n    try {\n      const cachedData = localStorage.getItem(this.CACHE_KEY);\n      if (!cachedData) return null;\n\n      const parsed = JSON.parse(cachedData);\n      const cacheAge = Date.now() - parsed.timestamp;\n\n      // Check if cache is still valid (less than 30 minutes old)\n      if (cacheAge < this.CACHE_DURATION) {\n        this.cachedMessages = parsed.messages;\n        this.lastCacheUpdate = parsed.timestamp;\n        return parsed.messages;\n      }\n\n      // Cache expired, remove it\n      localStorage.removeItem(this.CACHE_KEY);\n      return null;\n    } catch (error) {\n      console.warn('Error loading messages from cache:', error);\n      localStorage.removeItem(this.CACHE_KEY);\n      return null;\n    }\n  }\n\n  private isCacheValid(): boolean {\n    return (\n      this.cachedMessages.length > 0 &&\n      Date.now() - this.lastCacheUpdate < this.CACHE_DURATION\n    );\n  }\n\n  // Public method to get cache status\n  getCacheStatus(): { isValid: boolean; lastUpdate: Date | null; age: number } {\n    if (this.cachedMessages.length === 0) {\n      return { isValid: false, lastUpdate: null, age: 0 };\n    }\n\n    const age = Date.now() - this.lastCacheUpdate;\n    const isValid = age < this.CACHE_DURATION;\n\n    return {\n      isValid,\n      lastUpdate: new Date(this.lastCacheUpdate),\n      age: Math.floor(age / 1000 / 60), // Age in minutes\n    };\n  }\n\n  // Method to clear cache manually\n  clearCache(): void {\n    try {\n      localStorage.removeItem(this.CACHE_KEY);\n      this.cachedMessages = [];\n      this.lastCacheUpdate = 0;\n    } catch (error) {\n      console.warn('Error clearing cache:', error);\n    }\n  }\n\n  // Method to update cache with new data\n  private updateCacheWithNewData(newMessages: any[]): void {\n    if (newMessages.length === 0) return;\n\n    // Update existing chat messages\n    newMessages.forEach((newMessage) => {\n      const existingChat = this.cachedMessages.find(\n        (chat) => chat.playerId === newMessage.senderId\n      );\n\n      if (existingChat) {\n        // Check if message already exists\n        const messageExists = existingChat.messages.some(\n          (msg) => msg.id === newMessage.id\n        );\n\n        if (!messageExists) {\n          // Add new message\n          existingChat.messages.push(newMessage);\n\n          // Update last message and date\n          if (\n            new Date(newMessage.sentAt) > new Date(existingChat.lastMessageDate)\n          ) {\n            existingChat.lastMessage = newMessage.content;\n            existingChat.lastMessageDate = newMessage.sentAt;\n          }\n\n          // Update unread count\n          if (!newMessage.isRead && !newMessage.isFromAdmin) {\n            existingChat.unreadCount++;\n          }\n        }\n      } else {\n        // Create new chat\n        const newChat: PlayerChat = {\n          playerId: newMessage.senderId,\n          playerFullName: newMessage.senderFullName,\n          lastMessage: newMessage.content,\n          lastMessageDate: newMessage.sentAt,\n          unreadCount: !newMessage.isRead && !newMessage.isFromAdmin ? 1 : 0,\n          messages: [newMessage],\n        };\n        this.cachedMessages.push(newChat);\n      }\n    });\n\n    // Sort chats by last message date\n    this.cachedMessages.sort(\n      (a, b) =>\n        new Date(b.lastMessageDate).getTime() -\n        new Date(a.lastMessageDate).getTime()\n    );\n\n    // Save updated cache\n    this.saveToCache(this.cachedMessages);\n\n    // Update UI\n    this.playerChats = [...this.cachedMessages];\n  }\n\n  // Inbox functionality\n  private loadAdminMessages(): void {\n    // Always load fresh data from server (like inbox.component)\n    this.loadFromServer(false);\n  }\n\n  private loadFromServer(isBackgroundRefresh: boolean = false): void {\n    this.adminDashboardService.getSecondaryData('messages').subscribe({\n      next: (messages) => {\n        if (messages && messages.length > 0) {\n          const groupedMessages = this.groupMessagesBySender(messages);\n\n          // Always update playerChats (like inbox.component)\n          this.playerChats = groupedMessages.sort(\n            (a, b) =>\n              new Date(b.lastMessageDate).getTime() -\n              new Date(a.lastMessageDate).getTime()\n          );\n\n          // Save to cache for offline use\n          this.saveToCache(this.playerChats);\n\n          if (!isBackgroundRefresh) {\n            // this.toastr.success('تم تحديث الرسائل بنجاح');\n          }\n        } else {\n          this.toastr.error('لا يوجد رسائل');\n          this.playerChats = []; // Clear chats if no messages\n          this.saveToCache([]); // Save empty cache\n        }\n      },\n      error: (err) => {\n        this.toastr.error(err.message);\n        this.playerChats = []; // Clear chats on error\n        this.saveToCache([]); // Save empty cache on error\n      },\n    });\n  }\n\n  refreshMessages(): void {\n    // Force refresh from server and update cache\n    this.messageService.getAdminMessages().subscribe({\n      next: (response) => {\n        if (response && response.messages) {\n          const groupedMessages = this.groupMessagesBySender(response.messages);\n\n          // Update playerChats\n          this.playerChats = groupedMessages.sort(\n            (a, b) =>\n              new Date(b.lastMessageDate).getTime() -\n              new Date(a.lastMessageDate).getTime()\n          );\n\n          // Update cache\n          this.saveToCache(this.playerChats);\n\n          // Update UI\n          this.cdr.detectChanges();\n        } else {\n          this.toastr.error('لا يوجد رسائل');\n        }\n      },\n      error: (err) => {\n        this.toastr.error(err.message || 'فشل في تحديث الرسائل');\n      },\n    });\n  }\n\n  selectChat(chat: PlayerChat): void {\n    this.selectedChat = chat;\n    this.selectedPlayerId = chat.playerId;\n\n    // Use cached data directly (no new request)\n    if (this.selectedChat && this.selectedChat.messages) {\n      // Automatically mark unread messages as read\n      this.markUnreadMessagesAsRead(chat.playerId);\n\n      // Set flag to scroll to bottom on next view check\n      this.shouldScrollToBottom = true;\n    }\n  }\n\n  private loadChatMessages(playerId: string): void {\n    // Use cached messages instead of making new request\n    if (this.cachedMessages.length > 0) {\n      const playerMessages =\n        this.cachedMessages.find((chat) => chat.playerId === playerId)\n          ?.messages || [];\n\n      if (this.selectedChat) {\n        this.selectedChat.messages = playerMessages;\n\n        // Automatically mark unread messages as read\n        this.markUnreadMessagesAsRead(playerId);\n\n        // Scroll to bottom after messages load\n        setTimeout(() => {\n          this.scrollToBottom();\n        }, 100);\n      }\n    } else {\n      // Fallback: load from server if no cache\n      this.loadFromServer(false);\n    }\n  }\n\n  // New method to automatically mark unread messages as read\n  private markUnreadMessagesAsRead(playerId: string): void {\n    if (!this.selectedChat) return;\n\n    const unreadMessages = this.selectedChat.messages.filter(\n      (msg) => !msg.isFromAdmin && !msg.isRead\n    );\n\n    if (unreadMessages.length > 0) {\n      // Mark all unread messages as read\n      unreadMessages.forEach((message) => {\n        this.messageService.toggleMarkMessage(message.id, true).subscribe({\n          next: (response: any) => {\n            if (response.success) {\n              // Update local cache\n              message.isRead = true;\n\n              // Update unread count in chat list\n              const chatInList = this.playerChats.find(\n                (c) => c.playerId === playerId\n              );\n              if (chatInList) {\n                chatInList.unreadCount = Math.max(\n                  0,\n                  chatInList.unreadCount - 1\n                );\n              }\n\n              // Update cache with new read status\n              this.saveToCache(this.playerChats);\n\n              // Update UI\n              this.cdr.detectChanges();\n            }\n          },\n          error: (err: any) => {\n            console.error('Error marking message as read:', err);\n          },\n        });\n      });\n    }\n  }\n\n  private scrollToTop(): void {\n    const messagesContainer = document.querySelector('#messagesContainer');\n    if (messagesContainer) {\n      messagesContainer.scrollTop = 0;\n    }\n  }\n\n  private scrollToBottom(): void {\n    if (this.messagesContainer && this.messagesContainer.nativeElement) {\n      // Scroll to bottom to show latest messages\n      this.messagesContainer.nativeElement.scrollTop =\n        this.messagesContainer.nativeElement.scrollHeight;\n    }\n  }\n\n  private groupMessagesBySender(messages: any[]): PlayerChat[] {\n    const chatMap = new Map<string, PlayerChat>();\n\n    messages.forEach((message) => {\n      const senderId = message.senderId;\n      if (!chatMap.has(senderId)) {\n        chatMap.set(senderId, {\n          playerId: senderId,\n          playerFullName: message.senderFullName,\n          lastMessage: message.content,\n          lastMessageDate: message.sentAt,\n          unreadCount: message.isRead ? 0 : 1,\n          messages: [message],\n        });\n      } else {\n        const chat = chatMap.get(senderId)!;\n        chat.messages.push(message);\n\n        if (new Date(message.sentAt) > new Date(chat.lastMessageDate)) {\n          chat.lastMessage = message.content;\n          chat.lastMessageDate = message.sentAt;\n        }\n\n        if (!message.isRead) {\n          chat.unreadCount++;\n        }\n      }\n    });\n\n    // Sort messages within each chat from oldest to newest\n    Array.from(chatMap.values()).forEach((chat) => {\n      chat.messages.sort(\n        (a, b) => new Date(a.sentAt).getTime() - new Date(b.sentAt).getTime()\n      );\n    });\n\n    return Array.from(chatMap.values());\n  }\n\n  sendReply(playerId: string): void {\n    if (!this.replyText || this.replyText.trim() === '') {\n      this.toastr.error('يرجى كتابة رد');\n      return;\n    }\n\n    const replyContent = this.replyText; // Store before clearing\n    this.replyText = ''; // Clear the input\n\n    this.messageService.sendAdminReply(playerId, replyContent).subscribe({\n      next: (response: any) => {\n        if (response.success) {\n          this.toastr.success('تم إرسال الرد بنجاح');\n\n          // Add the new reply to local data immediately (like inbox.component)\n          if (this.selectedChat) {\n            const newReply = {\n              id: response.messageId || Date.now(),\n              content: replyContent,\n              sentAt: new Date().toISOString(),\n              isFromAdmin: true,\n              isRead: true,\n              senderId: 'admin',\n              senderFullName: 'Admin',\n            };\n\n            // Add to selected chat\n            this.selectedChat.messages.push(newReply);\n\n            // Update last message in chat list\n            const chatInList = this.playerChats.find(\n              (c) => c.playerId === playerId\n            );\n            if (chatInList) {\n              chatInList.lastMessage = replyContent;\n              chatInList.lastMessageDate = newReply.sentAt;\n\n              // Re-sort chats by latest message\n              this.playerChats.sort(\n                (a, b) =>\n                  new Date(b.lastMessageDate).getTime() -\n                  new Date(a.lastMessageDate).getTime()\n              );\n            }\n\n            // Update cache\n            this.saveToCache(this.playerChats);\n          }\n\n          this.cdr.detectChanges();\n\n          // Scroll to bottom after sending reply\n          setTimeout(() => {\n            this.scrollToBottom();\n          }, 100);\n        } else {\n          this.toastr.error(response.message || 'فشل في إرسال الرد');\n        }\n      },\n      error: (err: any) => {\n        this.toastr.error(err.message || 'فشل في إرسال الرد');\n      },\n    });\n  }\n\n  markAsRead(messageId: number): void {\n    this.messageService.toggleMarkMessage(messageId, true).subscribe({\n      next: (response: any) => {\n        if (response.success) {\n          // Update local data immediately (like inbox.component)\n          if (this.selectedChat) {\n            const message = this.selectedChat.messages.find(\n              (msg) => msg.id === messageId\n            );\n            if (message) {\n              message.isRead = true;\n\n              // Update unread count in chat list\n              const chatInList = this.playerChats.find(\n                (c) => c.playerId === this.selectedChat?.playerId\n              );\n              if (chatInList) {\n                chatInList.unreadCount = Math.max(\n                  0,\n                  chatInList.unreadCount - 1\n                );\n              }\n\n              // Update cache\n              this.saveToCache(this.playerChats);\n            }\n          }\n\n          this.cdr.detectChanges();\n        }\n      },\n      error: (err: any) => {\n        console.error('Error marking message as read:', err);\n      },\n    });\n  }\n\n  goBack(): void {\n    this.selectedChat = null;\n    this.selectedPlayerId = null;\n  }\n\n  trackByMessageId(index: number, message: any): number {\n    return message.id;\n  }\n}\n","<div\r\n  #navbarContainer\r\n  class=\"fixed top-0 left-0 w-full z-50 bg-black backdrop-blur-sm transition-all duration-300\"\r\n>\r\n  <nav #navbarOnly>\r\n    <div\r\n      class=\"container mx-auto flex flex-col md:flex-row md:items-center md:justify-between p-2\"\r\n    >\r\n      <!-- Row with 3 sections: logo | menu | auth -->\r\n      <div class=\"w-full flex items-center justify-between md:gap-4\">\r\n        <!-- Left: Logo + Send Message (mobile) -->\r\n        <div class=\"flex items-center gap-4\">\r\n          <a\r\n            class=\"text-xl font-bold bg-gradient-to-r from-indigo-400 to-cyan-400 text-transparent bg-clip-text\"\r\n            *ngIf=\"!isAdmin\"\r\n          >\r\n            YuGi Tournament\r\n          </a>\r\n          <a\r\n            *ngIf=\"isAdmin\"\r\n            routerLink=\"/admin/players\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 font-bold\"\r\n          >\r\n            Admin Dashboard\r\n          </a>\r\n          <a\r\n            *ngIf=\"isAdmin\"\r\n            routerLink=\"/admin/friendlies\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 font-bold\"\r\n          >\r\n            Friendlies\r\n          </a>\r\n\r\n          <!-- Send Message (small screen only) -->\r\n          <a\r\n            *ngIf=\"isLoggedIn && !isAdmin\"\r\n            routerLink=\"/player/inbox\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"md:hidden font-bold text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 cursor-pointer\"\r\n          >\r\n            Inbox\r\n          </a>\r\n        </div>\r\n\r\n        <!-- Center: Navigation links -->\r\n        <div class=\"hidden md:flex justify-center space-x-2 font-bold\">\r\n          <a\r\n            routerLink=\"/player/friendlies\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            🎮 Friendlies\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/teams\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            👥 Teams\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/forbidden\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            Forbidden Cards\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/allLeagues\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            All Leagues\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/league-table\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            League Table\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/ranking\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n          >\r\n            Ranking\r\n          </a>\r\n        </div>\r\n\r\n        <!-- Right: Auth Buttons -->\r\n        <div class=\"hidden md:flex justify-end items-center space-x-4\">\r\n          <!-- Send Message (only on large screens) -->\r\n          <a\r\n            *ngIf=\"isLoggedIn && !isAdmin\"\r\n            routerLink=\"/player/inbox\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white font-bold hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 cursor-pointer\"\r\n          >\r\n            Inbox\r\n          </a>\r\n\r\n          <ng-container *ngIf=\"!isLoggedIn\">\r\n            <a\r\n              routerLink=\"/auth/login\"\r\n              routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n              class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            >\r\n              Login\r\n            </a>\r\n            <a\r\n              routerLink=\"/auth/register\"\r\n              routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n              class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            >\r\n              Register\r\n            </a>\r\n          </ng-container>\r\n\r\n          <a\r\n            *ngIf=\"isLoggedIn\"\r\n            (click)=\"logout()\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 cursor-pointer\"\r\n          >\r\n            Logout\r\n          </a>\r\n        </div>\r\n\r\n        <!-- Hamburger Button (small screen only) -->\r\n        <div class=\"md:hidden\">\r\n          <button (click)=\"toggleMenu()\" class=\"text-white ml-2\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              class=\"h-6 w-6\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n              stroke-width=\"2\"\r\n            >\r\n              <path\r\n                stroke-linecap=\"round\"\r\n                stroke-linejoin=\"round\"\r\n                d=\"M4 6h16M4 12h16M4 18h16\"\r\n              />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Mobile Menu (below full row) -->\r\n      <div\r\n        class=\"w-full mt-4 md:hidden\"\r\n        [ngClass]=\"{ block: isMenuOpen, hidden: !isMenuOpen }\"\r\n      >\r\n        <div class=\"flex flex-col space-y-2 font-bold text-center\">\r\n          <a\r\n            routerLink=\"/player/friendlies\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            🎮 Friendlies\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/teams\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            👥 Teams\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/forbidden\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            Forbidden Cards\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/allLeagues\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            All Leagues\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/league-table\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            League Table\r\n          </a>\r\n          <a\r\n            routerLink=\"/player/ranking\"\r\n            routerLinkActive=\"!text-indigo-300 bg-white/10 border-b-2 border-white\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n            (click)=\"closeMenu()\"\r\n          >\r\n            Ranking\r\n          </a>\r\n\r\n          <ng-container *ngIf=\"!isLoggedIn\">\r\n            <a\r\n              routerLink=\"/auth/login\"\r\n              class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n              (click)=\"closeMenu()\"\r\n            >\r\n              Login\r\n            </a>\r\n            <a\r\n              routerLink=\"/auth/register\"\r\n              class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2\"\r\n              (click)=\"closeMenu()\"\r\n            >\r\n              Register\r\n            </a>\r\n          </ng-container>\r\n\r\n          <a\r\n            *ngIf=\"isLoggedIn\"\r\n            (click)=\"logout(); closeMenu()\"\r\n            class=\"text-white hover:text-gray-300 hover:bg-gray-700 transition rounded py-2 px-2 cursor-pointer\"\r\n          >\r\n            Logout\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n</div>\r\n\r\n<!-- Notes Section - خارج النافبار الثابت -->\r\n<div\r\n  class=\"fixed w-full z-40 bg-black/10 backdrop-blur-sm\"\r\n  [style.top.px]=\"getNavbarOnlyHeight()\"\r\n  *ngIf=\"notes.length > 0\"\r\n>\r\n  <div class=\"min-h-[30px] w-full\">\r\n    <div *ngFor=\"let note of notes\" class=\"py-1\">\r\n      <h4 class=\"text-center text-[16px] text-white font-bold\">\r\n        {{ note.content }}\r\n      </h4>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {\r\n  Component,\r\n  HostListener,\r\n  OnInit,\r\n  ViewChild,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  Output,\r\n  EventEmitter,\r\n} from '@angular/core';\r\nimport { AuthService } from '../../app/core/services/auth.service';\r\nimport { Router } from '@angular/router';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { NoteService } from '../core/services/note.service';\r\nimport { Note } from '../models/interfaces';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  templateUrl: './navbar.component.html',\r\n  styleUrls: ['./navbar.component.css'],\r\n})\r\nexport class NavbarComponent implements OnInit, AfterViewInit {\r\n  @ViewChild('navbarContainer', { static: false }) navbarContainer!: ElementRef;\r\n  @ViewChild('navbarOnly', { static: false }) navbarOnly!: ElementRef;\r\n  @Output() navbarHeightChange = new EventEmitter<number>();\r\n\r\n  isLoggedIn = false;\r\n  isAdmin = false;\r\n  notes: Note[] = [];\r\n  isMenuOpen = false;\r\n  navbarHeight = 80; // default height\r\n  navbarOnlyHeight = 60; // navbar without notes\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastr: ToastrService,\r\n    private noteService: NoteService\r\n  ) {\r\n    this.authService.isLoggedIn$.subscribe((loggedIn) => {\r\n      this.isLoggedIn = loggedIn;\r\n      const role = this.authService.getRole();\r\n      this.isAdmin = role === 'Admin';\r\n    });\r\n  }\r\n  ngOnInit(): void {\r\n    this.getNotes();\r\n  }\r\n\r\n  ngAfterViewInit(): void {\r\n    this.calculateNavbarHeight();\r\n  }\r\n\r\n  calculateNavbarHeight(): void {\r\n    setTimeout(() => {\r\n      // Calculate navbar only height\r\n      if (this.navbarOnly) {\r\n        this.navbarOnlyHeight = this.navbarOnly.nativeElement.offsetHeight;\r\n      }\r\n\r\n      // Calculate total height including notes\r\n      const notesHeight = this.notes.length * 32; // approximate height per note\r\n      const totalHeight = this.navbarOnlyHeight + notesHeight;\r\n      this.navbarHeight = totalHeight;\r\n      this.navbarHeightChange.emit(totalHeight);\r\n    }, 150);\r\n  }\r\n\r\n  getNavbarOnlyHeight(): number {\r\n    return this.navbarOnlyHeight;\r\n  }\r\n\r\n  logout() {\r\n    this.authService.logout();\r\n    this.toastr.success('تم تسجيل الخروج بنجاح');\r\n    this.router.navigate(['/player']);\r\n  }\r\n\r\n  getNotes(): void {\r\n    this.noteService.getNotes().subscribe((response) => {\r\n      // Handle if response.notes is wrapped in an object or not an array\r\n      const notes = Array.isArray(response.notes)\r\n        ? response.notes\r\n        : (response.notes as any)?.data || [];\r\n      this.notes = notes.filter((n: Note) => n.isHidden == false);\r\n      // Recalculate height after notes change\r\n      setTimeout(() => this.calculateNavbarHeight(), 50);\r\n    });\r\n  }\r\n  toggleMenu() {\r\n    this.isMenuOpen = !this.isMenuOpen;\r\n  }\r\n\r\n  closeMenu() {\r\n    this.isMenuOpen = false;\r\n  }\r\n\r\n  @HostListener('window:resize', ['$event'])\r\n  onResize(event: any) {\r\n    this.calculateNavbarHeight();\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { TitleStrategyService } from './core/services/title-strategy.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  title = 'Yugi-Oh Tournament';\r\n  navbarHeight = 80; // default height\r\n\r\n  constructor(\r\n    private titleStrategy: TitleStrategyService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    // Initialize title strategy with a small delay to ensure router is ready\r\n    setTimeout(() => {\r\n      this.titleStrategy.setTitle('');\r\n    }, 100);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // Clean up\r\n  }\r\n\r\n  onNavbarHeightChange(height: number): void {\r\n    this.navbarHeight = height;\r\n  }\r\n}\r\n","<app-navbar (navbarHeightChange)=\"onNavbarHeightChange($event)\"></app-navbar>\r\n<div\r\n  [style.margin-top.px]=\"navbarHeight\"\r\n  [style.min-height]=\"'calc(100vh - ' + navbarHeight + 'px)'\"\r\n  class=\"relative\"\r\n>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n\r\n<!-- Floating Inbox Component -->\r\n<app-floating-inbox></app-floating-inbox>\r\n\r\n<ngx-spinner\r\n  bdColor=\"rgba(0, 0, 0, 1)\"\r\n  size=\"medium\"\r\n  color=\"#fff\"\r\n  type=\"square-jelly-box\"\r\n  [fullScreen]=\"true\"\r\n  ><p style=\"color: white\">Loading...</p></ngx-spinner\r\n>\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { NgxSpinnerService } from 'ngx-spinner';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private spinner: NgxSpinnerService) {}\r\n\r\n  intercept(\r\n    req: HttpRequest<any>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<any>> {\r\n    this.spinner.show();\r\n\r\n    const token = localStorage.getItem('token');\r\n    let clonedReq = req;\r\n\r\n    if (token) {\r\n      clonedReq = req.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n    }\r\n\r\n    return next.handle(clonedReq).pipe(\r\n      finalize(() => {\r\n        this.spinner.hide();\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpInterceptor,\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpResponse,\r\n} from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { CacheService } from '../services/cache.service';\r\n\r\n@Injectable()\r\nexport class CacheInterceptor implements HttpInterceptor {\r\n  constructor(private cacheService: CacheService) {}\r\n\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    \r\n    // Check if this is a GET request and should be cached\r\n    if (request.method === 'GET' && this.shouldCache(request.url)) {\r\n      const cachedResponse = this.cacheService.get(request.url);\r\n      if (cachedResponse) {\r\n        return of(new HttpResponse({ body: cachedResponse }));\r\n      }\r\n    }\r\n    \r\n    return next.handle(request);\r\n  }\r\n\r\n  private shouldCache(url: string): boolean {\r\n    // Add URLs that should be cached\r\n    const cacheableUrls = [\r\n      '/player/ranking',\r\n      '/player',\r\n      '/match',\r\n      '/Message/inbox',\r\n      '/note/notes',\r\n      '/player/players/all',\r\n      '/league/getCurrentLeague'\r\n    ];\r\n    \r\n    return cacheableUrls.some(cacheableUrl => url.includes(cacheableUrl));\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule, Title } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { NoopAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NavbarComponent } from './navbar/navbar.component';\r\nimport { AuthInterceptor } from './interceptors/auth-interceptor.service';\r\nimport { CacheInterceptor } from './core/interceptors/cache-interceptor.service';\r\nimport { NgxSpinnerModule } from 'ngx-spinner';\r\nimport { TitleStrategyService } from './core/services/title-strategy.service';\r\nimport { SharedModule } from './shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent, NavbarComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    NoopAnimationsModule,\r\n    ToastrModule.forRoot({\r\n      timeOut: 3000,\r\n      positionClass: 'toast-top-right',\r\n      preventDuplicates: true,\r\n    }),\r\n    NgxSpinnerModule.forRoot({ type: 'square-jelly-box' }),\r\n    SharedModule,\r\n  ],\r\n  providers: [\r\n    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },\r\n    { provide: HTTP_INTERCEPTORS, useClass: CacheInterceptor, multi: true },\r\n    NgxSpinnerModule,\r\n    Title,\r\n    TitleStrategyService,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\n\r\nplatformBrowserDynamic()\r\n  .bootstrapModule(AppModule)\r\n  .catch((err) => {});\r\n"],"x_google_ignoreList":[]}